# Veri Tipleri ve Yapıları

## Veri Tipleri

R'da kulllanılan 5 temel veri tipi vardır. Bu veri tipleri atomic vectörler olarak da bilinir. Atomic olması vektörlerin homojen olması anlamına gelmektedir. Yani vektör içerisinde aynı veri tipinden değerler yer alabilir. Veri tipleri;

-   numeric veya double (reel sayılar)

-   integer (tamsayılar)

-   complex (karmaşık sayılar)

-   character (metinsel ifadeler)

-   logical, TRUE ve FALSE (mantıksal)

`typeof()` veya `class()` fonksiyonları ile veri tipi öğrenilebilir.

::: callout-important
## Önemli

**`typeof()`** ve **`class()`** fonksiyonları, R programlama dilinde nesnelerin özelliklerini sorgulamak için kullanılır. Farklı amaçlara hizmet ederler ve bazı durumlarda farklı sonuçlar üretebilirler.

-   **`typeof()`** fonksiyonu, bir nesnenin temel veri türünü belirler. Örneğin, bir nesnenin karakter dizisi (string), sayı, liste, fonksiyon veya vektör gibi temel veri türlerinden hangisine ait olduğunu gösterir. Ancak, nesnenin özel sınıfını (class) ifade etmez. Örneğin, bir faktörün **`typeof()`** değeri "integer" olabilir.

-   **`class()`** fonksiyonu ise bir nesnenin özel sınıfını belirtir. Eğer bir nesne özel bir sınıfa aitse (örneğin, bir veri çerçevesi veya faktör), **`class()`** fonksiyonu bu özel sınıfın adını verir. Eğer nesne birden fazla sınıfa aitse, sınıflar bir sıra halinde listelenir.

Bu fonksiyonlar genellikle birlikte kullanılır çünkü bir nesnenin veri tipi ve sınıfı arasında farklılıklar olabilir. Örneğin, bir veri çerçevesi **`typeof()`** ile incelendiğinde **`list`** çıkabilir, çünkü veri çerçeveleri bir liste türündedir. Ancak, **`class()`** fonksiyonu bu nesnenin özel sınıfını, yani **`data.frame`** olarak gösterecektir. Bu farklılıklar, bir nesnenin hangi özelliklere sahip olduğunu daha iyi anlamak için kullanılabilir.
:::

**numeric**

```{r}
a <- 3.5
class(a)
typeof(a) # typeof numeriklerin tipini double olarak gösterir.
is.numeric(a) # verinin tipinin numerik olup olmadığı sorgulanır.

```

**integer**

```{r}

b <- 5
class(b)
is.integer(b)

c <- 6L # integer olması için sayının sağına L yazılır.
class(c)
is.integer(c)

class(as.integer(b)) # as. ile baslayan fonksiyonlar dönüşüm için kullanılır.
```

**complex**

```{r}

z <- 4 + 2i
class(z)

```

**character**

```{r}
d <- "R Programlama"
class(d)
e <- "5.5"
class(e)
class(as.numeric(e))

```

**logical**

```{r}
x <- TRUE
y <- FALSE
class(c(x,y))
as.integer(c(x,y)) # TRUE ve FALSE numeric olarak 1 ve 0 değerine karşılık gelir.

```

## Veri Yapıları

![https://app.dataquest.io/m/493/dataframes-in-r/1/introduction](images/data_structures.png){fig-align="center"}

### Vektörler

-   R'daki en temel nesneler vektörlerdir.

-   Vektörler homojen yapıya sahiptir yani bütün elemanları aynı veri tipinde olmalıdır.

-   Vektörler tek boyutludur.

-   Bir vektör oluşturmak için kullanabilecek en temel fonksiyon **`c()`**'dir.

```{r}

v <- c(1,4,7,2,5,8,3,6,9)

v[1] # 1. elemanını seçer
v[3] # 3. elemanını seçer
v[c(3,7)] # 3. ve 7. elemani secer
v[1:6] # 1. elemandan 6. elemana kadar secer
v[-2] # 2. elemani haric tutarak secer

length(v) # vektörün uzunluğunu gösterir
v2 <- c(v,12) # vektöre eleman ekleme
v2

# : ile başlangıç ve bitiş değerleri belli olan vektörler yaratılabilir.

v3 <- 1:10
v3

v4 <- 11:20
v4
# Vektörler ile matematiksel işlemler yapılabilir.

v3 + v4
v3 / v4
2 * v3 - v4

```

Aşağıda vektörler ile birlikte sıklıkla kulanılan bazı fonksiyonlara yer verilmiştir.

#### **seq**

**`seq()`** fonksiyonu, ardışık sayı dizileri oluşturmak için kullanılır. Bu fonksiyon, başlangıç ve bitiş değerlerinin yanı sıra belirli bir artış veya azalış miktarını belirterek ardışık bir dizi oluşturmanızı sağlar.

**`seq()`** fonksiyonu genellikle üç temel parametre alır:

1.  **`from`**: Dizinin başlangıç değeri.

2.  **`to`**: Dizinin bitiş değeri.

3.  **`by`**: Opsiyonel olarak belirlenebilen artış/azalış miktarı.

```{r}

seq(from = 5, to = 50, by =5) # 5 ile başlayan 50 ile biten 5şer artan vektör
seq(from = 5, to = 50, length = 7) # 5 ile başlayan 50 ile 7 elemanlı vektör
seq(5,1,-1) # 5 ile baslayıp 1'e kadar 1'er azaltarak vektor olusturma

```

#### **rep**

**`rep()`** fonksiyonu, R programlama dilinde tekrarlanan öğelerden oluşan vektörler oluşturmak için kullanılır. Bu fonksiyon, belirli bir öğenin veya öğelerin tekrarlanarak bir vektör oluşturulmasına izin verir.

**`rep()`** fonksiyonunun temel parametreleri şunlardır:

-   **`x`**: Tekrarlanacak öğelerin kendisi veya vektörü.

-   **`times`**: Tekrar sayısını belirten bir sayı veya vektör.

-   **`each`**: Her bir öğenin kaç kez tekrarlanacağını belirten bir sayı veya vektör.

-   **`length.out:`** çıktının istenen uzunluğu

```{r}
# 8 tane 10 değeri olan vektör
rep(10,times = 8) 

# 1,2,3 vektörünün 4 defa tekrarlanması
rep(c(1,2,3), times = 4) 

# each argünmanı ile sıralı ve tekrarlı vektör
rep(c(1,2,3), each = 4)

# sadece ilk 4 elemanı verir
rep(1:4, each = 2, length.out = 4) 

```

#### **all**

**`all()`** fonksiyonu, R programlama dilinde bir mantıksal vektörün tüm elemanlarının **`TRUE`** olup olmadığını kontrol etmek için kullanılır. Eğer vektörde en az bir **`FALSE`** değer varsa, **`FALSE`** sonucunu verir. Eğer vektördeki tüm elemanlar **`TRUE`** ise, **`TRUE`** döndürür. Bu fonksiyon genellikle koşullu ifadelerde ve vektörlerin doğruluğunu kontrol etmek için kullanılır.

```{r}

# Bir vektör oluşturalım
sayi_vektoru <- c(10, 20, 30, 40, 50)

# Tüm sayıların 0 ile 60 arasında olup olmadığını kontrol edelim
all(sayi_vektoru > 0 & sayi_vektoru < 60)

# vektördeki tüm elemanların şartı sağlayıp sağlamadıkları test edelim
all(sayi_vektoru > 30) 


```

#### **any**

**`any()`** fonksiyonu, R programlama dilinde bir mantıksal vektörün içinde en az bir tane **`TRUE`** değerinin olup olmadığını kontrol etmek için kullanılır. Eğer vektörde en az bir **`TRUE`** değer varsa, **`TRUE`** sonucunu verir. Eğer vektördeki tüm elemanlar **`FALSE`** ise, **`FALSE`** döndürür. Bu fonksiyon genellikle koşullu ifadelerde ve vektörlerin içeriğini kontrol etmek için kullanılır.

```{r}

# vektördeki en az bir elemanın şartı sağlayıp sağlamadığı test edelim
any(sayi_vektoru) 

# Vektörde en az bir elemanın 10 olup olmadığını kontrol edelim
any(sayi_vektoru==10) 

```

#### **unique**

**`unique()`** fonksiyonu, R programlama dilinde bir vektördeki benzersiz (tekrar etmeyen) elemanları bulmak için kullanılır. Bu fonksiyon, vektördeki tekrarlanan elemanları kaldırarak yalnızca benzersiz elemanları içeren yeni bir vektör oluşturur. Bu fonksiyon, veri temizleme veya benzersiz değerlerin bulunması gibi durumlarda sıklıkla kullanılır.

```{r}

# Tekrarlı gözlmeleri olan bir vektör oluşturalım
vektor <- rep(1:5,3)
vektor
unique(vektor) # tekrarlı gözlemler temizlenir

```

#### **duplicated**

**`duplicated()`** fonksiyonu, bir vektördeki tekrarlanan değerleri tespit etmek için kullanılır. Bu fonksiyon, bir vektördeki her bir elemanın önceki elemanlar arasında daha önce görülüp görülmediğini kontrol eder ve tekrar eden değerleri belirler. Bu fonksiyon, veri temizleme veya tekrarlanan değerlerin tespit edilmesi gereken durumlarda kullanışlıdır.

```{r}

# tekrarlı gözlemlerin varlığını kontrol eder
duplicated(vektor) 

# tekrarlı gözlemleri listeler
vektor[duplicated(vektor)]

```

#### **sort**

**`sort()`** fonksiyonu, vektörleri sıralamak için kullanılır. Bu fonksiyon, sayısal veya karakter vektörlerin elemanlarını artan veya azalan sıraya göre sıralar.

```{r}
#| eval: false
sort(x, decreasing = FALSE)
```

Burada:

-   **`x`**, sıralanacak olan vektördür.

-   **`decreasing`**, sıralamanın azalan sırada olup olmayacağını belirleyen bir mantıksal değerdir (varsayılan olarak **`FALSE`**).

```{r}

# Bir sayısal vektör oluşturalım
vektor <- c(5, 2, 8, 1, 4)

# küçükten büyüğe yani artan sıralama yapar.
sort(vektor)

# büyükten küçüğe yani azalan sıralama yapar.
sort(vektor,decreasing = TRUE) 

# Bir karakter vektörü oluşturalım
karakter_vektor <- c("elma", "armut", "muz", "kavun")

# karakter tipinideki vektörler alfabetik sıraya göre sıralanır
sort(karakter_vektor)
sort(karakter_vektor,decreasing = TRUE) 
```

#### **is.na**

**`is.na()`** fonksiyonu, R programlama dilinde bir vektördeki veya veri çerçevesindeki değerlerin **`NA`** (Not Available - Mevcut Değil) olup olmadığını kontrol etmek ve verilerin içinde eksik veya mevcut olmayan değerleri tespit etmek için kullanılır.için kullanılır. Her **`NA`** değeri için ilgili konumda **`TRUE`**, değilse **`FALSE`** döndürür. Veri temizleme ve analiz aşamalarında oldukça faydalıdır.

```{r}

# Bir vektör oluşturalım
vektor <- c(1, 2, NA, 4, NA, 6)

# vektördeki elamanların NA olup olmadığını test eder.
is.na(vektor)

# NA olmayan değerleri filtreleyelim
vektor[!is.na(vektor)]

# NA değerlerini bir başka değerle değiştirelim, örneğin 0 ile
vektor[is.na(vektor)] <- 0
vektor

```

#### **which**

**`which()`** fonksiyonu, belirli bir koşulu sağlayan veya belirli bir değere sahip olan elemanların konumlarını bulmak için kullanılır. Bu fonksiyon, bir vektörde veya bir koşulu karşılayan elemanların indislerini döndürür. Filtreleme veya koşullu indeksleme gibi durumlarda oldukça faydalıdır.

```{r}

# Bir vektör oluşturalım
vektor <- c(10, 20, 30, 40, 50)

# 30'dan büyük olan elemanların indekslerini bulalım
which(vektor > 30)
vektor[which(vektor > 30)]

# vektördeki maximum elemanın posizyonunu gösterir
which.max(vektor)

# vektördeki minimum elemanın posizyonunu gösterir
which.min(vektor) 


```

#### **Temel İstatistiksel Bazı Fonksiyonlar**

```{r}

veri <- 1:10

mean(veri) # NA varsa sonuç NA döner
mean(veri, na.rm = TRUE) # aritmetik ortalama
median(veri) # medyan (ortanca)
sum(veri,na.rm = TRUE) # vektör toplamını verir
min(veri,na.rm = TRUE) # vektörün minimum değeri
max(veri,na.rm = TRUE) # vektörün maximum değeri
sd(veri,na.rm = TRUE) # standart sapma
var(veri) # varyans
summary(veri) # Özet istatistikler
quantile(veri) # Çeyreklikler


```

### Matrisler

-   Matrisler, iki boyutlu yani satır ve sütunları olan atomik vektörlerdir.

-   **`matrix()`** fonksiyonu ile tanımlanmaktadır.

-   Vektörlerin birleştirilmesi ile de matrisler oluşturulabilir. [**rbind**]{.underline} satır bazlı alt alta birleştirme, [**cbind**]{.underline} ise sütun bazlı yanyana birleştirme yapar. Burada vektörlerin aynı boyutlarda olmasına dikkat edilmesi gerekir.

```{r}

v1 <- c(3,4,6,8,5)
v2 <- c(4,8,4,7,1)
v3 <- c(2,2,5,4,6)
v4 <- c(4,7,5,2,5)

matris <- cbind(v1, v2, v3, v4)
matris

is.matrix(matris)
dim(matris) # matrisin boyutları

matrix(nrow = 3, ncol = 3, 1:9)
matrix(1:9, nrow = 3, ncol = 3, byrow = TRUE) # byrow satırlara göre oluşturur.

mat <- seq(3, 21, by = 2)
mat
dim(mat) <- c(5,2)
mat
matrix(c(1,2,3,11,22,33), nrow = 2, ncol = 3, byrow = TRUE)

# normal dağılımdan 0 ortalamalı, 1 standart sapmalı 16 sayı üret
MA <- rnorm(16, 0, 1)
MA <- matrix(MA, nrow = 4, ncol = 4)

# normal dağılımdan 90 ortalamalı, 10 standart sapmalı 16 sayı üret
MB <- rnorm(16, 90, 10)
MB <- matrix(MB, nrow = 4, ncol = 4)

m <- rbind(MA, MB)
m

# satır ve sütun isimlendirme
colnames(m) <- LETTERS[1:4]
rownames(m) <- tail(LETTERS,8)
m

# Matris Elemanlarina Erismek
m[1,1] # 1. satır, 1.sütundak, eleman
m[4,2] # 4. satır, 2.sütundak, eleman
m[,2] # 2. sütun elemanları
m[-3,] # 3. satır hariç tüm elemanlar

# köşegen matris oluşturma
diag(2,nrow=3)
diag(1,5) # 5*5 birim matris

# transpose
t(m)

# matris ile işlemler

m1 <- matrix(1:4,nrow=2)
m2 <- matrix(5:8,nrow=2)

m1;m2
m1 + m2 # matris elemanları birebir toplanır
m1 / m2 # matris elemanları birebir toplanır
m1 * m2 # matris elemanları birebir çarpılır
m1 %*% m2 # matris çarpımı
solve(m2) # matrisin tersi

rowSums(m1) # satır toplamları
rowMeans(m1) # satır ortalaması
colSums(m1) # sütun toplamları
colMeans(m1) # sütun ortalaması

```

### Listeler

-   Listeler, birbirinden farklı veri tiplerine sahip vektörler, matrisler vb farklı objeleri birarada tutabilen yapılardır.

-   **`list()`** ile liste oluşturulur.

```{r}

x <- c(3,5,7)
y <- letters[1:10]
z <- c(rep(TRUE,3),rep(FALSE,4))

list <- list(x,y,z)
list
class(list) # listenin sınıfını verir
str(list) # listenin yapısını verir

names(list) <- c("numeric","karakter","mantıksal") # liste isimlendirme
list

list$numeric
list$karakter
list$mantıksal

list[[2]]

list$numeric2 <- c(4:10) # listeye eleman ekleme
list

list$numeric <- NULL # listeden eleman silme
list

unlist(list) # listeyi vektöre çevirir.

```

### dataframe

Veri çerçevesi (dataframe), her sütunun bir değişkenin değerlerini ve her satırın her sütundan bir değer kümesini içerdiği bir tablo veya iki boyutlu dizi benzeri bir yapıdır. Bir veri çerçevesinin özellikleri şunlardır:

-   Sütun adları boş olmamalıdır.

-   Satır adları benzersiz olmalıdır.

-   Bir veri çerçevesinde saklanan veriler sayısal, faktör veya karakter tipinde olabilir.

-   Her sütun aynı sayıda veri öğesi içermelidir.

**`data.frame()`** fonksiyonunu uygulayarak bir veri çerçevesi oluşturabiliriz.

```{r}

# data.frame oluşturma
set.seed(12345)

data <- data.frame(
  row_num = 1:20,
  col1 = rnorm(20),
  col2 = runif(20), # uniform dağılımdam 20 gözlem üret
  col3 = rbinom(20,size=5,prob = 0.5), # binom dağılımdam 20 gözlem üret
  col4 = sample(c("TRUE","FALSE"),20,replace = TRUE),
  col5 = sample(c(rep(c("E","K"),8),rep(NA,4))),
  stringsAsFactors = TRUE # karakter olanlar faktör olarak değerlendirilsin
)

class(data)
head(data) # ilk 6 gözlemi gösterir
tail(data) # son 6 gözlemi gösterir
tail(data,10) # son 10 gözlemi gösterir

str(data) # tablonun yapısını gösterir
summary(data) # tablonun özet istatistiklerini gösterir

# veri çerçevesinden belirli sütun/ları seçmek için $ veya [] kullanılır.
head(data$col1)
head(data[,"col1"])

# veri çerçevesinden belirli satır/ları seçmek için [] kullanılır.
data[1:2,] 

# 3. and 5. satır ile 2. ve 4. kolon
data[c(3,5),c(2,4)]

# koşula göre veriler seçilebilir
data$row_num > 12 # TRUE veya FALSE döner
data[data$row_num > 12,] # koşula göre satırlar döner

# subset ile tablo filtrelenebilir.
subset(data, 
       row_num >= 10 & col4 == 'TRUE',
       select = c(row_num, col1, col2,col4))

# names veya colnames ile sütun isimleri elde edilir.
names(data)
colnames(data)

# vektör ile sütun seçimi
cols <- c("col1","col2","col5")
head(data[cols])

# sütun silme
data$col1 <- NULL
head(data)

# sütun ekleme
data$col1 <- rnorm(20)
head(data)

# sütunları sıralama
head(data[c("row_num","col1","col2","col3","col4","col5")])

# sıralama
head(data[order(data$col3),]) # artan
head(data[order(-data$row_num),]) # azalan
head(data[order(data$col3,-data$row_num),])

# kayıp gözlemler (missing values)
tail(is.na(data))
tail(is.na(data$col5))
data[is.na(data$col5),] # col5 NA olan satılar
data[!is.na(data$col5),] # col5 NA olmayan satılar

rowSums(is.na(data)) # satılardaki toplam kayıp gözlem sayısı
colSums(is.na(data)) # sütunlardaki toplam kayıp gözlem sayısı
sum(is.na(data)) # tablodaki toplam kayıp gözlem sayısı

complete.cases(data) # satırlarda eksik gözlemlerin durumu
data[complete.cases(data),]
data[!complete.cases(data),]

na.omit(data) # NA olan satırları siler.

```

### tibble

**`tibble`**, Hadley Wickham tarafından geliştirilen ve **`dplyr`** paketi ile sıkça kullanılan bir veri yapısıdır. **`tibble`**, **`data.frame`**'e benzerdir, ancak bazı önemli farklar vardır. **`tibble`**, daha düzenli ve okunabilir bir çıktı üretir ve bazı varsayılan davranışları **`data.frame`**'den farklıdır. Modern data.frame olarak tanımlanmaktadır.

```{r}

# tibble örneği
library(tibble)

ogrenciler_tibble <- tribble(
  ~Ad,     ~Yas, ~Cinsiyet,
  "Ali",   20,   "Erkek",
  "Ayşe",  22,   "Kadın",
  "Mehmet", 21,  "Erkek",
  "Zeynep", 23,  "Kadın"
)

# tibble'ı görüntüleme
print(ogrenciler_tibble)

```

Yukarıdaki örnekte, "ogrenciler_tibble" adında bir **`tibble`** oluşturuldu. **`tibble`**, sütun adlarını ve içeriği daha okunabilir bir şekilde görüntüler ve sütunların başlık ve veri tipi (**`~Ad`**, **`~Yas`**, **`~Cinsiyet`**) gibi özelliklerini korur.

::: callout-note
### Not

Hem **`dataframe`** hem de **`tibble`** veri analizi ve işleme işlemlerinde kullanışlıdır. Hangi veri yapısını kullanacağınız, projenizin gereksinimlerine ve kişisel tercihinize bağlıdır. Özellikle veri analizi için **`dplyr`** gibi paketlerle çalışırken **`tibble`** tercih edilir.
:::

### Faktörler

-   Faktörler, verileri kategorilere ayırmak ve düzeyler halinde depolamak için kullanılan veri nesneleridir. Hem karakter hem de tam sayıları depolayabilirler.

-   "Erkek,"Kadın" ve Doğru, Yanlış vb. gibi istatistiksel modelleme için veri analizinde faydalıdırlar.

-   Faktörler, girdi olarak bir vektör alınarak **`factor()`** işlevi kullanılarak oluşturulur.

```{r}

data <- c(rep("erkek",5),rep("kadın",7))
print(data)
is.factor(data)

# veriyi faktöre çevirme
factor_data <- factor(data)

print(factor_data)
print(is.factor(factor_data))

as.numeric(factor_data)

# data frame için vektörler oluşturalım
boy <- c(132,151,162,139,166,147,122)
kilo <- c(48,49,66,53,67,52,40)
cinsiyet <- c("erkek","erkek","kadın","kadın","erkek","kadın","erkek")

# data frame
df <- data.frame(boy,kilo,cinsiyet)
str(df)
df$cinsiyet <- factor(cinsiyet)
str(df)

print(is.factor(df$cinsiyet))

# cinsiyet kolononun seviyeleri
print(df$cinsiyet)

# seviyelerin sırası değiştirilebilir.

df2 <- c(rep("düşük",4),rep("orta",5),rep("yüksek",2))

factor_df2 <- factor(df2)
print(factor_df2)

order_df2 <- factor(factor_df2,levels = c("yüksek","orta","düşük"))
print(order_df2)

# ordered=TRUE ile seviyelerin sıralı olduğu ifade edilir
order_df2 <- factor(factor_df2,levels = c("yüksek","orta","düşük"),ordered = TRUE)
print(order_df2)

# Faktör seviyesi üretme

# gl() fonksiyonunu kullanarak faktör seviyeleri üretebiliriz. 
# Girdi olarak kaç seviye ve her seviyeden kaç tane sayı oalcağı belirtilir.

faktor <- gl(n=3, k=4, labels = c("level1", "level2","level3"),ordered = TRUE)
print(faktor)

```
