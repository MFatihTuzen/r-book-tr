library(dplyr)
sessionInfo()
library(dplyr)
library(dplyr, quietly = TRUE)
install.packages(zoo)
install.packages("zoo")
install.packages("psych")
install.packages("DescTools")
install.packages("moments")
# Örnek veri seti oluşturalım
# üreteç sabitlenir
set.seed(123)
data <- data.frame(
ID = 1:10,
Age = c(25, 30, NA, 22, 35, 40, NA, 28, NA, 32),
Income = c(50000, 60000, 75000, NA, 80000, 90000, 70000, NA, 65000, 75000),
Score = c(80, 85, 90, 78, NA, 88, 92, 85, 80, NA)
)
# Age değişkenindeki eksik değerlere ortalama değeri atama
data$Age_imputed[is.na(data$Age)] <- mean(data$Age, na.rm = TRUE)
# Değişiklikleri göster
print(data)
library(ggplot2)
library(dplyr, quietly = TRUE)
rm(list = ls())
library(ggplot2)
# çizgi türü değiştirilebilir
economics %>%
ggplot(aes(x=date,y=pce)) +
geom_line(linetype = "dashed", size = 1, colour = "blue")
library(dplyr)
# çizgi türü değiştirilebilir
economics %>%
ggplot(aes(x=date,y=pce)) +
geom_line(linetype = "dashed", size = 1, colour = "blue")
economics %>%
ggplot(aes(x=date,y=pce)) +
geom_line(linetype = 2, size = 1, colour = "blue")
economics %>%
ggplot(aes(x=date,y=pce)) +
geom_line(linetype = 3, size = 1, colour = "blue")
economics %>%
ggplot(aes(x=date,y=pce)) +
geom_line(linetype = 10, size = 1, colour = "blue")
economics %>%
ggplot(aes(x=date,y=pce)) +
geom_line(linetype = 40, size = 1, colour = "blue")
economics %>%
ggplot(aes(x=date,y=pce)) +
geom_line(linetype = 1, size = 1, colour = "blue")
economics %>%
ggplot(aes(x=date,y=pce)) +
geom_line(linetype = 3, size = 1, colour = "blue")
economics %>%
ggplot(aes(x=date,y=pce)) +
geom_line(linetype = 0, size = 1, colour = "blue")
economics %>%
ggplot(aes(x=date,y=pce)) +
geom_line(linetype = "blank", size = 1, colour = "blue")
# zaman grafiğine noktalar ekleme
economics %>%
filter(lubridate::year(date) >= 2010) %>%
ggplot(aes(x=date,y=pce)) +
geom_line()+
geom_point(size = 3, shape= 7, colour = "red")
?geom_point
# gölgeli zaman grafiği
economics %>%
ggplot(aes(x=date,y=pce)) +
geom_area(color="blue",fill="red",alpha=0.6) +
# y ekseni aralıklarını ayarlama
scale_y_continuous(breaks = seq(0, max(economics$pce), by = 1000))
economics_long %>%
ggplot(aes(x=date,y=value))+
geom_line() +
facet_wrap(~variable,scales = "free_y")+
scale_y_log10() # y eksenlerinin logaritması alınır
glimpse(economics_long)
# ilk 10 gözleme bakalım
head(economics_long,10)
library(ggplot2)
# Örnek: Saçılım grafiği oluşturma
# mtcars veri setini kullanalım
data(mtcars)
# Saçılım grafiği oluşturma
ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_point() +
labs(title = "Saçılım Grafiği",
x = "Ağırlık (wt)",
y = "Miles Per Gallon (mpg)")
# Saçılım grafiği oluşturma ve özellikleri belirleme
ggplot(mtcars, aes(x = wt, y = mpg, color = factor(cyl), size = hp)) +
geom_point(shape = 16, alpha = 0.7) +  # Nokta şekli ve saydamlık
labs(title = "Saçılım Grafiği",
x = "Ağırlık (wt)",
y = "Miles Per Gallon (mpg)",
color = "Silindir Sayısı",
size = "Güç (hp)") +
theme_minimal() +  # Tema seçimi
scale_color_manual(values = c("red", "green", "blue"))  # Renk paleti
# Saçılım grafiği oluşturma ve düzeltme çizgisi ekleme
ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
labs(title = "Saçılım Grafiği with Düzeltme Çizgisi",
x = "Ağırlık (wt)",
y = "Miles Per Gallon (mpg)")
# Saçılım grafiği oluşturma ve düzeltme çizgisi ekleme
ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
labs(title = "Saçılım Grafiği with Düzeltme Çizgisi",
x = "Ağırlık (wt)",
y = "Miles Per Gallon (mpg)")
# Saçılım grafiği oluşturma ve düzeltme çizgisi ile güven aralığı ekleme
ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_point() +
geom_smooth(method = "loess", se = TRUE, color = "blue") +
labs(title = "Saçılım Grafiği with LOESS Düzeltme Çizgisi ve Güven Aralığı",
x = "Ağırlık (wt)",
y = "Miles Per Gallon (mpg)")
# Saçılım grafiği oluşturma ve düzeltme çizgisi ile güven aralığı ekleme
ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_point() +
geom_smooth(method = "loess", se = TRUE, color = "skyblue") +
labs(title = "Saçılım Grafiği-LOESS Düzeltme Çizgisi ve Güven Aralığı",
x = "Ağırlık (wt)",
y = "Miles Per Gallon (mpg)")
# Saçılım grafiği oluşturma ve düzeltme çizgisi ile güven aralığı ekleme
ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_point() +
geom_smooth(method = "loess", se = TRUE, color = "red") +
labs(title = "Saçılım Grafiği-LOESS Düzeltme Çizgisi ve Güven Aralığı",
x = "Ağırlık (wt)",
y = "Miles Per Gallon (mpg)")
# Saçılım grafiği oluşturma ve düzeltme çizgisi ile güven aralığı ekleme
ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_point() +
geom_smooth(method = "loess", se = TRUE, color = "blue") +
labs(title = "Saçılım Grafiği-LOESS Düzeltme Çizgisi ve Güven Aralığı",
x = "Ağırlık (wt)",
y = "Miles Per Gallon (mpg)")
rm(list=ls())
# fonksiyonu oluşturalım
f_sd <- function(x) {
result <- sqrt(sum((x - mean(x))^2) / (length(x) - 1))
return(result)
}
set.seed(123) # Üreteç sabitlenir
x1 <- rnorm(1000, 0, 1.0) # normal dağılımdan 1000 adet sayı üretilir
f_sd(x1)
rm(list=ls())
# Örnek bir liste oluşturalım
liste <- list(a = 1:5, b = 6:10, c = 11:15)
# Her bir liste elemanının karesini alalım
kareler <- lapply(liste, function(x) x^2)
kareler
# Örnek bir liste oluşturalım
mylist <- list(data.frame(A = 1:3, B = 4:6),
data.frame(X = 7:9, Y = 10:12),
data.frame(M = 13:15, N = 16:18))
# Her bir liste elemanının ilk sütununu alalım
sonuç <- lapply(mylist, function(x) x[,1])
sonuç
lapply(mylist,mean)
lapply(mylist,colMeans)
# Örnek bir liste oluşturalım
liste <- list(a = c(1, 2, 3), b = c(4, 5, 6), c = c(7, 8, 9))
# Her bir liste elemanının ortalamasını bulalım
ortalama <- sapply(liste, mean)
ortalama
# Her bir liste elemanının uzunluğunu bulan işlev
uzunluk_bul <- function(x) length(x)
# Her bir liste elemanının uzunluğunu bulalım
sonuç <- sapply(liste, uzunluk_bul)
sonuç
# Her bir liste elemanının karelerini bulan işlev
kare_bul <- function(x) x^2
# Her bir liste elemanının karelerini bulalım
sonuç <- sapply(liste, kare_bul)
sonuç
# Örnek bir veri çerçevesi oluşturalım (farklı türlerde değerler içeren)
veri <- data.frame(A = c(1, 2, 3), B = c("dört", 5, 6), C = c("yedi", 8, 9))
# Her bir sütunun maksimum ve minimum değerlerini bulan işlev
max_min_bul <- function(x) {
# Sütunun maksimum değerini bul
max_deger <- max(x, na.rm = TRUE)
# Sütunun minimum değerini bul
min_deger <- min(x, na.rm = TRUE)
# Sonuçları bir vektör olarak döndür
c(maksimum = max_deger, minimum = min_deger)
}
# Her bir sütunun maksimum ve minimum değerlerini bulalım
sonuç <- sapply(veri, max_min_bul)
sonuç
