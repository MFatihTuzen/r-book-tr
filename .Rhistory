)
View(us_rent_income_wide)
us_rent_income_wide <- us_rent_income |>
pivot_wider(
names_from = variable,
values_from = c(estimate, moe),
names_sep = NULL
)
us_rent_income %>%
pivot_wider(
names_from = variable,
names_glue = "{variable}_{.value}",
values_from = c(estimate, moe)
)
us_rent_income_wide <- us_rent_income |>
pivot_wider(
names_from = variable,
values_from = c(estimate, moe),
names_sep = "."
)
us_rent_income_wide
us_rent_income
us_rent_income
warpbreaks <- as_tibble(warpbreaks[c("wool", "tension", "breaks")])
View(warpbreaks)
warpbreaks
warpbreaks %>%
pivot_wider(
names_from = wool,
values_from = breaks,
values_fn = mean
)
warpbreaks |>
group_by(wool,tension) |>
summarize(ort=mean(breaks))
library(dplyr)
warpbreaks |>
group_by(wool,tension) |>
summarize(ort=mean(breaks))
warpbreaks %>%
pivot_wider(
names_from = wool,
values_from = breaks,
values_fn = mean
)
warpbreaks %>%
pivot_wider(
names_from = wool,
values_from = breaks
)
us_rent_income |>
filter(GEOID == 72) |>
pivot_wider(
names_from = variable,
names_glue = "{variable}_{.value}",
values_from = c(estimate, moe),
values_fill =0
)
us_rent_income |>
filter(GEOID == 72) |>
pivot_wider(
names_from = variable,
names_glue = "{variable}_{.value}",
values_from = c(estimate, moe),
values_fill = list(c(0,0))
)
us_rent_income |>
filter(GEOID == 72) |>
pivot_wider(
names_from = variable,
names_glue = "{variable}_{.value}",
values_from = c(estimate, moe),
values_fill = list(0)
)
us_rent_income |>
filter(GEOID == 72) |>
pivot_wider(
names_from = variable,
names_glue = "{variable}_{.value}",
values_from = c(estimate, moe),
values_fill = list(estimate = 0, moe = 0)
)
us_rent_income |>
filter(GEOID == 72) |>
pivot_wider(
names_from = variable,
names_glue = "{variable}_{.value}",
values_from = c(estimate, moe),
values_fill = 0
)
us_rent_income |>
filter(GEOID == 72) |>
pivot_wider(
names_from = variable,
values_from = c(estimate, moe),
values_fill = 0
)
xx <- us_rent_income |>
filter(GEOID == 72) |>
pivot_wider(
names_from = variable,
values_from = c(estimate, moe),
values_fill = 0
)
View(xx)
us_rent_income |>
filter(GEOID == 72) |>
pivot_wider(
names_from = variable,
values_from = c(estimate, moe),
values_fill = 0
)
us_rent_income |>
filter(GEOID == 72)
us_rent_income |>
filter(GEOID == 72) |>
pivot_wider(
names_from = variable,
values_from = c(estimate, moe),
values_fill = list(variable=0)
)
us_rent_income |>
filter(GEOID == 72) |>
filter(!is.na(variable)) |>
pivot_wider(
names_from = variable,
values_from = c(estimate, moe),
values_fill = list(variable=0)
)
us_rent_income |>
filter(GEOID == 72) |>
pivot_wider(
id_cols = c(GEOID ,NAME),
names_from = variable,
values_from = c(estimate, moe),
values_fill = list(variable=0)
)
us_rent_income |>
filter(GEOID == 72) |>
pivot_wider(
id_cols = c(GEOID ,NAME),
names_from = variable,
values_from = c(estimate, moe),
values_fill = 0
)
us_rent_income |>
filter(GEOID == 72) |>
pivot_wider(
id_cols = c(GEOID ,NAME),
names_from = variable,
values_from = c(estimate, moe),
values_fill = 1
)
us_rent_income |>
filter(GEOID == 72) |>
pivot_wider(
id_cols = c(GEOID ,NAME),
names_from = variable,
values_from = c(estimate),
values_fill = 0
)
us_rent_income |>
filter(GEOID == 72) |>
pivot_wider(
id_cols = c(GEOID ,NAME),
names_from = variable,
values_from = c(estimate,moe),
values_fill = 0
)
us_rent_income |>
filter(GEOID == 72) |>
pivot_wider(
id_cols = c(GEOID ,NAME),
values_fill = 0,
names_from = variable,
values_from = c(estimate,moe)
)
us_rent_income
us_rent_income |>
slice(-1)
us_rent_income |>
slice(-1) |>
pivot_wider(
id_cols = c(GEOID ,NAME),
values_fill = 0,
names_from = variable,
values_from = c(estimate,moe),
)
us_rent_income |>
slice(-1)
us_rent_income |>
slice(-1) |>
pivot_wider(
names_from = variable,
values_from = c(estimate,moe),
)
us_rent_income |>
slice(-1) |>
pivot_wider(
names_from = variable,
values_from = c(estimate,moe),
values_fill = 0
)
veri <- data.frame(
Ad = c("Ali", "Esra"),
Soyad = c("Yılmaz", "Mutlu")
)
veri <- unite(veri, AdSoyad, Ad, Soyad, sep = " ")
print(veri)
veri <- data.frame(
Ad = c("Ahmet", "Mehmet", "Ayşe", "Fatma", "Mustafa", "Emine"),
Soyad = c("Yılmaz", "Kaya", "Demir", "Çelik", "Şahin", "Koç")
)
unite(veri, AdSoyad, Ad, Soyad, sep = " ")
veri <- data.frame(
Ad = c("Ahmet", "Mehmet", "Ayşe", "Fatma", "Mustafa", "Emine"),
veri <- data.frame(
Ad = c("Ahmet", "Mehmet", "Ayşe", "Fatma", "Mustafa", "Emine"),
Soyad = c("Yılmaz", "Kaya", "Demir", "Çelik", "Şahin", "Koç")
)
veri <- data.frame(
Ad = c("Ahmet", "Mehmet", "Ayşe", "Fatma", "Mustafa", "Emine"),
Soyad = c("Yılmaz", "Kaya", "Demir", "Çelik", "Şahin", "Koç")
)
veri <- data.frame(
Ad = c("Ahmet", "Mehmet", "Ayşe", "Fatma", "Mustafa", "Emine"),
Soyad = c("Yılmaz", "Kaya", "Demir", "Çelik", "Şahin", "Koç")
)
# Türkçe isim ve soyisim listeleri
isimler <- c("Ahmet", "Mehmet", "Ayşe", "Fatma", "Mustafa", "Emine", "Ali", "Zeynep", "Hüseyin", "Hatice")
veri <- data.frame(
Ad = c("Ahmet", "Mehmet", "Ayşe", "Fatma", "Mustafa", "Emine"),
Soyad = c("Yılmaz", "Kaya", "Demir", "Çelik", "Şahin", "Koç")
)
# Türkçe isim ve soyisim listeleri
isimler <- c("Ahmet", "Mehmet", "Ayşe", "Fatma", "Mustafa", "Emine", "Ali", "Zeynep", "Hüseyin", "Hatice")
isimler
veri <- data.frame(
Ad = c("Ahmet", "Mehmet", "Ayşe", "Fatma", "Mustafa", "Emine"),
Soyad = c("Yılmaz", "Kaya", "Demir", "Çelik", "Şahin", "Koç")
)
veri <- data.frame(
Ad = c("Ahmet", "Mehmet", "Ayşe", "Fatma", "Mustafa", "Emine", "Ali", "Zeynep", "Hüseyin", "Hatice"),
Soyad = c("Yılmaz", "Kaya", "Demir", "Çelik", "Şahin", "Koç", "Öztürk", "Arslan", "Aydın", "Güneş")
veri <- data.frame(
Ad = c("Ahmet", "Mehmet", "Fatma", "Mustafa"),
Soyad = c("Demir", "Umut", "Arslan", "Kaya")
)
veri <- data.frame(
Ad = c("Ahmet", "Mehmet", "Fatma", "Mustafa"),
Soyad = c("Demir", "Umut", "Arslan", "Kaya")
)
unite(veri, AdSoyad, Ad, Soyad, sep = " ")
veri <- data.frame(
AdSoyad = c("Ali Yılmaz", "Esra Mutlu")
)
veri <- separate(veri, AdSoyad, c("Ad", "Soyad"), sep = " ")
print(veri)
veri <- data.frame(
AdSoyad = c("Ali Yılmaz", "Esra Mutlu")
)
veri <- separate(veri, AdSoyad, into = c("Ad", "Soyad"), sep = " ")
print(veri)
veri <- data.frame(
AdSoyad = c("Ahmet Demir","Mehmet Umut", "Fatma Arslan", "Mustafa Kaya")
)
veri <- separate(veri, AdSoyad, into = c("Ad", "Soyad"), sep = " ")
print(veri)
# Örnek veri seti oluşturma
veri <- tibble(
sokak = c("Örnek Sokak", "Şehitler Caddesi", "Atatürk Bulvarı"),
mahalle = c("Merkez", "Güneşli", "Bahçelievler"),
ilce = c("Çankaya", "Bağcılar", "Üsküdar"),
sehir = c("Ankara", "İstanbul", "İstanbul"),
# Örnek veri seti oluşturma
veri <- tibble(
sokak = c("Örnek Sokak", "Şehitler Caddesi", "Atatürk Bulvarı"),
mahalle = c("Merkez", "Güneşli", "Bahçelievler"),
ilce = c("Çankaya", "Bağcılar", "Üsküdar"),
sehir = c("Ankara", "İstanbul", "İstanbul"),
Sys.getlocale()
Sys.getenv()
Sys.getlocale()
Sys.setlocale(category = "LC_ALL", locale = "Turkish_Turkey.1254")
Sys.setlocale(category = "LC_ALL", locale = "Turkish")
veri <- tibble(
sokak = c("Örnek Sokak", "Şehitler Caddesi", "Atatürk Bulvarı"))
veri <- tibble(
sokak = c("Çankaya", "Şehitler Caddesi", "Atatürk Bulvarı"))
View(veri)
# Örnek veri seti oluşturma
veri <- tibble(
sokak = c("Örnek Sokak", "Şehitler Caddesi", "Atatürk Bulvarı"),
mahalle = c("Merkez", "Güneşli", "Bahçelievler"),
ilce = c("Çankaya", "Bağcılar", "Üsküdar"),
sehir = c("Ankara", "İstanbul", "İstanbul"),
posta_kodu = c("06000", "34100", "34662"),
.encoding = "UTF-8" # Karakter kodlamasını belirtme
)
# Örnek veri seti oluşturma
veri <- tibble(
sokak = c("Örnek Sokak", "Şehitler Caddesi", "Atatürk Bulvarı"),
mahalle = c("Merkez", "Güneşli", "Bahçelievler"),
ilce = c("Çankaya", "Bağcılar", "Üsküdar"),
sehir = c("Ankara", "İstanbul", "İstanbul"),
posta_kodu = c("06000", "34100", "34662")
)
# unite() fonksiyonunu kullanarak yeni bir adres sütunu oluşturma
veri <- veri %>%
unite(adres, sokak, mahalle, ilce, sehir, posta_kodu, sep = ", ")
View(veri)
veri <- tibble(
sokak = c("Örnek Sokak", "Şehitler Caddesi", "Atatürk Bulvarı"),
mahalle = c("Merkez", "Güneşli", "Bahçelievler"),
ilce = c("Çankaya", "Bağcılar", "Üsküdar"),
sehir = c("Ankara", "İstanbul", "İstanbul"),
posta_kodu = c("06000", "34100", "34662")
)
veri %>%
unite(adres, sokak, mahalle, ilce, sehir, posta_kodu, sep = ", ")
adresler <- tibble(
sokak = c("Örnek Sokak", "Şehitler Caddesi", "Atatürk Bulvarı"),
mahalle = c("Merkez", "Güneşli", "Bahçelievler"),
ilce = c("Çankaya", "Bağcılar", "Üsküdar"),
sehir = c("Ankara", "İstanbul", "İstanbul"),
posta_kodu = c("06000", "34100", "34662")
)
veri_unite <- adresler %>%
unite(adres, sokak, mahalle, ilce, sehir, posta_kodu, sep = ", ")
adresler <- tibble(
sokak = c("Örnek Sokak", "Şehitler Caddesi", "Atatürk Bulvarı"),
mahalle = c("Merkez", "Güneşli", "Bahçelievler"),
ilce = c("Çankaya", "Bağcılar", "Üsküdar"),
sehir = c("Ankara", "İstanbul", "İstanbul"),
posta_kodu = c("06000", "34100", "34662")
)
adresler
adresler_unite <- adresler %>%
unite(adres, sokak, mahalle, ilce, sehir, posta_kodu, sep = ", ")
adresler_unite
separate(adresler_unite, adres, into = c("sokak", "mahalle","ilce","sehir","posta_kodu"), sep = ",")
rm(list=ls())
rep(c(1,2,3), each = 4)
rep(1:5,3)
# Bir sayısal vektör oluşturalım
vektor <- c(5, 2, 8, 1, 4)
# sort() fonksiyonunu kullanalım
sort(vektor)
# büyükten küçüğe yani azalan sıralama yapar.
sort(vektor,decreasing = TRUE)
# Bir karakter vektörü oluşturalım
karakter_vektor <- c("elma", "armut", "muz", "çilek")
# karakter tipinideki vektörler alfabetik sıraya göre sıralanır
sort(karakter_vektor)
sort(vektor,decreasing = TRUE)
sort(karakter_vektor,decreasing = TRUE)
# Bir vektör oluşturalım
vektor <- c(1, 2, NA, 4, NA, 6)
# vektördeki elamanların NA olup olmadığını test eder.
is.na(vektor)
# NA olmayan değerleri filtreleyelim
vektor[!is.na(vektor)]
# 30'dan büyük olan elemanların indekslerini bulalım
which(vektor > 30)
# Bir vektör oluşturalım
vektor <- c(10, 20, 30, 40, 50)
# 30'dan büyük olan elemanların indekslerini bulalım
which(vektor > 30)
vektor[which(vektor > 30)]
veri <- 1:10
summary(veri) # Özet istatistikler
ceyrekler <- quantile(veriler) # Çeyreklikler
quantile(veri) # Çeyreklikler
quantile(veri, probs = c(0,0.50,0.75)) # Çeyreklikler
quantile(veri, probs = c(0,0.01,0.99)) # Çeyreklikler
library(dplyr)
library(nycflights13)
### anti_join()
`anti_join()` ise tam tersini yapar: sol tablodaki satırlardan, sağda **eşleşmeyenleri** getirir. Bu, veri temizliği için çok kullanışlıdır.
`anti_join()` ise tam tersini yapar: sol tabl
fl_anti <- flights %>%
anti_join(airlines, by = "carrier")
fl_anti %>%
select(carrier) %>%
distinct()
fl_anti_base <- subset(
flights,
!(carrier %in% airlines$carrier)
)
unique(fl_anti_base$carrier)
flights %>%
left_join(airports, by = c("dest" = "faa")) %>%
select(dest, name, lat, lon) %>%
head()
merge(
flights,
airports,
by.x = "dest",  # sol tablodaki değişken
by.y = "faa",   # sağ tablodaki değişken
all.x = TRUE
)[c("dest", "name", "lat", "lon")] %>% head()
# Örnek amaçlı küçük bir tablo oluşturalım
stats <- flights %>%
group_by(year, month, carrier) %>%
summarise(avg_delay = mean(dep_delay, na.rm = TRUE), .groups = "drop")
# Aynı üç değişken üzerinden birleştirme
fl_enriched <- flights %>%
left_join(stats, by = c("year", "month", "carrier"))
fl_enriched %>% select(year, month, carrier, avg_delay) %>% head()
fl_enriched_base <- merge(
flights,
stats,
by = c("year", "month", "carrier"),
all.x = TRUE
)
head(fl_enriched_base[c("year", "month", "carrier", "avg_delay")])
# flights tablosunda year, month, day
# başka tabloda ise yil, ay, gun isimli kolonlar olsun
other_tbl <- flights %>%
select(year, month, day, carrier, dep_delay) %>%
rename(yil = year, ay = month, gun = day)
fl_merge <- flights %>%
left_join(
other_tbl,
by = c("year" = "yil", "month" = "ay", "day" = "gun", "carrier" = "carrier")
)
fl_merge %>%
select(year, month, day, carrier, dep_delay.x, dep_delay.y) %>%
head()
fl_merge_base <- merge(
flights,
other_tbl,
by.x = c("year", "month", "day", "carrier"),
by.y = c("yil", "ay", "gun", "carrier"),
all.x = TRUE
)
head(fl_merge_base[c("year", "month", "day", "carrier", "dep_delay.x", "dep_delay.y")])
View(fl_merge_base)
colnames(fl_merge_base)
other_tbl_keys <- flights %>%
distinct(year, month, day, carrier) %>%
rename(yil = year, ay = month, gun = day)
fl_merge_ok2 <- merge(
flights, other_tbl_keys,
by.x = c("year","month","day","carrier"),
by.y = c("yil","ay","gun","carrier"),
all.x = TRUE,
sort = FALSE
)
# flights -> other_tbl_keys : sadece anahtarlar, tekilleştirilmiş
other_tbl_keys <- flights %>%
distinct(year, month, day, carrier) %>%
rename(yil = year, ay = month, gun = day)
fl_merge <- flights %>%
left_join(
other_tbl_keys,
by = c("year" = "yil", "month" = "ay", "day" = "gun", "carrier" = "carrier")
)
# Artık sağdan dep_delay gelmediği için .x/.y yok
fl_merge %>%
select(year, month, day, carrier) %>%
head()
other_tbl_keys <- flights %>%
distinct(year, month, day, carrier) %>%
rename(yil = year, ay = month, gun = day)
fl_merge_ok2 <- merge(
flights, other_tbl_keys,
by.x = c("year","month","day","carrier"),
by.y = c("yil","ay","gun","carrier"),
all.x = TRUE,
sort = FALSE
)
View(fl_merge_ok2)
fl_merge_ok2 %>%
select(year, month, day, carrier) %>%
head()
#| label: setup
#| include: false
#| message: false
#| warning: false
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
cache = TRUE
)
library(dplyr)
library(nycflights13)
library(dplyr)
library(nycflights13)
#| label: setup
#| include: false
#| message: false
#| warning: false
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
cache = TRUE
)
library(dplyr)
library(nycflights13)
library(dplyr)
library(nycflights13)
glimpse(flights)
glimpse(airlines)
glimpse(airports)
fl_joined <- flights %>%
left_join(airlines, by = "carrier")
# Satır sayısı değişti mi?
tibble(
onceki = nrow(flights),
sonraki = nrow(fl_joined)
)
