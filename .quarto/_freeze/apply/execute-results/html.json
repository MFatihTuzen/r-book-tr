{
  "hash": "e4a4419e687e25ccdeee6209ae2850d4",
  "result": {
    "markdown": "# Apply Ailesi\n\n**`Apply()`** ailesi, matrislerden, dizilerden, listelerden ve veri çerçevelerinden tekrarlayan bir şekilde veri dilimlerini işlemek için fonksiyonlarla doldurulur. Bu fonksiyonlar sayesinde döngü yapılarının kullanılmasından kaçınır. Bir girdi listesi, matris veya dizi üzerinde hareket ederler ve bir veya birkaç isteğe bağlı argümanla adlandırılmış bir fonksiyon uygularlar.\n\n-   `apply()`: bir dizinin ya da matrisin satır ya da sütunlarına fonksiyon uygular.\n\n-   `lapply()`: liste üzerindeki her elemana fonksiyon uygular.\n\n-   `sapply()`: lapply fonksiyonu ile aynıdır ancak çıktısı matris ya da veri çerçevesidir.\n\n-   `mapply()`: lapply fonksiyonunun çoklu versiyonudur.\n\n-   `tapply()`: faktör ya da grup düzeyinde fonksiyon uygular.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# apply\nx <-matrix(rnorm(30), nrow=5, ncol=6)\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n           [,1]       [,2]        [,3]       [,4]       [,5]        [,6]\n[1,]  0.6586330  0.9090478 -0.54893654 -0.5808391  0.3118115 -0.82441690\n[2,] -0.2858061  0.4795664  0.11419436  1.1081254  1.1395343  0.08386750\n[3,] -1.4525913 -0.8203327  0.07592683  1.5250748  0.3570626 -0.06445979\n[4,]  0.4031510  0.8276611  0.25713442  0.4687018 -1.5762961  0.35465321\n[5,]  0.8573945 -0.4710832  2.52683347  1.7847439  1.2482579  0.10172756\n```\n:::\n\n```{.r .cell-code}\napply(x, 2 ,sum) # sütunlar üzerinde işlem yapar\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  0.1807811  0.9248594  2.4251525  4.3058068  1.4803702 -0.3486284\n```\n:::\n\n```{.r .cell-code}\napply(x, 1 ,sum) # satırlar üzerinde işlem yapar\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] -0.07470026  2.63948182 -0.37931945  0.73500532  6.04787415\n```\n:::\n\n```{.r .cell-code}\napply(x, 2 ,sd)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.9376331 0.7850425 1.1826738 0.9471229 1.1322341 0.4479596\n```\n:::\n\n```{.r .cell-code}\napply(x, 1 ,mean)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] -0.01245004  0.43991364 -0.06321991  0.12250089  1.00797903\n```\n:::\n\n```{.r .cell-code}\nmat <- matrix(c(1:12),nrow=4)\nmat\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]    1    5    9\n[2,]    2    6   10\n[3,]    3    7   11\n[4,]    4    8   12\n```\n:::\n\n```{.r .cell-code}\napply(mat,2,function(x) x^2) # gözlemlerin karesi alınır\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]    1   25   81\n[2,]    4   36  100\n[3,]    9   49  121\n[4,]   16   64  144\n```\n:::\n\n```{.r .cell-code}\napply(mat,2, quantile,probs=c(0.25,0.5,0.75)) # extra argüman eklenebilir\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    [,1] [,2]  [,3]\n25% 1.75 5.75  9.75\n50% 2.50 6.50 10.50\n75% 3.25 7.25 11.25\n```\n:::\n\n```{.r .cell-code}\n# lapply\n\na <-matrix(1:9, 3,3)\nb <-matrix(4:15, 4,3)\nc <-matrix(8:10, 3,2)\nmylist<-list(a,b,c)\nmylist\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n     [,1] [,2] [,3]\n[1,]    1    4    7\n[2,]    2    5    8\n[3,]    3    6    9\n\n[[2]]\n     [,1] [,2] [,3]\n[1,]    4    8   12\n[2,]    5    9   13\n[3,]    6   10   14\n[4,]    7   11   15\n\n[[3]]\n     [,1] [,2]\n[1,]    8    8\n[2,]    9    9\n[3,]   10   10\n```\n:::\n\n```{.r .cell-code}\nlapply(mylist,mean)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] 5\n\n[[2]]\n[1] 9.5\n\n[[3]]\n[1] 9\n```\n:::\n\n```{.r .cell-code}\nlapply(mylist,sum)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] 45\n\n[[2]]\n[1] 114\n\n[[3]]\n[1] 54\n```\n:::\n\n```{.r .cell-code}\nlapply(mylist, function(x) x[,1]) # listedeki her matrisin ilk kolonunu çıkar\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] 1 2 3\n\n[[2]]\n[1] 4 5 6 7\n\n[[3]]\n[1]  8  9 10\n```\n:::\n\n```{.r .cell-code}\nmylist2 <- list(a = 1:4, b = rnorm(10), c = rnorm(20, 1), d = rnorm(100, 5))\nmylist2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$a\n[1] 1 2 3 4\n\n$b\n [1]  0.04719151  1.51983563 -0.01194728  0.73799032  0.99690187  0.58188399\n [7]  0.15881718  1.27890647  0.88078225  0.21833748\n\n$c\n [1]  0.41399850 -0.88316348  1.84378016 -0.90456041 -2.10930368  2.56157389\n [7]  1.28015760 -0.06211872  1.82221270  0.95183637  0.58108696 -0.51306726\n[13]  0.56449240  1.39255255  1.74038429  0.45541425  0.86129205  0.80017073\n[19]  0.75197710 -0.25816077\n\n$d\n  [1] 5.664611 5.336882 7.788124 5.458598 5.819904 5.358671 3.746254 6.126065\n  [9] 7.665578 2.932665 5.260101 5.590577 5.603254 4.900827 4.709985 5.915647\n [17] 4.657759 2.967906 5.135327 3.822061 4.390383 3.283077 4.857177 5.136062\n [25] 6.392647 4.684645 4.847332 6.078981 6.000622 2.859103 6.842029 4.430964\n [33] 5.667434 6.323664 5.266050 4.856699 4.443733 4.428919 6.047755 7.193120\n [41] 4.390825 4.902936 7.303532 5.690714 5.031174 5.956494 5.610829 6.021415\n [49] 3.508392 4.859404 4.160611 7.806387 3.776371 5.132126 3.784169 3.787567\n [57] 3.302927 5.724689 7.486322 5.694846 4.566891 5.815715 5.474952 5.606306\n [65] 4.021161 4.164476 6.887623 5.040358 5.880973 5.464434 4.993401 4.142770\n [73] 4.430439 5.749480 6.246232 4.852755 5.058487 3.543799 3.513114 3.721402\n [81] 6.181092 4.352810 3.969592 5.947537 4.090512 5.812902 4.333608 7.373525\n [89] 5.259188 6.957856 5.287967 5.657848 5.817985 4.416784 5.046034 6.103262\n [97] 4.623906 3.465513 4.328142 5.386824\n```\n:::\n\n```{.r .cell-code}\nlapply(mylist2, mean)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$a\n[1] 2.5\n\n$b\n[1] 0.6408699\n\n$c\n[1] 0.5645278\n\n$d\n[1] 5.160106\n```\n:::\n\n```{.r .cell-code}\n# sapply\n\nhead(cars)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  speed dist\n1     4    2\n2     4   10\n3     7    4\n4     7   22\n5     8   16\n6     9   10\n```\n:::\n\n```{.r .cell-code}\nlapply(cars,sum)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$speed\n[1] 770\n\n$dist\n[1] 2149\n```\n:::\n\n```{.r .cell-code}\nsapply(cars,sum)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nspeed  dist \n  770  2149 \n```\n:::\n\n```{.r .cell-code}\nsapply(cars,median)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nspeed  dist \n   15    36 \n```\n:::\n\n```{.r .cell-code}\nsapply(cars,mean)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nspeed  dist \n15.40 42.98 \n```\n:::\n\n```{.r .cell-code}\n# mapply\n\nl1 <- list(a=c(1:5),b=c(6:10))\nl2 <- list(c=c(11:15),d=c(16:20))\n\nmapply(sum,l1$a,l1$b,l2$c,l2$d) # gözlemlerin toplamı\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 34 38 42 46 50\n```\n:::\n\n```{.r .cell-code}\nmapply(prod,l1$a,l1$b,l2$c,l2$d) # gözlemlerin çarpımı\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  1056  2856  5616  9576 15000\n```\n:::\n\n```{.r .cell-code}\n# tapply\n\ndf <- data.frame(x =round(runif(15,min=1,max=10)),\n                 group=sample(c(1:3),15,replace = TRUE))\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    x group\n1   7     3\n2   4     3\n3   2     1\n4   5     1\n5   7     1\n6   4     1\n7   8     3\n8   5     3\n9   5     3\n10  7     2\n11  6     2\n12  5     1\n13  5     2\n14 10     3\n15 10     3\n```\n:::\n\n```{.r .cell-code}\ntapply(df$x,df$group, FUN = mean)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  1   2   3 \n4.6 6.0 7.0 \n```\n:::\n\n```{.r .cell-code}\ntapply(df$x,df$group, FUN = sum)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n 1  2  3 \n23 18 49 \n```\n:::\n\n```{.r .cell-code}\ntapply(df$x,df$group, FUN = length)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1 2 3 \n5 3 7 \n```\n:::\n\n```{.r .cell-code}\ntapply(df$x,df$group, FUN = range)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$`1`\n[1] 2 7\n\n$`2`\n[1] 5 7\n\n$`3`\n[1]  4 10\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}