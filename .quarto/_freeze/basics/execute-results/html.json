{
  "hash": "0c6f36c8b9cc50e34622942e03ba43ed",
  "result": {
    "engine": "knitr",
    "markdown": "# Temel Fonksiyonlar\n\n## Çalışma Dizini\n\nÇalışma Dizini, üzerinde çalıştığınız projenin tüm gerekli dosya ve belgelerini içerdiği yerdir. Çalışma dizininizi ayarlamanın iki yolu vardır. İlk yol [**getwd ve setwd**]{.underline} işlevlerini kullanmaktır. Diğer yol ise RStudio üzerinden [**Session\\>Set Working Directory**]{.underline} youluyla yapılabilir.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngetwd()\n```\n:::\n\n\n-   [**`dir`**]{.underline} veya [**`list.files`**]{.underline} komutları ile dizinde yer alan dosyalar öğrenilebilir.\n\n-   [**`dir.create`**]{.underline} komutu ile yeni bir klasör oluşturmak mümkündür.\n\n-   [**`file.exists`**]{.underline} kullanılarak klasörün var olup olmadığı sorgulanabilir.\n\n## Yardımcı Bilgiler\n\n**R** komutlarında *Büyük-küçük harf duyarlılığı (case sensitive)* vardır.\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- 5  \nprint(a)  \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5\n```\n\n\n:::\n\n```{.r .cell-code}\nA <- 6  \nprint(A) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 6\n```\n\n\n:::\n:::\n\n\n**Noktalı virgül (;)** işareti ile aynı satırda birden fazla kod çalıştırılabilir hale getirilir.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 1 ; y <- 2 ; z <- 3  \nx; y; z\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n:::\n\n\nKomutlar arası açıklamaları ve yorumları **#(hashtag)** ile yazabiliriz. Hastagli satırlar, kod olarak algılanıp çalıştırılmaz. Bu kısımlara yazılan kodlar ile ilgili hatırlatıcı bilgiler (comment) yazılabilir.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#6 ile başyalan ve  10 ile  biten tamsayıları c vektörüne atayalım  \nc <- 6:10 \nc\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  6  7  8  9 10\n```\n\n\n:::\n:::\n\n\n-   **`ls()`** çalışma alanındaki nesne ve fonksiyonları listeler.\n\n-   **`rm(a)`** çalışma alanından **a** nesnesini siler.\n\n-   **`rm(list=ls())`** bütün çalışma alanını temizler.\n\n-   **`q()`** R'dan çıkış yapmayı sağlar.\n\n-   **`install.packages(\"package\")`** paket yüklemeyi sağlar.\n\n-   **`library(\"package\")`** yüklü olan paketi getirir.\n\n-   **`installed.packages()`** yüklü olan paketleri listeler\n\n-   **`options(digits=10)`** sayılarda ondalık kısmın basamak sayısını ifade eder.\n\n-   **`help()`** fonksiyonu ya da **`?`** ile bir fonksiyon hakkında yardım alınabilir. Örneğin mean fonksiyonu ile ilgili yardım almak için scripte `?mean` ya da help(mean) yazmanız ve çalıştırmanız yeterlidir. Bunun yanı sıra R Studio penceresinin sağ alt kısmındaki help alanını kullanabilirsiniz.\n\n## Atama Operatörü\n\nBir değişkene, tabloya veya objeye değer atarken **'\\<-'** veya **'='** operatörü kullanılır. '**\\<-**' atama operatöründe ok hangi yöndeyse o tarafa atama yapılır. Genellikle '**\\<-**' operatörü kullanılmaktadır. Çünkü '**=**' operatörü filtrelemelerde veya işlemlerdeki '**==**' ile karıştırılabilmektedir. Ayrıca fonksiyonlar içinde de kullanılabildiği için kod karmaşasına sebebiyet verebilir. Her iki operatör de aynı işlevi görmektedir.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# a'ya 20 değerini atayalım  \na <- 20    \n# tabloyu ya da değeri görüntülemek için nesnenin kendisi de direkt yazılabilir.  \n# ya da print fonksiyonu kullanılabilir.   \nprint(a)    \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 20\n```\n\n\n:::\n\n```{.r .cell-code}\n# b'ye 12 değerini atayalım  \nb <- 12  \nprint(b)   \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 12\n```\n\n\n:::\n\n```{.r .cell-code}\n# a ve b değerlerinden üretilen bir c değeri üretelim.   \nc <- 2 * a + 3 * b  \nprint(c) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 76\n```\n\n\n:::\n:::\n\n\n**c()** ile vektör oluştutulabilir. c \"combine\" (birleştirmek) kelimesinin ilk harfini ifade eder. Bir değişkene birden fazla değer atamak istediğimizde kullanılır.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# d adında bir vektör oluşturalım ve değerler atayalım.   \nd <- c(4,7,13)  \nd \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  4  7 13\n```\n\n\n:::\n:::\n\n\nBir metini değişkene atamak istersek de aşağıdaki gibi metin \"\" işareti içine yazılmalıdır.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmetin <- \"Merhaba Arkadaşlar\"  \nprint(metin)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Merhaba Arkadaşlar\"\n```\n\n\n:::\n:::\n\n\n## Matematiksel Operatörler\n\nR ve R Studio, güçlü bir hesap makinesi olarak kabul edilebilir.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n3+5 \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 8\n```\n\n\n:::\n\n```{.r .cell-code}\n7*8 \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 56\n```\n\n\n:::\n\n```{.r .cell-code}\n88/2 \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 44\n```\n\n\n:::\n\n```{.r .cell-code}\n3*(12+(15/3-2)) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 45\n```\n\n\n:::\n\n```{.r .cell-code}\n9^2 # karesini alır \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 81\n```\n\n\n:::\n\n```{.r .cell-code}\na <-  3 \nb <-  a^2 \nprint(b) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 9\n```\n\n\n:::\n\n```{.r .cell-code}\nlog(15) #ln15 yani doğal logaritma \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2.70805\n```\n\n\n:::\n\n```{.r .cell-code}\nlog10(1000) # 10 tabanına göre hesaplama \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n\n```{.r .cell-code}\nexp(12) #exponential power of the number. e (2.718) üzeri 12 \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 162754.8\n```\n\n\n:::\n\n```{.r .cell-code}\nfactorial(6) # faktöriyel hesaplama yapar \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 720\n```\n\n\n:::\n\n```{.r .cell-code}\nsqrt(81) # karekök alma \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 9\n```\n\n\n:::\n\n```{.r .cell-code}\nabs(-3) # mutlak değer \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n\n```{.r .cell-code}\nsign(-5) # işaret bulma \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -1\n```\n\n\n:::\n\n```{.r .cell-code}\nsin(45) # sinüs \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.8509035\n```\n\n\n:::\n\n```{.r .cell-code}\ncos(90) # cosinüs \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -0.4480736\n```\n\n\n:::\n\n```{.r .cell-code}\npi # pi sayısı \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3.141593\n```\n\n\n:::\n\n```{.r .cell-code}\ntan(pi) # tanjant\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -1.224647e-16\n```\n\n\n:::\n:::\n\n\n## Mantıksal Operatörler\n\nMantıksal sorgulamalar, koşullarda ve filtrelerde kullanılmaktadır. Verilen koşul veya filtre sağlandığında **TRUE**, sağlanmadığında ise **FALSE** değerleri elde edilmektedir. Bu mantıksal operatörler ayrıca komutlar içindeki özellikleri aktifleştirmek ve pasifleştirmek için de kullanılmaktadır.\n\nMantıksal operatörler aşağıdaki şekilde kullanılmaktadır:\n\n-   eşittir : **==**\n\n-   eşit değildir : **!=**\n\n-   küçüktür : **\\<**\n\n-   küçük eşittir : **\\<=**\n\n-   büyüktür : **\\>**\n\n-   büyük eşittir : **\\>=**\n\n-   x değil : **!x**\n\n-   x ve y : **x&y**\n\n-   x veya y: **x\\|y**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n3 > 5\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\n# & (ve) operatörü\n# iki durumda TRUE ise sonuç TRUE döner.\n3 < 5 & 8 > 7\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\n# bir durum FALSE diğer durum TRUE ise sonuç FALSE döner.\n3 < 5 & 6 > 7\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\n# iki durumda FALSE ise sonuç FALSE döner.\n6 < 5 & 6 > 7\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\n# | (veya) operatörü\n# Her iki durumdan birisi TRUE ise TRUE döner\n(5==4) | (3!=4)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}