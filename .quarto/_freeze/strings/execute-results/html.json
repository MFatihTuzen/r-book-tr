{
  "hash": "6beafacced9d15a81bc8ba00eb4cea76",
  "result": {
    "engine": "knitr",
    "markdown": "# Metin İşlemleri\n\nR'de bir çift tek tırnak veya çift tırnak içine yazılan herhangi bir değer, bir karakter olarak kabul edilir. Karakter yapısına sahip olan verilerin analizi özellikle metin madenciliği konusunda kullanışlıdır. Karakter nesneleri üzerinde çalışmak için kullanılabilecek birçok fonksiyon vardır.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# as.character\nas.character(3.14)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"3.14\"\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(as.character(3.14))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# paste and paste0 karakter verilerini birleştirir\n\nfirst <- \"Fatih\"\nlast <- \"Tüzen\"\npaste(first,last) # default olarak arada boşluk bırakır\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Fatih Tüzen\"\n```\n\n\n:::\n\n```{.r .cell-code}\npaste0(first,last) # default olarak arada boşluk yoktur\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"FatihTüzen\"\n```\n\n\n:::\n\n```{.r .cell-code}\npaste(\"R\",\"Python\",\"SPSS\",sep = \"-\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"R-Python-SPSS\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# grep fonksiyonu metin vektörünün içinde belirli bir deseni arar\n\nx <- c(\"R programı\",\"program\",\"istatistik\",\"programlama dili\",\"bilgisayar\",\"matematik\")\ngrep(\"program\",x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 4\n```\n\n\n:::\n\n```{.r .cell-code}\ngrep(\"^ist\",x) # ist ile başlayan ifdelerin olduğu yerler\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n\n```{.r .cell-code}\ngrep(\"tik$\",x) # tik ile biten ifdelerin olduğu yerler\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3 6\n```\n\n\n:::\n\n```{.r .cell-code}\n# grepl TRUE-FALSE olarak sonuç döndürür\ngrepl(\"tik$\",x) # tik ile biten ifdelerin olduğu yerler\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE FALSE  TRUE FALSE FALSE  TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\nx[grep(\"tik$\",x)] # tik ile biten ifdelerin olduğu yerler\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"istatistik\" \"matematik\" \n```\n\n\n:::\n\n```{.r .cell-code}\nx[grepl(\"tik$\",x)] # tik ile biten ifdelerin olduğu yerler\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"istatistik\" \"matematik\" \n```\n\n\n:::\n\n```{.r .cell-code}\n# nchar karakter uzunluğunu verir\nnchar(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 10  7 10 16 10  9\n```\n\n\n:::\n\n```{.r .cell-code}\nnchar(\"R Programlama\") # boşluklar da sayılır!\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 13\n```\n\n\n:::\n\n```{.r .cell-code}\n# tolower ve toupper \ntoupper(\"program\") # karakteri büyük harf yapar\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"PROGRAM\"\n```\n\n\n:::\n\n```{.r .cell-code}\ntolower(c(\"SPSS\",\"R\",\"PYTHON\")) # karakteri küçük harf yapar\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"spss\"   \"r\"      \"python\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# substr ve substring ile karakter parçalama yapılır\nsubstr(\"123456789\",start = 3, stop = 6)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"3456\"\n```\n\n\n:::\n\n```{.r .cell-code}\nsubstring(\"123456789\", first =3, last = 6)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"3456\"\n```\n\n\n:::\n\n```{.r .cell-code}\nx <- \"R Programlama\"\nsubstr(x,nchar(x)-3,nchar(x)) # son 4 karakteri getir\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"lama\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# strsplit karakteri bölme işini yapar\nstrsplit(\"Ankara;İstanbul;İzmir\",split = \";\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] \"Ankara\"   \"İstanbul\" \"İzmir\"   \n```\n\n\n:::\n:::\n",
    "supporting": [
      "strings_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}