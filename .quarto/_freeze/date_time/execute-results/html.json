{
  "hash": "40271bd8b71adf3823d38639c07a3140",
  "result": {
    "markdown": "# Tarih ve Zaman İşlemleri\n\nTarihler, Date sınıfı tarafından temsil edilir ve **`as.Date()`** işlevi kullanılarak bir karakter dizesinden oluşturulabilir. Bu, R'de bir Date nesnesi elde etmenin yaygın bir yoludur. Date sınıfı varsayılan olarak tarihleri 1 Ocak 1970'den bu yana geçen günlerin sayısı olarak temsil eder. **`as.Date()`** işlevinin kullanılması bir karakter dizesinden Date nesneleri oluşturmamıza olanak tanır. Varsayılan biçim \"YYYY/m/d\" veya \"YYYY-m-d\" şeklindedir.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSys.Date()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2023-12-22\"\n```\n:::\n\n```{.r .cell-code}\nclass(Sys.Date())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Date\"\n```\n:::\n\n```{.r .cell-code}\nmyDate <- as.Date(\"2022-01-04\")\n\nclass(myDate)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Date\"\n```\n:::\n\n```{.r .cell-code}\n# format argümanı ile tarih formatı tanımlanabilir\nas.Date(\"12/31/2021\", format = \"%m/%d/%Y\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2021-12-31\"\n```\n:::\n\n```{.r .cell-code}\n# year\nformat(myDate, \"%Y\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2022\"\n```\n:::\n\n```{.r .cell-code}\nas.numeric(format(myDate, \"%Y\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2022\n```\n:::\n\n```{.r .cell-code}\n# weekday\nweekdays(myDate)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Salı\"\n```\n:::\n\n```{.r .cell-code}\n# month\nmonths(myDate)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Ocak\"\n```\n:::\n\n```{.r .cell-code}\n# quarters\nquarters(myDate)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Q1\"\n```\n:::\n\n```{.r .cell-code}\n# create date sequence \ndate_week <- seq(from = as.Date(\"2021-10-1\"), \n    to = as.Date(\"2021/12/31\"), \n    by = \"1 week\")\n\ndate_week\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"2021-10-01\" \"2021-10-08\" \"2021-10-15\" \"2021-10-22\" \"2021-10-29\"\n [6] \"2021-11-05\" \"2021-11-12\" \"2021-11-19\" \"2021-11-26\" \"2021-12-03\"\n[11] \"2021-12-10\" \"2021-12-17\" \"2021-12-24\" \"2021-12-31\"\n```\n:::\n\n```{.r .cell-code}\ndate_day <- seq(from = as.Date(\"2021-12-15\"), \n    to = as.Date(\"2021/12/31\"), \n    by = \"day\")\n\ndate_day\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"2021-12-15\" \"2021-12-16\" \"2021-12-17\" \"2021-12-18\" \"2021-12-19\"\n [6] \"2021-12-20\" \"2021-12-21\" \"2021-12-22\" \"2021-12-23\" \"2021-12-24\"\n[11] \"2021-12-25\" \"2021-12-26\" \"2021-12-27\" \"2021-12-28\" \"2021-12-29\"\n[16] \"2021-12-30\" \"2021-12-31\"\n```\n:::\n\n```{.r .cell-code}\ndate_month <- seq(from = as.Date(\"2021-1-15\"), \n    to = as.Date(\"2021/12/31\"), \n    by = \"month\")\n\ndate_month\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"2021-01-15\" \"2021-02-15\" \"2021-03-15\" \"2021-04-15\" \"2021-05-15\"\n [6] \"2021-06-15\" \"2021-07-15\" \"2021-08-15\" \"2021-09-15\" \"2021-10-15\"\n[11] \"2021-11-15\" \"2021-12-15\"\n```\n:::\n:::\n\n\nTemel R **POSIXt** sınıfları, saat dilimlerini kontrol ederek tarih ve saatlere izin verir. R'de kullanılabilen iki POSIXt alt sınıfı vardır: **POSIXct ve POSIXlt.** POSIXct sınıfı, GMT (UTC -- evrensel saat, koordineli) 1970-01-01 gece yarısından bu yana işaretli saniye sayısı olarak tarih-saat değerlerini temsil eder. POSIXlt sınıfı, tarih-saat değerlerini, saniye (sn), dakika (dk), saat (saat), ayın günü (mday), ay (mon), yıl (yıl), gün için öğeleri içeren adlandırılmış bir liste olarak temsil eder.\n\nTarih-saatleri temsil eden en yaygın format kodları seti, `strptime()` işlevinin yardım dosyasında listelenmiştir (konsolunuza `help(strptime)` yazın).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSys.time()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2023-12-22 14:08:05 +03\"\n```\n:::\n\n```{.r .cell-code}\nclass(Sys.time())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"POSIXct\" \"POSIXt\" \n```\n:::\n\n```{.r .cell-code}\nmyDateTime <- \"2021-12-11 22:10:35\"\nmyDateTime\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2021-12-11 22:10:35\"\n```\n:::\n\n```{.r .cell-code}\nclass(myDateTime)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n\n```{.r .cell-code}\nas.POSIXct(myDateTime)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2021-12-11 22:10:35 +03\"\n```\n:::\n\n```{.r .cell-code}\nclass(as.POSIXct(myDateTime))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"POSIXct\" \"POSIXt\" \n```\n:::\n\n```{.r .cell-code}\nSys.timezone()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Europe/Istanbul\"\n```\n:::\n\n```{.r .cell-code}\nas.POSIXct(\"30-12-2021 23:25\", format = \"%d-%m-%Y %H:%M\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2021-12-30 23:25:00 +03\"\n```\n:::\n\n```{.r .cell-code}\nmyDateTime.POSIXlt <- as.POSIXlt(myDateTime)\n\n# seconds\nmyDateTime.POSIXlt$sec\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 35\n```\n:::\n\n```{.r .cell-code}\n# minutes\nmyDateTime.POSIXlt$min\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10\n```\n:::\n\n```{.r .cell-code}\n# hours\nmyDateTime.POSIXlt$hour\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 22\n```\n:::\n\n```{.r .cell-code}\n# POSIXt nesneleri tarih formatına dönüştürülebilir.\nas.Date(myDateTime.POSIXlt)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2021-12-11\"\n```\n:::\n:::\n\n\n**lubridate** paketi, R'de tarih ve saatlerle çalışmayı kolaylaştıran çeşitli işlevler sağlar. Lubridate paketi, `ymd()`, `ymd_hms()`,`dmy()`, `dmy_hms()`,`mdy()`gibi işlevler sağlayarak tarih-zamanların ayrıştırılmasını kolay ve hızlı hale getirir.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(lubridate)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'lubridate'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:base':\n\n    date, intersect, setdiff, union\n```\n:::\n\n```{.r .cell-code}\n# convert a number into a data object\nymd(20211215) # year-month-date\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2021-12-15\"\n```\n:::\n\n```{.r .cell-code}\nymd_hm(202112121533) # year-month-date-hour-minute\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2021-12-12 15:33:00 UTC\"\n```\n:::\n\n```{.r .cell-code}\nmdy(\"Aralık 13, 2021\") # month date year\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2021-12-13\"\n```\n:::\n\n```{.r .cell-code}\nmdy(\"12 18, 2021\") # month date year\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2021-12-18\"\n```\n:::\n\n```{.r .cell-code}\ndmy(241221) # day-month-year\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2021-12-24\"\n```\n:::\n\n```{.r .cell-code}\ndmy(24122021) # day-month-year\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2021-12-24\"\n```\n:::\n\n```{.r .cell-code}\ntoday <- Sys.time()\ntoday\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2023-12-22 14:08:06 +03\"\n```\n:::\n\n```{.r .cell-code}\nyear(today) # year\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2023\n```\n:::\n\n```{.r .cell-code}\nmonth(today) # month\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 12\n```\n:::\n\n```{.r .cell-code}\nmonth(today, label = TRUE) # labeled month\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] Ara\n12 Levels: Oca < Şub < Mar < Nis < May < Haz < Tem < Ağu < Eyl < ... < Ara\n```\n:::\n\n```{.r .cell-code}\nmonth(today,label = TRUE, abbr = FALSE) # labeled month\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] Aralık\n12 Levels: Ocak < Şubat < Mart < Nisan < Mayıs < Haziran < ... < Aralık\n```\n:::\n\n```{.r .cell-code}\nweek(today) # week\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 51\n```\n:::\n\n```{.r .cell-code}\nmday(today) # day\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 22\n```\n:::\n\n```{.r .cell-code}\nwday(today) # weekday\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6\n```\n:::\n\n```{.r .cell-code}\nwday(today, label = TRUE) # labeled weekday\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] Cum\nLevels: Paz < Pzt < Sal < Çar < Per < Cum < Cmt\n```\n:::\n\n```{.r .cell-code}\nwday(today, label = TRUE, abbr = FALSE) # labeled weekday\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] Cuma\n7 Levels: Pazar < Pazartesi < Salı < Çarşamba < Perşembe < ... < Cumartesi\n```\n:::\n\n```{.r .cell-code}\nyday(today) # day of the year\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 356\n```\n:::\n\n```{.r .cell-code}\nhour(today) # hour\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 14\n```\n:::\n\n```{.r .cell-code}\nminute(today) # minute\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 8\n```\n:::\n\n```{.r .cell-code}\nsecond(today) # second\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6.123312\n```\n:::\n:::\n\n\nYukarıda listelenen çeşitli işlevlere ek olarak, **`zoo`** paketindeki **`as.yearmon()`** ve **`as.yearqtr()`** işlevleri, düzenli aralıklarla aylık ve üç aylık verilerle çalışırken uygundur.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(zoo)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'zoo'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:base':\n\n    as.Date, as.Date.numeric\n```\n:::\n\n```{.r .cell-code}\nas.yearmon(today)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Ara 2023\"\n```\n:::\n\n```{.r .cell-code}\nformat(as.yearmon(today), \"%B %Y\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Aralık 2023\"\n```\n:::\n\n```{.r .cell-code}\nformat(as.yearmon(today), \"%Y-%m\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2023-12\"\n```\n:::\n\n```{.r .cell-code}\nas.yearqtr(today)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2023 Q4\"\n```\n:::\n\n```{.r .cell-code}\n# dataframe içerisinde tarih kullanmak\ndf <-\n  data.frame(date = c(\n    \"2010-02-01\",\n    \"20110522\",\n    \"2009/04/30\",\n    \"2012 11 05\",\n    \"11-9-2015\"\n  ))\n\ndf$date2 <- as.Date(parse_date_time(df$date, c(\"ymd\", \"mdy\")))            \ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n        date      date2\n1 2010-02-01 2010-02-01\n2   20110522 2011-05-22\n3 2009/04/30 2009-04-30\n4 2012 11 05 2012-11-05\n5  11-9-2015 2015-11-09\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}