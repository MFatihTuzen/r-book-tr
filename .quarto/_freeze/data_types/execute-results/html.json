{
  "hash": "39e795c3f9288fcd8ee5340b999cae78",
  "result": {
    "markdown": "# Veri Tipleri ve Yapıları\n\nR'da kulllanılan 5 temel veri tipi vardır. Bu veri tipleri atomic vectörler olarak da bilinir. Atomic olması vektörlerin homojen olması anlamına gelmektedir. Yani vektör içerisinde aynı veri tipinden değerler yer alabilir. Veri tipleri;\n\n-   numeric veya double (reel sayılar)\n\n-   integer (tamsayılar)\n\n-   complex (karmaşık sayılar)\n\n-   character (metinsel ifadeler)\n\n-   logical, TRUE ve FALSE (mantıksal)\n\n`typeof()` veya `class()` fonksiyonları ile veri tipi öğrenilebilir.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# numeric\n\na <- 3.5\nclass(a)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"numeric\"\n```\n:::\n\n```{.r .cell-code}\ntypeof(a) # typeof numeriklerin tipini double olarak gösterir.\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"double\"\n```\n:::\n\n```{.r .cell-code}\nis.numeric(a) # verinin tipinin numerik olup olmadığı sorgulanır.\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n# integer\n\nb <- 5\nclass(b)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"numeric\"\n```\n:::\n\n```{.r .cell-code}\nis.integer(b)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\nc <- 6L # integer olması için sayının sağına L yazılır.\nclass(c)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"integer\"\n```\n:::\n\n```{.r .cell-code}\nis.integer(c)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nclass(as.integer(b)) # as. ile baslayan fonksiyonlar dönüşüm için kullanılır.\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"integer\"\n```\n:::\n\n```{.r .cell-code}\n# complex\n\nz <- 4 + 2i\nclass(z)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"complex\"\n```\n:::\n\n```{.r .cell-code}\n# character\n\nd <- \"R Programlama\"\nclass(d)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n\n```{.r .cell-code}\ne <- \"5.5\"\nclass(e)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n\n```{.r .cell-code}\nclass(as.numeric(e))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"numeric\"\n```\n:::\n\n```{.r .cell-code}\n# logical\n\nx <- TRUE ; y <- FALSE\nclass(c(x,y))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"logical\"\n```\n:::\n\n```{.r .cell-code}\nas.integer(c(x,y)) # TRUE ve FALSE numeric olarak 1 ve 0 değerine karşılık gelir.\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 0\n```\n:::\n:::\n\n\n## Vektörler\n\n-   R'daki en temel nesneler vektörlerdir.\n\n-   Vektörler homojen yapıya sahiptir yani bütün elemanları aynı veri tipinde olmalıdır.\n\n-   Vektörler tek boyutludur.\n\n-   Bir vektör oluşturmak için kullanabilecek en temel fonksiyon **`c()`**'dir.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nv <- c(1,4,7,2,5,8,3,6,9)\n\nv[1] # 1. elemanını seçer\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n\n```{.r .cell-code}\nv[3] # 3. elemanını seçer\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 7\n```\n:::\n\n```{.r .cell-code}\nv[c(3,7)] # 3. ve 7. elemani secer\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 7 3\n```\n:::\n\n```{.r .cell-code}\nv[1:6] # 1. elemandan 6. elemana kadar secer\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 4 7 2 5 8\n```\n:::\n\n```{.r .cell-code}\nv[-2] # 2. elemani haric tutarak secer\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 7 2 5 8 3 6 9\n```\n:::\n\n```{.r .cell-code}\nlength(v) # vektörün uzunluğunu gösterir\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 9\n```\n:::\n\n```{.r .cell-code}\nv2 <- c(v,12) # vektöre eleman ekleme\nv2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  1  4  7  2  5  8  3  6  9 12\n```\n:::\n\n```{.r .cell-code}\n# : ile başlangıç ve bitiş değerleri belli olan vektörler yaratılabilir.\n\nv3 <- 1:10\nv3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  1  2  3  4  5  6  7  8  9 10\n```\n:::\n\n```{.r .cell-code}\nv4 <- 11:20\nv4\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 11 12 13 14 15 16 17 18 19 20\n```\n:::\n\n```{.r .cell-code}\n# Vektörler ile matematiksel işlemler yapılabilir.\n\nv3 + v4\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 12 14 16 18 20 22 24 26 28 30\n```\n:::\n\n```{.r .cell-code}\nv3 / v4\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 0.09090909 0.16666667 0.23076923 0.28571429 0.33333333 0.37500000\n [7] 0.41176471 0.44444444 0.47368421 0.50000000\n```\n:::\n\n```{.r .cell-code}\n2 * v3 - v4\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] -9 -8 -7 -6 -5 -4 -3 -2 -1  0\n```\n:::\n\n```{.r .cell-code}\n# Vektörler ile ilgili kullanılabilecek bazı fonksiyonlar\n\n# seq () \n#aritmetik bir diziden meydana gelen bir vektör oluşturmak için kullanılır. \nseq(from = 5, to = 50, by =5) # 5 ile başlayan 50 ile biten 5şer artan vektör\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  5 10 15 20 25 30 35 40 45 50\n```\n:::\n\n```{.r .cell-code}\nseq(from = 5, to = 50, length = 7) # 5 ile başlayan 50 ile 7 elemanlı vektör\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  5.0 12.5 20.0 27.5 35.0 42.5 50.0\n```\n:::\n\n```{.r .cell-code}\nseq(5,1,-1) # 5 ile baslayıp 1'e kadar 1'er azaltarak vektor olusturma\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5 4 3 2 1\n```\n:::\n\n```{.r .cell-code}\n# rep() \n# tekrarlı sayılar içeren vektörler oluşturulur.\nrep(10,8) # 8 tane 10 değeri olan vektör\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10 10 10 10 10 10 10 10\n```\n:::\n\n```{.r .cell-code}\nrep(c(1,2,3),4) # 1,2,3 vekrünün 4 defa tekrarlanması\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 1 2 3 1 2 3 1 2 3 1 2 3\n```\n:::\n\n```{.r .cell-code}\nrep(c(1,2,3), each = 4) # each argünmanı ile sıralı ve tekrarlı vektör\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 1 1 1 1 2 2 2 2 3 3 3 3\n```\n:::\n\n```{.r .cell-code}\n# rev()\nv5 <- c(3,5,6,1,NA,12,NA,8,9) # R'da NA boş gözlemi ifade eder.\nrev(v5) # vektörü tersine çevirir\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  9  8 NA 12 NA  1  6  5  3\n```\n:::\n\n```{.r .cell-code}\n# rank()\nrank(v5) # elemanların sıra numarasını verir\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2 3 4 1 8 7 9 5 6\n```\n:::\n\n```{.r .cell-code}\nrank(v5, na.last = TRUE) # NA leri son sıraya atar.\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2 3 4 1 8 7 9 5 6\n```\n:::\n\n```{.r .cell-code}\nrank(v5, na.last = FALSE) # NA leri en başa koyar.\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4 5 6 3 1 9 2 7 8\n```\n:::\n\n```{.r .cell-code}\nrank(v5,na.last = NA) # NA değerlere yer verilmez\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2 3 4 1 7 5 6\n```\n:::\n\n```{.r .cell-code}\nrank(v5, na.last = \"keep\") # NA değerler oldukları gibi görünürler.\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  2  3  4  1 NA  7 NA  5  6\n```\n:::\n\n```{.r .cell-code}\n# all()\nall(v5>5) # vektördeki tüm elemanların şartı sağlayıp sağlamadıkları test edilir.\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\nall(v5>0) # vektörde NA varsa sonuç NA döner\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA\n```\n:::\n\n```{.r .cell-code}\nall(v5>0, na.rm = TRUE) # NA gözlemler hariç tutularak sonuç üretir.\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n# any()\nany(v5>6) # vektördeki en az bir elemanın şartı sağlayıp sağlamadığı test edilir.\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nany(v5==9) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n# unique()\nv6 <- rep(1:5,3)\nv6\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5\n```\n:::\n\n```{.r .cell-code}\nunique(v6) # tekrarlı gözlemler temizlenir\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 3 4 5\n```\n:::\n\n```{.r .cell-code}\n# duplicated()\nduplicated(v6) # tekrarlı gözlemlerin varlığını kontrol eder\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n[13]  TRUE  TRUE  TRUE\n```\n:::\n\n```{.r .cell-code}\nv6[duplicated(v6)] # tekrarlı gözlemleri listeler\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 1 2 3 4 5 1 2 3 4 5\n```\n:::\n\n```{.r .cell-code}\n# sort()\nsort(v5) # küçükten büyüğe sıralama yapar.\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  1  3  5  6  8  9 12\n```\n:::\n\n```{.r .cell-code}\nsort(v5,decreasing = TRUE) # azalan sırada sıralama yapar.\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 12  9  8  6  5  3  1\n```\n:::\n\n```{.r .cell-code}\n# diff()\ndiff(v5) # vektörde ardışık elemanlar arasındaki farkı bulur.\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  2  1 -5 NA NA NA NA  1\n```\n:::\n\n```{.r .cell-code}\ndiff(na.omit(v5)) # na.omit vektördeki NA gözlemleri temizler\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  2  1 -5 11 -4  1\n```\n:::\n\n```{.r .cell-code}\n# is.na()\nis.na(v5) # vektördeki elamanların NA olup olmadığını test eder.\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE FALSE FALSE FALSE  TRUE FALSE  TRUE FALSE FALSE\n```\n:::\n\n```{.r .cell-code}\nis.nan(v5) # NaN aynı zamanda bir NA'dir.\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n```\n:::\n\n```{.r .cell-code}\n# which\nwhich(v5==12) # 6 sayısının posizyonunu gösterir\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6\n```\n:::\n\n```{.r .cell-code}\nwhich.max(v5) # vektördeki maximum elemanın posizyonunu gösterir\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6\n```\n:::\n\n```{.r .cell-code}\nwhich.min(v5) # vektördeki minimum elemanın posizyonunu gösterir\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4\n```\n:::\n\n```{.r .cell-code}\nv5[which.min(v5)] # vektördeki minimum elemanı gösterir\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n\n```{.r .cell-code}\n# Temel İstatistiksel Fonksiyonlar\nmean(v5) # NA varsa sonuç NA döner\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA\n```\n:::\n\n```{.r .cell-code}\nmean(v5, na.rm = TRUE) # aritmetik ortalama\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6.285714\n```\n:::\n\n```{.r .cell-code}\nmedian(v5,na.rm = TRUE) # medyan (ortanca)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6\n```\n:::\n\n```{.r .cell-code}\nsum(v5,na.rm = TRUE) # vektör toplamını verir\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 44\n```\n:::\n\n```{.r .cell-code}\nmin(v5,na.rm = TRUE) # vektörün minimum değeri\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n\n```{.r .cell-code}\nmax(v5,na.rm = TRUE) # vektörün maximum değeri\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 12\n```\n:::\n\n```{.r .cell-code}\nsd(v5,na.rm = TRUE) # standart sapma\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3.728909\n```\n:::\n\n```{.r .cell-code}\nvar(v5,na.rm = TRUE) # varyans\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 13.90476\n```\n:::\n:::\n\n\n## Matrisler\n\n-   Matrisler, iki boyutlu yani satır ve sütunları olan atomik vektörlerdir.\n\n-   **`matrix()`** fonksiyonu ile tanımlanmaktadır.\n\n-   Vektörlerin birleştirlmesi ile de matrisler oluşturulabilir. [**rbind**]{.underline}satır bazlı alt alta birleştirme, [**cbind**]{.underline} ise sütun bazlı yanyana birleştirme yapar. Burada vektörlerin aynı boyutlarda olmasına dikkat edilmesi gerekir.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nv1 <- c(3,4,6,8,5)\nv2 <- c(4,8,4,7,1)\nv3 <- c(2,2,5,4,6)\nv4 <- c(4,7,5,2,5)\n\nmatris <- cbind(v1, v2, v3, v4)\nmatris\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     v1 v2 v3 v4\n[1,]  3  4  2  4\n[2,]  4  8  2  7\n[3,]  6  4  5  5\n[4,]  8  7  4  2\n[5,]  5  1  6  5\n```\n:::\n\n```{.r .cell-code}\nis.matrix(matris)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\ndim(matris)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5 4\n```\n:::\n\n```{.r .cell-code}\nmatrix(nrow = 3, ncol = 3, 1:9)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]    1    4    7\n[2,]    2    5    8\n[3,]    3    6    9\n```\n:::\n\n```{.r .cell-code}\nmatrix(1:9, nrow = 3, ncol = 3, byrow = TRUE) # byrow satırlara göre oluşturur.\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    4    5    6\n[3,]    7    8    9\n```\n:::\n\n```{.r .cell-code}\nmat <- seq(3, 21, by = 2)\nmat\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  3  5  7  9 11 13 15 17 19 21\n```\n:::\n\n```{.r .cell-code}\ndim(mat) <- c(5,2)\nmat\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2]\n[1,]    3   13\n[2,]    5   15\n[3,]    7   17\n[4,]    9   19\n[5,]   11   21\n```\n:::\n\n```{.r .cell-code}\nmatrix(c(1,2,3,11,22,33), nrow = 2, ncol = 3, byrow = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]   11   22   33\n```\n:::\n\n```{.r .cell-code}\n# normal dağılımdan 0 ortamalı, 1 standart sapmalı 16 sayı üret\nMA <- rnorm(16, 0, 1)\nMA <- matrix(MA, nrow = 4, ncol = 4)\n\n# normal dağılımdan 90 ortamalı, 10 standart sapmalı 16 sayı üret\nMB <- rnorm(16, 90, 10)\nMB <- matrix(MB, nrow = 4, ncol = 4)\n\nm <- rbind(MA, MB)\nm\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            [,1]        [,2]        [,3]       [,4]\n[1,]   0.1392553  -0.5470995   0.2988283  0.2337322\n[2,]  -0.1020793  -0.7234454  -0.8847042 -1.8129702\n[3,]   0.3286422  -0.8236020  -0.7260704 -0.3396262\n[4,]   3.0826622   1.1656549   0.4406065  0.6798731\n[5,]  81.8566601  87.3807325  84.4318820 85.3988111\n[6,] 101.2392563  90.1620956 104.4661200 81.8784201\n[7,]  96.0490770 105.0488381 104.7718600 97.5082053\n[8,]  83.4598154  98.2258097  83.6933266 94.7935417\n```\n:::\n\n```{.r .cell-code}\n# satır ve sütun isimlendirme\ncolnames(m) <- LETTERS[1:4]\nrownames(m) <- tail(LETTERS,8)\nm\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            A           B           C          D\nS   0.1392553  -0.5470995   0.2988283  0.2337322\nT  -0.1020793  -0.7234454  -0.8847042 -1.8129702\nU   0.3286422  -0.8236020  -0.7260704 -0.3396262\nV   3.0826622   1.1656549   0.4406065  0.6798731\nW  81.8566601  87.3807325  84.4318820 85.3988111\nX 101.2392563  90.1620956 104.4661200 81.8784201\nY  96.0490770 105.0488381 104.7718600 97.5082053\nZ  83.4598154  98.2258097  83.6933266 94.7935417\n```\n:::\n\n```{.r .cell-code}\n#Matris Elemanlarina Erismek\nm[1,1] # 1. satır, 1.sütundak, eleman\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.1392553\n```\n:::\n\n```{.r .cell-code}\nm[4,2] # 4. satır, 2.sütundak, eleman\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1.165655\n```\n:::\n\n```{.r .cell-code}\nm[,2] # 2. sütun elemanları\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          S           T           U           V           W           X \n -0.5470995  -0.7234454  -0.8236020   1.1656549  87.3807325  90.1620956 \n          Y           Z \n105.0488381  98.2258097 \n```\n:::\n\n```{.r .cell-code}\nm[-3,] # 3. satır hariç tüm elemanlar\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            A           B           C          D\nS   0.1392553  -0.5470995   0.2988283  0.2337322\nT  -0.1020793  -0.7234454  -0.8847042 -1.8129702\nV   3.0826622   1.1656549   0.4406065  0.6798731\nW  81.8566601  87.3807325  84.4318820 85.3988111\nX 101.2392563  90.1620956 104.4661200 81.8784201\nY  96.0490770 105.0488381 104.7718600 97.5082053\nZ  83.4598154  98.2258097  83.6933266 94.7935417\n```\n:::\n\n```{.r .cell-code}\n# köşegen matris oluşturma\ndiag(2,nrow=3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]    2    0    0\n[2,]    0    2    0\n[3,]    0    0    2\n```\n:::\n\n```{.r .cell-code}\ndiag(1,5) # 5*5 birim matris\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3] [,4] [,5]\n[1,]    1    0    0    0    0\n[2,]    0    1    0    0    0\n[3,]    0    0    1    0    0\n[4,]    0    0    0    1    0\n[5,]    0    0    0    0    1\n```\n:::\n\n```{.r .cell-code}\n# transpose\nt(m)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n           S          T          U         V        W         X         Y\nA  0.1392553 -0.1020793  0.3286422 3.0826622 81.85666 101.23926  96.04908\nB -0.5470995 -0.7234454 -0.8236020 1.1656549 87.38073  90.16210 105.04884\nC  0.2988283 -0.8847042 -0.7260704 0.4406065 84.43188 104.46612 104.77186\nD  0.2337322 -1.8129702 -0.3396262 0.6798731 85.39881  81.87842  97.50821\n         Z\nA 83.45982\nB 98.22581\nC 83.69333\nD 94.79354\n```\n:::\n\n```{.r .cell-code}\n# matris ile işlemler\n\nm1 <- matrix(1:4,nrow=2)\nm2 <- matrix(5:8,nrow=2)\n\nm1;m2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    4\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2]\n[1,]    5    7\n[2,]    6    8\n```\n:::\n\n```{.r .cell-code}\nm1 + m2 # matris elemanları birebir toplanır\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2]\n[1,]    6   10\n[2,]    8   12\n```\n:::\n\n```{.r .cell-code}\nm1 / m2 # matris elemanları birebir toplanır\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          [,1]      [,2]\n[1,] 0.2000000 0.4285714\n[2,] 0.3333333 0.5000000\n```\n:::\n\n```{.r .cell-code}\nm1 * m2 # matris elemanları birebir çarpılır\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2]\n[1,]    5   21\n[2,]   12   32\n```\n:::\n\n```{.r .cell-code}\nm1 %*% m2 # matris çarpımı\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2]\n[1,]   23   31\n[2,]   34   46\n```\n:::\n\n```{.r .cell-code}\nsolve(m2) # matrisin tersi\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2]\n[1,]   -4  3.5\n[2,]    3 -2.5\n```\n:::\n\n```{.r .cell-code}\nrowSums(m1) # satır toplamları\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4 6\n```\n:::\n\n```{.r .cell-code}\nrowMeans(m1) # satır ortalaması\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2 3\n```\n:::\n\n```{.r .cell-code}\ncolSums(m1) # sütun toplamları\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3 7\n```\n:::\n\n```{.r .cell-code}\ncolMeans(m1) # sütun ortalaması\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1.5 3.5\n```\n:::\n:::\n\n\n## Listeler\n\n-   Listeler, birbirinden farklı veri tiplerine sahip vektörler, matrisler vb farklı objeleri birarada tutabilen yapılardır.\n\n-   **`list()`** ile liste oluşturulur.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(3,5,7)\ny <- letters[1:10]\nz <- c(rep(TRUE,3),rep(FALSE,4))\n\nlist <- list(x,y,z)\nlist\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] 3 5 7\n\n[[2]]\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\"\n\n[[3]]\n[1]  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE\n```\n:::\n\n```{.r .cell-code}\nclass(list) # listenin sınıfını verir\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"list\"\n```\n:::\n\n```{.r .cell-code}\nstr(list) # listenin yapısını verir\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nList of 3\n $ : num [1:3] 3 5 7\n $ : chr [1:10] \"a\" \"b\" \"c\" \"d\" ...\n $ : logi [1:7] TRUE TRUE TRUE FALSE FALSE FALSE ...\n```\n:::\n\n```{.r .cell-code}\nnames(list) <- c(\"numeric\",\"karakter\",\"mantıksal\") # liste isimlendirme\nlist\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$numeric\n[1] 3 5 7\n\n$karakter\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\"\n\n$mantıksal\n[1]  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE\n```\n:::\n\n```{.r .cell-code}\nlist$numeric\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3 5 7\n```\n:::\n\n```{.r .cell-code}\nlist$karakter\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\"\n```\n:::\n\n```{.r .cell-code}\nlist$mantıksal\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE\n```\n:::\n\n```{.r .cell-code}\nlist[[2]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\"\n```\n:::\n\n```{.r .cell-code}\nlist$numeric2 <- c(4:10) # listeye eleman ekleme\nlist\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$numeric\n[1] 3 5 7\n\n$karakter\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\"\n\n$mantıksal\n[1]  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE\n\n$numeric2\n[1]  4  5  6  7  8  9 10\n```\n:::\n\n```{.r .cell-code}\nlist$numeric <- NULL # listeden eleman silme\nlist\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$karakter\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\"\n\n$mantıksal\n[1]  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE\n\n$numeric2\n[1]  4  5  6  7  8  9 10\n```\n:::\n\n```{.r .cell-code}\nunlist(list) # listeyi vektöre çevirir.\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n karakter1  karakter2  karakter3  karakter4  karakter5  karakter6  karakter7 \n       \"a\"        \"b\"        \"c\"        \"d\"        \"e\"        \"f\"        \"g\" \n karakter8  karakter9 karakter10 mantıksal1 mantıksal2 mantıksal3 mantıksal4 \n       \"h\"        \"i\"        \"j\"     \"TRUE\"     \"TRUE\"     \"TRUE\"    \"FALSE\" \nmantıksal5 mantıksal6 mantıksal7  numeric21  numeric22  numeric23  numeric24 \n   \"FALSE\"    \"FALSE\"    \"FALSE\"        \"4\"        \"5\"        \"6\"        \"7\" \n numeric25  numeric26  numeric27 \n       \"8\"        \"9\"       \"10\" \n```\n:::\n:::\n\n\n## dataframe\n\nVeri çerçevesi (dataframe), her sütunun bir değişkenin değerlerini ve her satırın her sütundan bir değer kümesini içerdiği bir tablo veya iki boyutlu dizi benzeri bir yapıdır. Bir veri çerçevesinin özellikleri şunlardır:\n\n-   Sütun adları boş olmamalıdır.\n\n-   Satır adları benzersiz olmalıdır.\n\n-   Bir veri çerçevesinde saklanan veriler sayısal, faktör veya karakter tipinde olabilir.\n\n-   Her sütun aynı sayıda veri öğesi içermelidir.\n\n**`data.frame()`** fonksiyonunu uygulayarak bir veri çerçevesi oluşturabiliriz.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# data.frame oluşturma\nset.seed(12345)\n\ndata <- data.frame(\n  row_num = 1:20,\n  col1 = rnorm(20),\n  col2 = runif(20), # uniform dağılımdam 20 gözlem üret\n  col3 = rbinom(20,size=5,prob = 0.5), # binom dağılımdam 20 gözlem üret\n  col4 = sample(c(\"TRUE\",\"FALSE\"),20,replace = TRUE),\n  col5 = sample(c(rep(c(\"E\",\"K\"),8),rep(NA,4))),\n  stringsAsFactors = TRUE # karakter olanlar faktör olarak değerlendirilsin\n)\n\nclass(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"data.frame\"\n```\n:::\n\n```{.r .cell-code}\nhead(data) # ilk 6 gözlemi gösterir\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  row_num       col1      col2 col3  col4 col5\n1       1  0.5855288 0.7821933    3 FALSE    E\n2       2  0.7094660 0.4291988    2  TRUE    E\n3       3 -0.1093033 0.9272740    5  TRUE    E\n4       4 -0.4534972 0.7732432    3 FALSE    K\n5       5  0.6058875 0.2596812    5  TRUE    E\n6       6 -1.8179560 0.3212247    2  TRUE <NA>\n```\n:::\n\n```{.r .cell-code}\ntail(data) # son 6 gözlemi gösterir\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   row_num       col1       col2 col3  col4 col5\n15      15 -0.7505320 0.73249612    1 FALSE    K\n16      16  0.8168998 0.49924102    3 FALSE    K\n17      17 -0.8863575 0.72977197    4 FALSE    K\n18      18 -0.3315776 0.08033604    3  TRUE <NA>\n19      19  1.1207127 0.43553048    3 FALSE    K\n20      20  0.2987237 0.23658045    1 FALSE    E\n```\n:::\n\n```{.r .cell-code}\ntail(data,10) # son 10 gözlemi gösterir\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   row_num       col1       col2 col3  col4 col5\n11      11 -0.1162478 0.96447029    3  TRUE    K\n12      12  1.8173120 0.82730287    3  TRUE    E\n13      13  0.3706279 0.31502824    2 FALSE <NA>\n14      14  0.5202165 0.21302545    2  TRUE    K\n15      15 -0.7505320 0.73249612    1 FALSE    K\n16      16  0.8168998 0.49924102    3 FALSE    K\n17      17 -0.8863575 0.72977197    4 FALSE    K\n18      18 -0.3315776 0.08033604    3  TRUE <NA>\n19      19  1.1207127 0.43553048    3 FALSE    K\n20      20  0.2987237 0.23658045    1 FALSE    E\n```\n:::\n\n```{.r .cell-code}\nstr(data) # tablonun yapısını gösterir\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t20 obs. of  6 variables:\n $ row_num: int  1 2 3 4 5 6 7 8 9 10 ...\n $ col1   : num  0.586 0.709 -0.109 -0.453 0.606 ...\n $ col2   : num  0.782 0.429 0.927 0.773 0.26 ...\n $ col3   : int  3 2 5 3 5 2 4 1 3 4 ...\n $ col4   : Factor w/ 2 levels \"FALSE\",\"TRUE\": 1 2 2 1 2 2 2 1 2 2 ...\n $ col5   : Factor w/ 2 levels \"E\",\"K\": 1 1 1 2 1 NA 1 NA 2 1 ...\n```\n:::\n\n```{.r .cell-code}\nsummary(data) # tablonun özet istatistiklerini gösterir\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    row_num           col1               col2              col3         col4   \n Min.   : 1.00   Min.   :-1.81796   Min.   :0.04346   Min.   :1.00   FALSE: 9  \n 1st Qu.: 5.75   1st Qu.:-0.36206   1st Qu.:0.23069   1st Qu.:2.00   TRUE :11  \n Median :10.50   Median : 0.09471   Median :0.43236   Median :3.00             \n Mean   :10.50   Mean   : 0.07652   Mean   :0.46554   Mean   :2.85             \n 3rd Qu.:15.25   3rd Qu.: 0.61194   3rd Qu.:0.74268   3rd Qu.:3.25             \n Max.   :20.00   Max.   : 1.81731   Max.   :0.96447   Max.   :5.00             \n   col5  \n E   :8  \n K   :8  \n NA's:4  \n         \n         \n         \n```\n:::\n\n```{.r .cell-code}\n# veri çerçevesinden belirli sütun/ları seçmek için $ veya [] kullanılır.\nhead(data$col1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  0.5855288  0.7094660 -0.1093033 -0.4534972  0.6058875 -1.8179560\n```\n:::\n\n```{.r .cell-code}\nhead(data[,\"col1\"])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  0.5855288  0.7094660 -0.1093033 -0.4534972  0.6058875 -1.8179560\n```\n:::\n\n```{.r .cell-code}\n# veri çerçevesinden belirli satır/ları seçmek için [] kullanılır.\ndata[1:2,] \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  row_num      col1      col2 col3  col4 col5\n1       1 0.5855288 0.7821933    3 FALSE    E\n2       2 0.7094660 0.4291988    2  TRUE    E\n```\n:::\n\n```{.r .cell-code}\n# 3. and 5. satır ile 2. ve 4. kolon\ndata[c(3,5),c(2,4)]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n        col1 col3\n3 -0.1093033    5\n5  0.6058875    5\n```\n:::\n\n```{.r .cell-code}\n# koşula göre veriler seçilebilir\ndata$row_num > 12 # TRUE veya FALSE döner\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[13]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n```\n:::\n\n```{.r .cell-code}\ndata[data$row_num > 12,] # koşula göre tablonu değerleri döner\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   row_num       col1       col2 col3  col4 col5\n13      13  0.3706279 0.31502824    2 FALSE <NA>\n14      14  0.5202165 0.21302545    2  TRUE    K\n15      15 -0.7505320 0.73249612    1 FALSE    K\n16      16  0.8168998 0.49924102    3 FALSE    K\n17      17 -0.8863575 0.72977197    4 FALSE    K\n18      18 -0.3315776 0.08033604    3  TRUE <NA>\n19      19  1.1207127 0.43553048    3 FALSE    K\n20      20  0.2987237 0.23658045    1 FALSE    E\n```\n:::\n\n```{.r .cell-code}\n# subset ile tablo filtrelenebilir.\nsubset(data, \n       row_num >= 10 & col4 == 'TRUE',\n       select = c(row_num, col1, col2,col4))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   row_num       col1       col2 col4\n10      10 -0.9193220 0.62554280 TRUE\n11      11 -0.1162478 0.96447029 TRUE\n12      12  1.8173120 0.82730287 TRUE\n14      14  0.5202165 0.21302545 TRUE\n18      18 -0.3315776 0.08033604 TRUE\n```\n:::\n\n```{.r .cell-code}\n# names veya colnames ile sütun isimleri elde edilir.\nnames(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"row_num\" \"col1\"    \"col2\"    \"col3\"    \"col4\"    \"col5\"   \n```\n:::\n\n```{.r .cell-code}\ncolnames(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"row_num\" \"col1\"    \"col2\"    \"col3\"    \"col4\"    \"col5\"   \n```\n:::\n\n```{.r .cell-code}\n# vektör ile sütun seçimi\ncols <- c(\"col1\",\"col2\",\"col5\")\nhead(data[cols])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n        col1      col2 col5\n1  0.5855288 0.7821933    E\n2  0.7094660 0.4291988    E\n3 -0.1093033 0.9272740    E\n4 -0.4534972 0.7732432    K\n5  0.6058875 0.2596812    E\n6 -1.8179560 0.3212247 <NA>\n```\n:::\n\n```{.r .cell-code}\n# sütun silme\ndata$col1 <- NULL\nhead(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  row_num      col2 col3  col4 col5\n1       1 0.7821933    3 FALSE    E\n2       2 0.4291988    2  TRUE    E\n3       3 0.9272740    5  TRUE    E\n4       4 0.7732432    3 FALSE    K\n5       5 0.2596812    5  TRUE    E\n6       6 0.3212247    2  TRUE <NA>\n```\n:::\n\n```{.r .cell-code}\n# sütun ekleme\ndata$col1 <- rnorm(20)\nhead(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  row_num      col2 col3  col4 col5       col1\n1       1 0.7821933    3 FALSE    E  0.4768080\n2       2 0.4291988    2  TRUE    E  0.8424486\n3       3 0.9272740    5  TRUE    E -0.8903234\n4       4 0.7732432    3 FALSE    K  0.7529609\n5       5 0.2596812    5  TRUE    E  0.4452159\n6       6 0.3212247    2  TRUE <NA>  0.4211062\n```\n:::\n\n```{.r .cell-code}\n# sütunları sıralama\nhead(data[c(\"row_num\",\"col1\",\"col2\",\"col3\",\"col4\",\"col5\")])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  row_num       col1      col2 col3  col4 col5\n1       1  0.4768080 0.7821933    3 FALSE    E\n2       2  0.8424486 0.4291988    2  TRUE    E\n3       3 -0.8903234 0.9272740    5  TRUE    E\n4       4  0.7529609 0.7732432    3 FALSE    K\n5       5  0.4452159 0.2596812    5  TRUE    E\n6       6  0.4211062 0.3212247    2  TRUE <NA>\n```\n:::\n\n```{.r .cell-code}\n# sıralama\nhead(data[order(data$col3),]) # artan\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   row_num       col2 col3  col4 col5         col1\n8        8 0.04345645    1 FALSE <NA> -0.896320181\n15      15 0.73249612    1 FALSE    K  0.148543198\n20      20 0.23658045    1 FALSE    E  0.240173186\n2        2 0.42919882    2  TRUE    E  0.842448636\n6        6 0.32122467    2  TRUE <NA>  0.421106220\n13      13 0.31502824    2 FALSE <NA> -0.008925433\n```\n:::\n\n```{.r .cell-code}\nhead(data[order(-data$row_num),]) # azalan\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   row_num       col2 col3  col4 col5       col1\n20      20 0.23658045    1 FALSE    E  0.2401732\n19      19 0.43553048    3 FALSE    K  0.2583817\n18      18 0.08033604    3  TRUE <NA> -0.1712566\n17      17 0.72977197    4 FALSE    K  0.7884411\n16      16 0.49924102    3 FALSE    K -0.3798679\n15      15 0.73249612    1 FALSE    K  0.1485432\n```\n:::\n\n```{.r .cell-code}\nhead(data[order(data$col3,-data$row_num),])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   row_num       col2 col3  col4 col5         col1\n20      20 0.23658045    1 FALSE    E  0.240173186\n15      15 0.73249612    1 FALSE    K  0.148543198\n8        8 0.04345645    1 FALSE <NA> -0.896320181\n14      14 0.21302545    2  TRUE    K -0.326216850\n13      13 0.31502824    2 FALSE <NA> -0.008925433\n6        6 0.32122467    2  TRUE <NA>  0.421106220\n```\n:::\n\n```{.r .cell-code}\n# kayıp gözlemler (missing values)\ntail(is.na(data))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      row_num  col2  col3  col4  col5  col1\n[15,]   FALSE FALSE FALSE FALSE FALSE FALSE\n[16,]   FALSE FALSE FALSE FALSE FALSE FALSE\n[17,]   FALSE FALSE FALSE FALSE FALSE FALSE\n[18,]   FALSE FALSE FALSE FALSE  TRUE FALSE\n[19,]   FALSE FALSE FALSE FALSE FALSE FALSE\n[20,]   FALSE FALSE FALSE FALSE FALSE FALSE\n```\n:::\n\n```{.r .cell-code}\ntail(is.na(data$col5))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE FALSE FALSE  TRUE FALSE FALSE\n```\n:::\n\n```{.r .cell-code}\ndata[is.na(data$col5),]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   row_num       col2 col3  col4 col5         col1\n6        6 0.32122467    2  TRUE <NA>  0.421106220\n8        8 0.04345645    1 FALSE <NA> -0.896320181\n13      13 0.31502824    2 FALSE <NA> -0.008925433\n18      18 0.08033604    3  TRUE <NA> -0.171256569\n```\n:::\n\n```{.r .cell-code}\ndata[!is.na(data$col5),]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   row_num       col2 col3  col4 col5       col1\n1        1 0.78219328    3 FALSE    E  0.4768080\n2        2 0.42919882    2  TRUE    E  0.8424486\n3        3 0.92727397    5  TRUE    E -0.8903234\n4        4 0.77324322    3 FALSE    K  0.7529609\n5        5 0.25968125    5  TRUE    E  0.4452159\n7        7 0.06019516    4  TRUE    E  1.1495922\n9        9 0.05505382    3  TRUE    K  0.8696714\n10      10 0.62554280    4  TRUE    E  0.5059117\n11      11 0.96447029    3  TRUE    K  0.3317020\n12      12 0.82730287    3  TRUE    E  1.7399997\n14      14 0.21302545    2  TRUE    K -0.3262169\n15      15 0.73249612    1 FALSE    K  0.1485432\n16      16 0.49924102    3 FALSE    K -0.3798679\n17      17 0.72977197    4 FALSE    K  0.7884411\n19      19 0.43553048    3 FALSE    K  0.2583817\n20      20 0.23658045    1 FALSE    E  0.2401732\n```\n:::\n\n```{.r .cell-code}\nrowSums(is.na(data)) # satılardaki toplam kayıp gözlem sayısı\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 0 0 0 0 0 1 0 1 0 0 0 0 1 0 0 0 0 1 0 0\n```\n:::\n\n```{.r .cell-code}\ncolSums(is.na(data)) # sütunlardaki toplam kayıp gözlem sayısı\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nrow_num    col2    col3    col4    col5    col1 \n      0       0       0       0       4       0 \n```\n:::\n\n```{.r .cell-code}\nsum(is.na(data)) # tablodaki toplam kayıp gözlem sayısı\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4\n```\n:::\n\n```{.r .cell-code}\ncomplete.cases(data) # satırlarda eksik gözlemlerin durumu\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE\n[13] FALSE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE\n```\n:::\n\n```{.r .cell-code}\ndata[complete.cases(data),]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   row_num       col2 col3  col4 col5       col1\n1        1 0.78219328    3 FALSE    E  0.4768080\n2        2 0.42919882    2  TRUE    E  0.8424486\n3        3 0.92727397    5  TRUE    E -0.8903234\n4        4 0.77324322    3 FALSE    K  0.7529609\n5        5 0.25968125    5  TRUE    E  0.4452159\n7        7 0.06019516    4  TRUE    E  1.1495922\n9        9 0.05505382    3  TRUE    K  0.8696714\n10      10 0.62554280    4  TRUE    E  0.5059117\n11      11 0.96447029    3  TRUE    K  0.3317020\n12      12 0.82730287    3  TRUE    E  1.7399997\n14      14 0.21302545    2  TRUE    K -0.3262169\n15      15 0.73249612    1 FALSE    K  0.1485432\n16      16 0.49924102    3 FALSE    K -0.3798679\n17      17 0.72977197    4 FALSE    K  0.7884411\n19      19 0.43553048    3 FALSE    K  0.2583817\n20      20 0.23658045    1 FALSE    E  0.2401732\n```\n:::\n\n```{.r .cell-code}\ndata[!complete.cases(data),]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   row_num       col2 col3  col4 col5         col1\n6        6 0.32122467    2  TRUE <NA>  0.421106220\n8        8 0.04345645    1 FALSE <NA> -0.896320181\n13      13 0.31502824    2 FALSE <NA> -0.008925433\n18      18 0.08033604    3  TRUE <NA> -0.171256569\n```\n:::\n\n```{.r .cell-code}\nna.omit(data) # NA olan satırları siler.\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   row_num       col2 col3  col4 col5       col1\n1        1 0.78219328    3 FALSE    E  0.4768080\n2        2 0.42919882    2  TRUE    E  0.8424486\n3        3 0.92727397    5  TRUE    E -0.8903234\n4        4 0.77324322    3 FALSE    K  0.7529609\n5        5 0.25968125    5  TRUE    E  0.4452159\n7        7 0.06019516    4  TRUE    E  1.1495922\n9        9 0.05505382    3  TRUE    K  0.8696714\n10      10 0.62554280    4  TRUE    E  0.5059117\n11      11 0.96447029    3  TRUE    K  0.3317020\n12      12 0.82730287    3  TRUE    E  1.7399997\n14      14 0.21302545    2  TRUE    K -0.3262169\n15      15 0.73249612    1 FALSE    K  0.1485432\n16      16 0.49924102    3 FALSE    K -0.3798679\n17      17 0.72977197    4 FALSE    K  0.7884411\n19      19 0.43553048    3 FALSE    K  0.2583817\n20      20 0.23658045    1 FALSE    E  0.2401732\n```\n:::\n:::\n\n\n## tibble\n\n**`tibble`**, Hadley Wickham tarafından geliştirilen ve **`dplyr`** paketi ile sıkça kullanılan bir veri yapısıdır. **`tibble`**, **`data.frame`**'e benzerdir, ancak bazı önemli farklar vardır. **`tibble`**, daha düzenli ve okunabilir bir çıktı üretir ve bazı varsayılan davranışları **`data.frame`**'den farklıdır. Modern data.frame olarak tanımlanmaktadır.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# tibble örneği\nlibrary(tibble)\n\nogrenciler_tibble <- tribble(\n  ~Ad,     ~Yas, ~Cinsiyet,\n  \"Ali\",   20,   \"Erkek\",\n  \"Ayşe\",  22,   \"Kadın\",\n  \"Mehmet\", 21,  \"Erkek\",\n  \"Zeynep\", 23,  \"Kadın\"\n)\n\n# tibble'ı görüntüleme\nprint(ogrenciler_tibble)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 3\n  Ad       Yas Cinsiyet\n  <chr>  <dbl> <chr>   \n1 Ali       20 Erkek   \n2 Ayşe      22 Kadın   \n3 Mehmet    21 Erkek   \n4 Zeynep    23 Kadın   \n```\n:::\n:::\n\n\nYukarıdaki örnekte, \"ogrenciler_tibble\" adında bir **`tibble`** oluşturuldu. **`tibble`**, sütun adlarını ve içeriği daha okunabilir bir şekilde görüntüler ve sütunların başlık ve veri tipi (**`~Ad`**, **`~Yas`**, **`~Cinsiyet`**) gibi özelliklerini korur.\n\n::: callout-note\n## Not\n\nHem **`dataframe`** hem de **`tibble`** veri analizi ve işleme işlemlerinde kullanışlıdır. Hangi veri yapısını kullanacağınız, projenizin gereksinimlerine ve kişisel tercihinize bağlıdır. Özellikle veri analizi için **`dplyr`** gibi paketlerle çalışırken **`tibble`** tercih edilir.\n:::\n\n## Faktörler\n\n-   Faktörler, verileri kategorilere ayırmak ve düzeyler halinde depolamak için kullanılan veri nesneleridir. Hem karakter hem de tam sayıları depolayabilirler.\n\n-   \"Erkek,\"Kadın\" ve Doğru, Yanlış vb. gibi istatistiksel modelleme için veri analizinde faydalıdırlar.\n\n-   Faktörler, girdi olarak bir vektör alınarak **`factor()`** işlevi kullanılarak oluşturulur.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- c(rep(\"erkek\",5),rep(\"kadın\",7))\nprint(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"erkek\" \"erkek\" \"erkek\" \"erkek\" \"erkek\" \"kadın\" \"kadın\" \"kadın\" \"kadın\"\n[10] \"kadın\" \"kadın\" \"kadın\"\n```\n:::\n\n```{.r .cell-code}\nis.factor(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\n# veriyi faktöre çevirme\nfactor_data <- factor(data)\n\nprint(factor_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] erkek erkek erkek erkek erkek kadın kadın kadın kadın kadın kadın kadın\nLevels: erkek kadın\n```\n:::\n\n```{.r .cell-code}\nprint(is.factor(factor_data))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nas.numeric(factor_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 1 1 1 1 1 2 2 2 2 2 2 2\n```\n:::\n\n```{.r .cell-code}\n# data frame için vektörler oluşturalım\nboy <- c(132,151,162,139,166,147,122)\nkilo <- c(48,49,66,53,67,52,40)\ncinsiyet <- c(\"erkek\",\"erkek\",\"kadın\",\"kadın\",\"erkek\",\"kadın\",\"erkek\")\n\n# data frame\ndf <- data.frame(boy,kilo,cinsiyet)\nstr(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t7 obs. of  3 variables:\n $ boy     : num  132 151 162 139 166 147 122\n $ kilo    : num  48 49 66 53 67 52 40\n $ cinsiyet: chr  \"erkek\" \"erkek\" \"kadın\" \"kadın\" ...\n```\n:::\n\n```{.r .cell-code}\ndf$cinsiyet <- factor(cinsiyet)\nstr(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t7 obs. of  3 variables:\n $ boy     : num  132 151 162 139 166 147 122\n $ kilo    : num  48 49 66 53 67 52 40\n $ cinsiyet: Factor w/ 2 levels \"erkek\",\"kadın\": 1 1 2 2 1 2 1\n```\n:::\n\n```{.r .cell-code}\nprint(is.factor(df$cinsiyet))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n# cinsiyet kolononun seviyeleri\nprint(df$cinsiyet)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] erkek erkek kadın kadın erkek kadın erkek\nLevels: erkek kadın\n```\n:::\n\n```{.r .cell-code}\n# seviyelerin sırası değiştirilebilir.\n\ndf2 <- c(rep(\"düşük\",4),rep(\"orta\",5),rep(\"yüksek\",2))\n\nfactor_df2 <- factor(df2)\nprint(factor_df2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] düşük  düşük  düşük  düşük  orta   orta   orta   orta   orta   yüksek\n[11] yüksek\nLevels: düşük orta yüksek\n```\n:::\n\n```{.r .cell-code}\norder_df2 <- factor(factor_df2,levels = c(\"yüksek\",\"orta\",\"düşük\"))\nprint(order_df2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] düşük  düşük  düşük  düşük  orta   orta   orta   orta   orta   yüksek\n[11] yüksek\nLevels: yüksek orta düşük\n```\n:::\n\n```{.r .cell-code}\n# ordered=TRUE ile seviyelerin sıralı olduğu ifade edilir\norder_df2 <- factor(factor_df2,levels = c(\"yüksek\",\"orta\",\"düşük\"),ordered = TRUE)\nprint(order_df2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] düşük  düşük  düşük  düşük  orta   orta   orta   orta   orta   yüksek\n[11] yüksek\nLevels: yüksek < orta < düşük\n```\n:::\n\n```{.r .cell-code}\n# Faktör seviyesi üretme\n\n# gl() fonksiyonunu kullanarak faktör seviyeleri üretebiliriz. \n# Girdi olarak kaç seviye ve her seviyeden kaç tane sayı oalcağı belirtilir.\n\nfaktor <- gl(n=3, k=4, labels = c(\"level1\", \"level2\",\"level3\"),ordered = TRUE)\nprint(faktor)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] level1 level1 level1 level1 level2 level2 level2 level2 level3 level3\n[11] level3 level3\nLevels: level1 < level2 < level3\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}