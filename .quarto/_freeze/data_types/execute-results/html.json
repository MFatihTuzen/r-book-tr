{
  "hash": "f9210a96783d7e868b3c4c16fb4df0ea",
  "result": {
    "engine": "knitr",
    "markdown": "# Veri Tipleri ve Yapıları\n\n## Veri Tipleri\n\nR'da kulllanılan 5 farklı veri tipi vardır. Bu veri tipleri atomic vectörler olarak da bilinir. Atomic olması vektörlerin homojen olması anlamına gelmektedir. Yani vektör içerisinde aynı veri tipinden değerler yer alabilir. Veri tipleri;\n\n-   numeric veya double (reel sayılar)\n\n-   integer (tamsayılar)\n\n-   complex (karmaşık sayılar)\n\n-   character (metinsel ifadeler)\n\n-   logical, TRUE ve FALSE (mantıksal)\n\n`typeof()` veya `class()` fonksiyonları ile veri tipi öğrenilebilir.\n\n::: callout-important\n## Önemli\n\n**`typeof()`** ve **`class()`** fonksiyonları, R programlama dilinde nesnelerin özelliklerini sorgulamak için kullanılır. Farklı amaçlara hizmet ederler ve bazı durumlarda farklı sonuçlar üretebilirler.\n\n-   **`typeof()`** fonksiyonu, bir nesnenin temel veri türünü belirler. Örneğin, bir nesnenin karakter dizisi (string), sayı, liste, fonksiyon veya vektör gibi temel veri türlerinden hangisine ait olduğunu gösterir. Ancak, nesnenin özel sınıfını (class) ifade etmez. Örneğin, bir faktörün **`typeof()`** değeri \"integer\" olabilir.\n\n-   **`class()`** fonksiyonu ise bir nesnenin özel sınıfını belirtir. Eğer bir nesne özel bir sınıfa aitse (örneğin, bir veri çerçevesi veya faktör), **`class()`** fonksiyonu bu özel sınıfın adını verir. Eğer nesne birden fazla sınıfa aitse, sınıflar bir sıra halinde listelenir.\n\nBu fonksiyonlar genellikle birlikte kullanılır çünkü bir nesnenin veri tipi ve sınıfı arasında farklılıklar olabilir. Örneğin, bir veri çerçevesi **`typeof()`** ile incelendiğinde **`list`** çıkabilir, çünkü veri çerçeveleri bir liste türündedir. Ancak, **`class()`** fonksiyonu bu nesnenin özel sınıfını, yani **`data.frame`** olarak gösterecektir. Bu farklılıklar, bir nesnenin hangi özelliklere sahip olduğunu daha iyi anlamak için kullanılabilir.\n:::\n\n**numeric**\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- 3.5\nclass(a)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"numeric\"\n```\n\n\n:::\n\n```{.r .cell-code}\ntypeof(a) # typeof numeriklerin tipini double olarak gösterir.\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"double\"\n```\n\n\n:::\n\n```{.r .cell-code}\nis.numeric(a) # verinin tipinin numerik olup olmadığı sorgulanır.\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n\n\n\n\n**integer**\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nb <- 5\nclass(b)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"numeric\"\n```\n\n\n:::\n\n```{.r .cell-code}\nis.integer(b)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\nc <- 6L # integer olması için sayının sağına L yazılır.\nclass(c)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"integer\"\n```\n\n\n:::\n\n```{.r .cell-code}\nis.integer(c)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(as.integer(b)) # as. ile baslayan fonksiyonlar dönüşüm için kullanılır.\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"integer\"\n```\n\n\n:::\n:::\n\n\n\n\n\n\n**complex**\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nz <- 4 + 2i\nclass(z)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"complex\"\n```\n\n\n:::\n:::\n\n\n\n\n\n\n**character**\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd <- \"R Programlama\"\nclass(d)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n\n```{.r .cell-code}\ne <- \"5.5\"\nclass(e)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(as.numeric(e))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"numeric\"\n```\n\n\n:::\n:::\n\n\n\n\n\n\n**logical**\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- TRUE\ny <- FALSE\nclass(c(x,y))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"logical\"\n```\n\n\n:::\n\n```{.r .cell-code}\nas.integer(c(x,y)) # TRUE ve FALSE numeric olarak 1 ve 0 değerine karşılık gelir.\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 0\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## Veri Yapıları\n\n![https://app.dataquest.io/m/493/dataframes-in-r/1/introduction](images/data_structures.png){fig-align=\"center\"}\n\n### Vektörler\n\n-   R'daki en temel nesneler vektörlerdir.\n\n-   Vektörler homojen yapıya sahiptir yani bütün elemanları aynı veri tipinde olmalıdır.\n\n-   Vektörler tek boyutludur.\n\n-   Bir vektör oluşturmak için kullanabilecek en temel fonksiyon **`c()`**'dir.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nv <- c(1,4,7,2,5,8,3,6,9)\n\nv[1] # 1. elemanını seçer\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1\n```\n\n\n:::\n\n```{.r .cell-code}\nv[3] # 3. elemanını seçer\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 7\n```\n\n\n:::\n\n```{.r .cell-code}\nv[c(3,7)] # 3. ve 7. elemani secer\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 7 3\n```\n\n\n:::\n\n```{.r .cell-code}\nv[1:6] # 1. elemandan 6. elemana kadar secer\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 4 7 2 5 8\n```\n\n\n:::\n\n```{.r .cell-code}\nv[-2] # 2. elemani haric tutarak secer\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 7 2 5 8 3 6 9\n```\n\n\n:::\n\n```{.r .cell-code}\nlength(v) # vektörün uzunluğunu gösterir\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 9\n```\n\n\n:::\n\n```{.r .cell-code}\nv2 <- c(v,12) # vektöre eleman ekleme\nv2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  1  4  7  2  5  8  3  6  9 12\n```\n\n\n:::\n\n```{.r .cell-code}\n# : ile başlangıç ve bitiş değerleri belli olan vektörler yaratılabilir.\n\nv3 <- 1:10\nv3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  1  2  3  4  5  6  7  8  9 10\n```\n\n\n:::\n\n```{.r .cell-code}\nv4 <- 11:20\nv4\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 11 12 13 14 15 16 17 18 19 20\n```\n\n\n:::\n\n```{.r .cell-code}\n# Vektörler ile matematiksel işlemler yapılabilir.\n\nv3 + v4\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 12 14 16 18 20 22 24 26 28 30\n```\n\n\n:::\n\n```{.r .cell-code}\nv3 / v4\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 0.09090909 0.16666667 0.23076923 0.28571429 0.33333333 0.37500000\n [7] 0.41176471 0.44444444 0.47368421 0.50000000\n```\n\n\n:::\n\n```{.r .cell-code}\n2 * v3 - v4\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] -9 -8 -7 -6 -5 -4 -3 -2 -1  0\n```\n\n\n:::\n:::\n\n\n\n\n\n\nAşağıda vektörler ile birlikte sıklıkla kulanılan bazı fonksiyonlara yer verilmiştir.\n\n#### **seq**\n\n**`seq()`** fonksiyonu, ardışık sayı dizileri oluşturmak için kullanılır. Bu fonksiyon, başlangıç ve bitiş değerlerinin yanı sıra belirli bir artış veya azalış miktarını belirterek ardışık bir dizi oluşturmanızı sağlar.\n\n**`seq()`** fonksiyonu genellikle üç temel parametre alır:\n\n1.  **`from`**: Dizinin başlangıç değeri.\n\n2.  **`to`**: Dizinin bitiş değeri.\n\n3.  **`by`**: Opsiyonel olarak belirlenebilen artış/azalış miktarı.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseq(from = 5, to = 50, by =5) # 5 ile başlayan 50 ile biten 5şer artan vektör\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  5 10 15 20 25 30 35 40 45 50\n```\n\n\n:::\n\n```{.r .cell-code}\nseq(from = 5, to = 50, length = 7) # 5 ile başlayan 50 ile 7 elemanlı vektör\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  5.0 12.5 20.0 27.5 35.0 42.5 50.0\n```\n\n\n:::\n\n```{.r .cell-code}\nseq(5,1,-1) # 5 ile baslayıp 1'e kadar 1'er azaltarak vektor olusturma\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5 4 3 2 1\n```\n\n\n:::\n:::\n\n\n\n\n\n\n#### **rep**\n\n**`rep()`** fonksiyonu, R programlama dilinde tekrarlanan öğelerden oluşan vektörler oluşturmak için kullanılır. Bu fonksiyon, belirli bir öğenin veya öğelerin tekrarlanarak bir vektör oluşturulmasına izin verir.\n\n**`rep()`** fonksiyonunun temel parametreleri şunlardır:\n\n-   **`x`**: Tekrarlanacak öğelerin kendisi veya vektörü.\n\n-   **`times`**: Tekrar sayısını belirten bir sayı veya vektör.\n\n-   **`each`**: Her bir öğenin kaç kez tekrarlanacağını belirten bir sayı veya vektör.\n\n-   **`length.out:`** çıktının istenen uzunluğu\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 8 tane 10 değeri olan vektör\nrep(10,times = 8) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 10 10 10 10 10 10 10 10\n```\n\n\n:::\n\n```{.r .cell-code}\n# 1,2,3 vektörünün 4 defa tekrarlanması\nrep(c(1,2,3), times = 4) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 1 2 3 1 2 3 1 2 3 1 2 3\n```\n\n\n:::\n\n```{.r .cell-code}\n# each argünmanı ile sıralı ve tekrarlı vektör\nrep(c(1,2,3), each = 4)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 1 1 1 1 2 2 2 2 3 3 3 3\n```\n\n\n:::\n\n```{.r .cell-code}\n# sadece ilk 4 elemanı verir\nrep(1:4, each = 2, length.out = 4) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 1 2 2\n```\n\n\n:::\n:::\n\n\n\n\n\n\n#### **all**\n\n**`all()`** fonksiyonu, R programlama dilinde bir mantıksal vektörün tüm elemanlarının **`TRUE`** olup olmadığını kontrol etmek için kullanılır. Eğer vektörde en az bir **`FALSE`** değer varsa, **`FALSE`** sonucunu verir. Eğer vektördeki tüm elemanlar **`TRUE`** ise, **`TRUE`** döndürür. Bu fonksiyon genellikle koşullu ifadelerde ve vektörlerin doğruluğunu kontrol etmek için kullanılır.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Bir vektör oluşturalım\nsayi_vektoru <- c(10, 20, 30, 40, 50)\n\n# Tüm sayıların 0 ile 60 arasında olup olmadığını kontrol edelim\nall(sayi_vektoru > 0 & sayi_vektoru < 60)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\n# vektördeki tüm elemanların şartı sağlayıp sağlamadıkları test edelim\nall(sayi_vektoru > 30) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n\n\n\n\n\n#### **any**\n\n**`any()`** fonksiyonu, R programlama dilinde bir mantıksal vektörün içinde en az bir tane **`TRUE`** değerinin olup olmadığını kontrol etmek için kullanılır. Eğer vektörde en az bir **`TRUE`** değer varsa, **`TRUE`** sonucunu verir. Eğer vektördeki tüm elemanlar **`FALSE`** ise, **`FALSE`** döndürür. Bu fonksiyon genellikle koşullu ifadelerde ve vektörlerin içeriğini kontrol etmek için kullanılır.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# vektördeki en az bir elemanın şartı sağlayıp sağlamadığı test edelim\nany(sayi_vektoru) \n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in any(sayi_vektoru): 'double' tipinin argümanı mantıksala zorlanıyor\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\n# Vektörde en az bir elemanın 10 olup olmadığını kontrol edelim\nany(sayi_vektoru==10) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n\n\n\n\n#### **unique**\n\n**`unique()`** fonksiyonu, R programlama dilinde bir vektördeki benzersiz (tekrar etmeyen) elemanları bulmak için kullanılır. Bu fonksiyon, vektördeki tekrarlanan elemanları kaldırarak yalnızca benzersiz elemanları içeren yeni bir vektör oluşturur. Bu fonksiyon, veri temizleme veya benzersiz değerlerin bulunması gibi durumlarda sıklıkla kullanılır.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Tekrarlı gözlmeleri olan bir vektör oluşturalım\nvektor <- rep(1:5,3)\nvektor\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5\n```\n\n\n:::\n\n```{.r .cell-code}\nunique(vektor) # tekrarlı gözlemler temizlenir\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3 4 5\n```\n\n\n:::\n:::\n\n\n\n\n\n\n#### **duplicated**\n\n**`duplicated()`** fonksiyonu, bir vektördeki tekrarlanan değerleri tespit etmek için kullanılır. Bu fonksiyon, bir vektördeki her bir elemanın önceki elemanlar arasında daha önce görülüp görülmediğini kontrol eder ve tekrar eden değerleri belirler. Bu fonksiyon, veri temizleme veya tekrarlanan değerlerin tespit edilmesi gereken durumlarda kullanışlıdır.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# tekrarlı gözlemlerin varlığını kontrol eder\nduplicated(vektor) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n[13]  TRUE  TRUE  TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\n# tekrarlı gözlemleri listeler\nvektor[duplicated(vektor)]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 1 2 3 4 5 1 2 3 4 5\n```\n\n\n:::\n:::\n\n\n\n\n\n\n#### **sort**\n\n**`sort()`** fonksiyonu, vektörleri sıralamak için kullanılır. Bu fonksiyon, sayısal veya karakter vektörlerin elemanlarını artan veya azalan sıraya göre sıralar.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsort(x, decreasing = FALSE)\n```\n:::\n\n\n\n\n\n\nBurada:\n\n-   **`x`**, sıralanacak olan vektördür.\n\n-   **`decreasing`**, sıralamanın azalan sırada olup olmayacağını belirleyen bir mantıksal değerdir (varsayılan olarak **`FALSE`**).\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Bir sayısal vektör oluşturalım\nvektor <- c(5, 2, 8, 1, 4)\n\n# küçükten büyüğe yani artan sıralama yapar.\nsort(vektor)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 4 5 8\n```\n\n\n:::\n\n```{.r .cell-code}\n# büyükten küçüğe yani azalan sıralama yapar.\nsort(vektor,decreasing = TRUE) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 8 5 4 2 1\n```\n\n\n:::\n\n```{.r .cell-code}\n# Bir karakter vektörü oluşturalım\nkarakter_vektor <- c(\"elma\", \"armut\", \"muz\", \"kavun\")\n\n# karakter tipinideki vektörler alfabetik sıraya göre sıralanır\nsort(karakter_vektor)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"armut\" \"elma\"  \"kavun\" \"muz\"  \n```\n\n\n:::\n\n```{.r .cell-code}\nsort(karakter_vektor,decreasing = TRUE) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"muz\"   \"kavun\" \"elma\"  \"armut\"\n```\n\n\n:::\n:::\n\n\n\n\n\n\n#### **is.na**\n\n**`is.na()`** fonksiyonu, R programlama dilinde bir vektördeki veya veri çerçevesindeki değerlerin **`NA`** (Not Available - Mevcut Değil) olup olmadığını kontrol etmek ve verilerin içinde eksik veya mevcut olmayan değerleri tespit etmek için kullanılır.için kullanılır. Her **`NA`** değeri için ilgili konumda **`TRUE`**, değilse **`FALSE`** döndürür. Veri temizleme ve analiz aşamalarında oldukça faydalıdır.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Bir vektör oluşturalım\nvektor <- c(1, 2, NA, 4, NA, 6)\n\n# vektördeki elamanların NA olup olmadığını test eder.\nis.na(vektor)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE FALSE  TRUE FALSE  TRUE FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\n# NA olmayan değerleri filtreleyelim\nvektor[!is.na(vektor)]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 4 6\n```\n\n\n:::\n\n```{.r .cell-code}\n# NA değerlerini bir başka değerle değiştirelim, örneğin 0 ile\nvektor[is.na(vektor)] <- 0\nvektor\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 0 4 0 6\n```\n\n\n:::\n:::\n\n\n\n\n\n\n#### **which**\n\n**`which()`** fonksiyonu, belirli bir koşulu sağlayan veya belirli bir değere sahip olan elemanların konumlarını bulmak için kullanılır. Bu fonksiyon, bir vektörde veya bir koşulu karşılayan elemanların indislerini döndürür. Filtreleme veya koşullu indeksleme gibi durumlarda oldukça faydalıdır.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Bir vektör oluşturalım\nvektor <- c(10, 20, 30, 40, 50)\n\n# 30'dan büyük olan elemanların indekslerini bulalım\nwhich(vektor > 30)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4 5\n```\n\n\n:::\n\n```{.r .cell-code}\nvektor[which(vektor > 30)]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 40 50\n```\n\n\n:::\n\n```{.r .cell-code}\n# vektördeki maximum elemanın posizyonunu gösterir\nwhich.max(vektor)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5\n```\n\n\n:::\n\n```{.r .cell-code}\n# vektördeki minimum elemanın posizyonunu gösterir\nwhich.min(vektor) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1\n```\n\n\n:::\n:::\n\n\n\n\n\n\n#### **Temel İstatistiksel Bazı Fonksiyonlar**\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(veri <- 1:10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  1  2  3  4  5  6  7  8  9 10\n```\n\n\n:::\n\n```{.r .cell-code}\nmean(veri, na.rm = TRUE) # aritmetik ortalama\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5.5\n```\n\n\n:::\n\n```{.r .cell-code}\nmedian(veri) # medyan (ortanca)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5.5\n```\n\n\n:::\n\n```{.r .cell-code}\nsum(veri,na.rm = TRUE) # vektör toplamını verir\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 55\n```\n\n\n:::\n\n```{.r .cell-code}\nmin(veri,na.rm = TRUE) # vektörün minimum değeri\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1\n```\n\n\n:::\n\n```{.r .cell-code}\nmax(veri,na.rm = TRUE) # vektörün maximum değeri\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 10\n```\n\n\n:::\n\n```{.r .cell-code}\nsd(veri,na.rm = TRUE) # standart sapma\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3.02765\n```\n\n\n:::\n\n```{.r .cell-code}\nvar(veri) # varyans\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 9.166667\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(veri) # Özet istatistikler\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   1.00    3.25    5.50    5.50    7.75   10.00 \n```\n\n\n:::\n\n```{.r .cell-code}\nquantile(veri) # Çeyreklikler\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   0%   25%   50%   75%  100% \n 1.00  3.25  5.50  7.75 10.00 \n```\n\n\n:::\n:::\n\n\n\n\n\n\n### Matrisler\n\n-   Matrisler, iki boyutlu yani satır ve sütunları olan atomik vektörlerdir.\n\n-   **`matrix()`** fonksiyonu ile tanımlanmaktadır.\n\n-   Vektörlerin birleştirilmesi ile de matrisler oluşturulabilir. [**rbind**]{.underline} satır bazlı alt alta birleştirme, [**cbind**]{.underline} ise sütun bazlı yanyana birleştirme yapar. Burada vektörlerin aynı boyutlarda olmasına dikkat edilmesi gerekir.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nv1 <- c(3,4,6,8,5)\nv2 <- c(4,8,4,7,1)\nv3 <- c(2,2,5,4,6)\nv4 <- c(4,7,5,2,5)\n\nmatris <- cbind(v1, v2, v3, v4)\nmatris\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     v1 v2 v3 v4\n[1,]  3  4  2  4\n[2,]  4  8  2  7\n[3,]  6  4  5  5\n[4,]  8  7  4  2\n[5,]  5  1  6  5\n```\n\n\n:::\n\n```{.r .cell-code}\nis.matrix(matris)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\ndim(matris) # matrisin boyutları\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5 4\n```\n\n\n:::\n\n```{.r .cell-code}\nmatrix(nrow = 3, ncol = 3, 1:9)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2] [,3]\n[1,]    1    4    7\n[2,]    2    5    8\n[3,]    3    6    9\n```\n\n\n:::\n\n```{.r .cell-code}\nmatrix(1:9, nrow = 3, ncol = 3, byrow = TRUE) # byrow satırlara göre oluşturur.\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    4    5    6\n[3,]    7    8    9\n```\n\n\n:::\n\n```{.r .cell-code}\nmat <- seq(3, 21, by = 2)\nmat\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  3  5  7  9 11 13 15 17 19 21\n```\n\n\n:::\n\n```{.r .cell-code}\ndim(mat) <- c(5,2)\nmat\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2]\n[1,]    3   13\n[2,]    5   15\n[3,]    7   17\n[4,]    9   19\n[5,]   11   21\n```\n\n\n:::\n\n```{.r .cell-code}\nmatrix(c(1,2,3,11,22,33), nrow = 2, ncol = 3, byrow = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]   11   22   33\n```\n\n\n:::\n\n```{.r .cell-code}\n# normal dağılımdan 0 ortalamalı, 1 standart sapmalı 16 sayı üret\nMA <- rnorm(16, 0, 1)\nMA <- matrix(MA, nrow = 4, ncol = 4)\n\n# normal dağılımdan 90 ortalamalı, 10 standart sapmalı 16 sayı üret\nMB <- rnorm(16, 90, 10)\nMB <- matrix(MB, nrow = 4, ncol = 4)\n\nm <- rbind(MA, MB)\nm\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n            [,1]       [,2]        [,3]         [,4]\n[1,]  -0.3748002  1.4950461  -0.7424919  -0.03325295\n[2,]   1.4452777  0.1407826  -1.1831743  -0.46561579\n[3,]   0.4687181 -0.1273480  -1.1122357  -0.18963729\n[4,]   0.9903942 -0.7573652  -0.8839939   0.33583136\n[5,] 109.6742928 81.6316099 104.6287919 100.20530917\n[6,]  79.2888193 88.2151467  80.2276266  96.61229873\n[7,]  91.2523785 95.3955813 118.7780379  93.75090478\n[8,]  80.9030694 79.2153554  80.7444857  90.49822854\n```\n\n\n:::\n\n```{.r .cell-code}\n# satır ve sütun isimlendirme\ncolnames(m) <- LETTERS[1:4]\nrownames(m) <- tail(LETTERS,8)\nm\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n            A          B           C            D\nS  -0.3748002  1.4950461  -0.7424919  -0.03325295\nT   1.4452777  0.1407826  -1.1831743  -0.46561579\nU   0.4687181 -0.1273480  -1.1122357  -0.18963729\nV   0.9903942 -0.7573652  -0.8839939   0.33583136\nW 109.6742928 81.6316099 104.6287919 100.20530917\nX  79.2888193 88.2151467  80.2276266  96.61229873\nY  91.2523785 95.3955813 118.7780379  93.75090478\nZ  80.9030694 79.2153554  80.7444857  90.49822854\n```\n\n\n:::\n\n```{.r .cell-code}\n# Matris Elemanlarina Erismek\nm[1,1] # 1. satır, 1.sütundak, eleman\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -0.3748002\n```\n\n\n:::\n\n```{.r .cell-code}\nm[4,2] # 4. satır, 2.sütundak, eleman\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -0.7573652\n```\n\n\n:::\n\n```{.r .cell-code}\nm[,2] # 2. sütun elemanları\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n         S          T          U          V          W          X          Y \n 1.4950461  0.1407826 -0.1273480 -0.7573652 81.6316099 88.2151467 95.3955813 \n         Z \n79.2153554 \n```\n\n\n:::\n\n```{.r .cell-code}\nm[-3,] # 3. satır hariç tüm elemanlar\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n            A          B           C            D\nS  -0.3748002  1.4950461  -0.7424919  -0.03325295\nT   1.4452777  0.1407826  -1.1831743  -0.46561579\nV   0.9903942 -0.7573652  -0.8839939   0.33583136\nW 109.6742928 81.6316099 104.6287919 100.20530917\nX  79.2888193 88.2151467  80.2276266  96.61229873\nY  91.2523785 95.3955813 118.7780379  93.75090478\nZ  80.9030694 79.2153554  80.7444857  90.49822854\n```\n\n\n:::\n\n```{.r .cell-code}\n# köşegen matris oluşturma\ndiag(2,nrow=3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2] [,3]\n[1,]    2    0    0\n[2,]    0    2    0\n[3,]    0    0    2\n```\n\n\n:::\n\n```{.r .cell-code}\ndiag(1,5) # 5*5 birim matris\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2] [,3] [,4] [,5]\n[1,]    1    0    0    0    0\n[2,]    0    1    0    0    0\n[3,]    0    0    1    0    0\n[4,]    0    0    0    1    0\n[5,]    0    0    0    0    1\n```\n\n\n:::\n\n```{.r .cell-code}\n# transpose\nt(m)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n            S          T          U          V         W        X         Y\nA -0.37480019  1.4452777  0.4687181  0.9903942 109.67429 79.28882  91.25238\nB  1.49504612  0.1407826 -0.1273480 -0.7573652  81.63161 88.21515  95.39558\nC -0.74249191 -1.1831743 -1.1122357 -0.8839939 104.62879 80.22763 118.77804\nD -0.03325295 -0.4656158 -0.1896373  0.3358314 100.20531 96.61230  93.75090\n         Z\nA 80.90307\nB 79.21536\nC 80.74449\nD 90.49823\n```\n\n\n:::\n\n```{.r .cell-code}\n# matris ile işlemler\n\nm1 <- matrix(1:4,nrow=2)\nm2 <- matrix(5:8,nrow=2)\n\nm1;m2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    4\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2]\n[1,]    5    7\n[2,]    6    8\n```\n\n\n:::\n\n```{.r .cell-code}\nm1 + m2 # matris elemanları birebir toplanır\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2]\n[1,]    6   10\n[2,]    8   12\n```\n\n\n:::\n\n```{.r .cell-code}\nm1 / m2 # matris elemanları birebir toplanır\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          [,1]      [,2]\n[1,] 0.2000000 0.4285714\n[2,] 0.3333333 0.5000000\n```\n\n\n:::\n\n```{.r .cell-code}\nm1 * m2 # matris elemanları birebir çarpılır\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2]\n[1,]    5   21\n[2,]   12   32\n```\n\n\n:::\n\n```{.r .cell-code}\nm1 %*% m2 # matris çarpımı\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2]\n[1,]   23   31\n[2,]   34   46\n```\n\n\n:::\n\n```{.r .cell-code}\nsolve(m2) # matrisin tersi\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2]\n[1,]   -4  3.5\n[2,]    3 -2.5\n```\n\n\n:::\n\n```{.r .cell-code}\nrowSums(m1) # satır toplamları\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4 6\n```\n\n\n:::\n\n```{.r .cell-code}\nrowMeans(m1) # satır ortalaması\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2 3\n```\n\n\n:::\n\n```{.r .cell-code}\ncolSums(m1) # sütun toplamları\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3 7\n```\n\n\n:::\n\n```{.r .cell-code}\ncolMeans(m1) # sütun ortalaması\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1.5 3.5\n```\n\n\n:::\n:::\n\n\n\n\n\n\n### Listeler\n\n-   Listeler, birbirinden farklı veri tiplerine sahip vektörler, matrisler vb farklı objeleri birarada tutabilen yapılardır.\n\n-   **`list()`** ile liste oluşturulur.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(3,5,7)\ny <- letters[1:10]\nz <- c(rep(TRUE,3),rep(FALSE,4))\n\nlist <- list(x,y,z)\nlist\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] 3 5 7\n\n[[2]]\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\"\n\n[[3]]\n[1]  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(list) # listenin sınıfını verir\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"list\"\n```\n\n\n:::\n\n```{.r .cell-code}\nstr(list) # listenin yapısını verir\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nList of 3\n $ : num [1:3] 3 5 7\n $ : chr [1:10] \"a\" \"b\" \"c\" \"d\" ...\n $ : logi [1:7] TRUE TRUE TRUE FALSE FALSE FALSE ...\n```\n\n\n:::\n\n```{.r .cell-code}\nnames(list) <- c(\"numeric\",\"karakter\",\"mantıksal\") # liste isimlendirme\nlist\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$numeric\n[1] 3 5 7\n\n$karakter\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\"\n\n$mantıksal\n[1]  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\nlist$numeric\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3 5 7\n```\n\n\n:::\n\n```{.r .cell-code}\nlist$karakter\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\"\n```\n\n\n:::\n\n```{.r .cell-code}\nlist$mantıksal\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\nlist[[2]]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\"\n```\n\n\n:::\n\n```{.r .cell-code}\nlist$numeric2 <- c(4:10) # listeye eleman ekleme\nlist\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$numeric\n[1] 3 5 7\n\n$karakter\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\"\n\n$mantıksal\n[1]  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE\n\n$numeric2\n[1]  4  5  6  7  8  9 10\n```\n\n\n:::\n\n```{.r .cell-code}\nlist$numeric <- NULL # listeden eleman silme\nlist\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$karakter\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\"\n\n$mantıksal\n[1]  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE\n\n$numeric2\n[1]  4  5  6  7  8  9 10\n```\n\n\n:::\n\n```{.r .cell-code}\nunlist(list) # listeyi vektöre çevirir.\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n karakter1  karakter2  karakter3  karakter4  karakter5  karakter6  karakter7 \n       \"a\"        \"b\"        \"c\"        \"d\"        \"e\"        \"f\"        \"g\" \n karakter8  karakter9 karakter10 mantıksal1 mantıksal2 mantıksal3 mantıksal4 \n       \"h\"        \"i\"        \"j\"     \"TRUE\"     \"TRUE\"     \"TRUE\"    \"FALSE\" \nmantıksal5 mantıksal6 mantıksal7  numeric21  numeric22  numeric23  numeric24 \n   \"FALSE\"    \"FALSE\"    \"FALSE\"        \"4\"        \"5\"        \"6\"        \"7\" \n numeric25  numeric26  numeric27 \n       \"8\"        \"9\"       \"10\" \n```\n\n\n:::\n:::\n\n\n\n\n\n\n### dataframe\n\nVeri çerçevesi (dataframe), her sütunun bir değişkenin değerlerini ve her satırın her sütundan bir değer kümesini içerdiği bir tablo veya iki boyutlu dizi benzeri bir yapıdır. Bir veri çerçevesinin özellikleri şunlardır:\n\n-   Sütun adları boş olmamalıdır.\n\n-   Satır adları benzersiz olmalıdır.\n\n-   Bir veri çerçevesinde saklanan veriler sayısal, faktör veya karakter tipinde olabilir.\n\n-   Her sütun aynı sayıda veri öğesi içermelidir.\n\n**`data.frame()`** fonksiyonunu uygulayarak bir veri çerçevesi oluşturabiliriz.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# data.frame oluşturma\nset.seed(12345)\n\ndata <- data.frame(\n  row_num = 1:20,\n  col1 = rnorm(20),\n  col2 = runif(20), # uniform dağılımdam 20 gözlem üret\n  col3 = rbinom(20,size=5,prob = 0.5), # binom dağılımdam 20 gözlem üret\n  col4 = sample(c(\"TRUE\",\"FALSE\"),20,replace = TRUE),\n  col5 = sample(c(rep(c(\"E\",\"K\"),8),rep(NA,4))),\n  stringsAsFactors = TRUE # karakter olanlar faktör olarak değerlendirilsin\n)\n\nclass(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"data.frame\"\n```\n\n\n:::\n\n```{.r .cell-code}\nhead(data) # ilk 6 gözlemi gösterir\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  row_num       col1      col2 col3  col4 col5\n1       1  0.5855288 0.7821933    3 FALSE    E\n2       2  0.7094660 0.4291988    2  TRUE    E\n3       3 -0.1093033 0.9272740    5  TRUE    E\n4       4 -0.4534972 0.7732432    3 FALSE    K\n5       5  0.6058875 0.2596812    5  TRUE    E\n6       6 -1.8179560 0.3212247    2  TRUE <NA>\n```\n\n\n:::\n\n```{.r .cell-code}\ntail(data) # son 6 gözlemi gösterir\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   row_num       col1       col2 col3  col4 col5\n15      15 -0.7505320 0.73249612    1 FALSE    K\n16      16  0.8168998 0.49924102    3 FALSE    K\n17      17 -0.8863575 0.72977197    4 FALSE    K\n18      18 -0.3315776 0.08033604    3  TRUE <NA>\n19      19  1.1207127 0.43553048    3 FALSE    K\n20      20  0.2987237 0.23658045    1 FALSE    E\n```\n\n\n:::\n\n```{.r .cell-code}\ntail(data,10) # son 10 gözlemi gösterir\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   row_num       col1       col2 col3  col4 col5\n11      11 -0.1162478 0.96447029    3  TRUE    K\n12      12  1.8173120 0.82730287    3  TRUE    E\n13      13  0.3706279 0.31502824    2 FALSE <NA>\n14      14  0.5202165 0.21302545    2  TRUE    K\n15      15 -0.7505320 0.73249612    1 FALSE    K\n16      16  0.8168998 0.49924102    3 FALSE    K\n17      17 -0.8863575 0.72977197    4 FALSE    K\n18      18 -0.3315776 0.08033604    3  TRUE <NA>\n19      19  1.1207127 0.43553048    3 FALSE    K\n20      20  0.2987237 0.23658045    1 FALSE    E\n```\n\n\n:::\n\n```{.r .cell-code}\nstr(data) # tablonun yapısını gösterir\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t20 obs. of  6 variables:\n $ row_num: int  1 2 3 4 5 6 7 8 9 10 ...\n $ col1   : num  0.586 0.709 -0.109 -0.453 0.606 ...\n $ col2   : num  0.782 0.429 0.927 0.773 0.26 ...\n $ col3   : int  3 2 5 3 5 2 4 1 3 4 ...\n $ col4   : Factor w/ 2 levels \"FALSE\",\"TRUE\": 1 2 2 1 2 2 2 1 2 2 ...\n $ col5   : Factor w/ 2 levels \"E\",\"K\": 1 1 1 2 1 NA 1 NA 2 1 ...\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(data) # tablonun özet istatistiklerini gösterir\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    row_num           col1               col2              col3         col4   \n Min.   : 1.00   Min.   :-1.81796   Min.   :0.04346   Min.   :1.00   FALSE: 9  \n 1st Qu.: 5.75   1st Qu.:-0.36206   1st Qu.:0.23069   1st Qu.:2.00   TRUE :11  \n Median :10.50   Median : 0.09471   Median :0.43236   Median :3.00             \n Mean   :10.50   Mean   : 0.07652   Mean   :0.46554   Mean   :2.85             \n 3rd Qu.:15.25   3rd Qu.: 0.61194   3rd Qu.:0.74268   3rd Qu.:3.25             \n Max.   :20.00   Max.   : 1.81731   Max.   :0.96447   Max.   :5.00             \n   col5  \n E   :8  \n K   :8  \n NA's:4  \n         \n         \n         \n```\n\n\n:::\n\n```{.r .cell-code}\n# veri çerçevesinden belirli sütun/ları seçmek için $ veya [] kullanılır.\nhead(data$col1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  0.5855288  0.7094660 -0.1093033 -0.4534972  0.6058875 -1.8179560\n```\n\n\n:::\n\n```{.r .cell-code}\nhead(data[,\"col1\"])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  0.5855288  0.7094660 -0.1093033 -0.4534972  0.6058875 -1.8179560\n```\n\n\n:::\n\n```{.r .cell-code}\n# veri çerçevesinden belirli satır/ları seçmek için [] kullanılır.\ndata[1:2,] \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  row_num      col1      col2 col3  col4 col5\n1       1 0.5855288 0.7821933    3 FALSE    E\n2       2 0.7094660 0.4291988    2  TRUE    E\n```\n\n\n:::\n\n```{.r .cell-code}\n# 3. and 5. satır ile 2. ve 4. kolon\ndata[c(3,5),c(2,4)]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        col1 col3\n3 -0.1093033    5\n5  0.6058875    5\n```\n\n\n:::\n\n```{.r .cell-code}\n# koşula göre veriler seçilebilir\ndata$row_num > 12 # TRUE veya FALSE döner\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[13]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\ndata[data$row_num > 12,] # koşula göre satırlar döner\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   row_num       col1       col2 col3  col4 col5\n13      13  0.3706279 0.31502824    2 FALSE <NA>\n14      14  0.5202165 0.21302545    2  TRUE    K\n15      15 -0.7505320 0.73249612    1 FALSE    K\n16      16  0.8168998 0.49924102    3 FALSE    K\n17      17 -0.8863575 0.72977197    4 FALSE    K\n18      18 -0.3315776 0.08033604    3  TRUE <NA>\n19      19  1.1207127 0.43553048    3 FALSE    K\n20      20  0.2987237 0.23658045    1 FALSE    E\n```\n\n\n:::\n\n```{.r .cell-code}\n# subset ile tablo filtrelenebilir.\nsubset(data, \n       row_num >= 10 & col4 == 'TRUE',\n       select = c(row_num, col1, col2,col4))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   row_num       col1       col2 col4\n10      10 -0.9193220 0.62554280 TRUE\n11      11 -0.1162478 0.96447029 TRUE\n12      12  1.8173120 0.82730287 TRUE\n14      14  0.5202165 0.21302545 TRUE\n18      18 -0.3315776 0.08033604 TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\n# names veya colnames ile sütun isimleri elde edilir.\nnames(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"row_num\" \"col1\"    \"col2\"    \"col3\"    \"col4\"    \"col5\"   \n```\n\n\n:::\n\n```{.r .cell-code}\ncolnames(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"row_num\" \"col1\"    \"col2\"    \"col3\"    \"col4\"    \"col5\"   \n```\n\n\n:::\n\n```{.r .cell-code}\n# vektör ile sütun seçimi\ncols <- c(\"col1\",\"col2\",\"col5\")\nhead(data[cols])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        col1      col2 col5\n1  0.5855288 0.7821933    E\n2  0.7094660 0.4291988    E\n3 -0.1093033 0.9272740    E\n4 -0.4534972 0.7732432    K\n5  0.6058875 0.2596812    E\n6 -1.8179560 0.3212247 <NA>\n```\n\n\n:::\n\n```{.r .cell-code}\n# sütun silme\ndata$col1 <- NULL\nhead(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  row_num      col2 col3  col4 col5\n1       1 0.7821933    3 FALSE    E\n2       2 0.4291988    2  TRUE    E\n3       3 0.9272740    5  TRUE    E\n4       4 0.7732432    3 FALSE    K\n5       5 0.2596812    5  TRUE    E\n6       6 0.3212247    2  TRUE <NA>\n```\n\n\n:::\n\n```{.r .cell-code}\n# sütun ekleme\ndata$col1 <- rnorm(20)\nhead(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  row_num      col2 col3  col4 col5       col1\n1       1 0.7821933    3 FALSE    E  0.4768080\n2       2 0.4291988    2  TRUE    E  0.8424486\n3       3 0.9272740    5  TRUE    E -0.8903234\n4       4 0.7732432    3 FALSE    K  0.7529609\n5       5 0.2596812    5  TRUE    E  0.4452159\n6       6 0.3212247    2  TRUE <NA>  0.4211062\n```\n\n\n:::\n\n```{.r .cell-code}\n# sütunları sıralama\nhead(data[c(\"row_num\",\"col1\",\"col2\",\"col3\",\"col4\",\"col5\")])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  row_num       col1      col2 col3  col4 col5\n1       1  0.4768080 0.7821933    3 FALSE    E\n2       2  0.8424486 0.4291988    2  TRUE    E\n3       3 -0.8903234 0.9272740    5  TRUE    E\n4       4  0.7529609 0.7732432    3 FALSE    K\n5       5  0.4452159 0.2596812    5  TRUE    E\n6       6  0.4211062 0.3212247    2  TRUE <NA>\n```\n\n\n:::\n\n```{.r .cell-code}\n# sıralama\nhead(data[order(data$col3),]) # artan\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   row_num       col2 col3  col4 col5         col1\n8        8 0.04345645    1 FALSE <NA> -0.896320181\n15      15 0.73249612    1 FALSE    K  0.148543198\n20      20 0.23658045    1 FALSE    E  0.240173186\n2        2 0.42919882    2  TRUE    E  0.842448636\n6        6 0.32122467    2  TRUE <NA>  0.421106220\n13      13 0.31502824    2 FALSE <NA> -0.008925433\n```\n\n\n:::\n\n```{.r .cell-code}\nhead(data[order(-data$row_num),]) # azalan\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   row_num       col2 col3  col4 col5       col1\n20      20 0.23658045    1 FALSE    E  0.2401732\n19      19 0.43553048    3 FALSE    K  0.2583817\n18      18 0.08033604    3  TRUE <NA> -0.1712566\n17      17 0.72977197    4 FALSE    K  0.7884411\n16      16 0.49924102    3 FALSE    K -0.3798679\n15      15 0.73249612    1 FALSE    K  0.1485432\n```\n\n\n:::\n\n```{.r .cell-code}\nhead(data[order(data$col3,-data$row_num),])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   row_num       col2 col3  col4 col5         col1\n20      20 0.23658045    1 FALSE    E  0.240173186\n15      15 0.73249612    1 FALSE    K  0.148543198\n8        8 0.04345645    1 FALSE <NA> -0.896320181\n14      14 0.21302545    2  TRUE    K -0.326216850\n13      13 0.31502824    2 FALSE <NA> -0.008925433\n6        6 0.32122467    2  TRUE <NA>  0.421106220\n```\n\n\n:::\n\n```{.r .cell-code}\n# kayıp gözlemler (missing values)\ntail(is.na(data))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      row_num  col2  col3  col4  col5  col1\n[15,]   FALSE FALSE FALSE FALSE FALSE FALSE\n[16,]   FALSE FALSE FALSE FALSE FALSE FALSE\n[17,]   FALSE FALSE FALSE FALSE FALSE FALSE\n[18,]   FALSE FALSE FALSE FALSE  TRUE FALSE\n[19,]   FALSE FALSE FALSE FALSE FALSE FALSE\n[20,]   FALSE FALSE FALSE FALSE FALSE FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\ntail(is.na(data$col5))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE FALSE FALSE  TRUE FALSE FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\ndata[is.na(data$col5),] # col5 NA olan satılar\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   row_num       col2 col3  col4 col5         col1\n6        6 0.32122467    2  TRUE <NA>  0.421106220\n8        8 0.04345645    1 FALSE <NA> -0.896320181\n13      13 0.31502824    2 FALSE <NA> -0.008925433\n18      18 0.08033604    3  TRUE <NA> -0.171256569\n```\n\n\n:::\n\n```{.r .cell-code}\ndata[!is.na(data$col5),] # col5 NA olmayan satılar\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   row_num       col2 col3  col4 col5       col1\n1        1 0.78219328    3 FALSE    E  0.4768080\n2        2 0.42919882    2  TRUE    E  0.8424486\n3        3 0.92727397    5  TRUE    E -0.8903234\n4        4 0.77324322    3 FALSE    K  0.7529609\n5        5 0.25968125    5  TRUE    E  0.4452159\n7        7 0.06019516    4  TRUE    E  1.1495922\n9        9 0.05505382    3  TRUE    K  0.8696714\n10      10 0.62554280    4  TRUE    E  0.5059117\n11      11 0.96447029    3  TRUE    K  0.3317020\n12      12 0.82730287    3  TRUE    E  1.7399997\n14      14 0.21302545    2  TRUE    K -0.3262169\n15      15 0.73249612    1 FALSE    K  0.1485432\n16      16 0.49924102    3 FALSE    K -0.3798679\n17      17 0.72977197    4 FALSE    K  0.7884411\n19      19 0.43553048    3 FALSE    K  0.2583817\n20      20 0.23658045    1 FALSE    E  0.2401732\n```\n\n\n:::\n\n```{.r .cell-code}\nrowSums(is.na(data)) # satılardaki toplam kayıp gözlem sayısı\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 0 0 0 0 0 1 0 1 0 0 0 0 1 0 0 0 0 1 0 0\n```\n\n\n:::\n\n```{.r .cell-code}\ncolSums(is.na(data)) # sütunlardaki toplam kayıp gözlem sayısı\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nrow_num    col2    col3    col4    col5    col1 \n      0       0       0       0       4       0 \n```\n\n\n:::\n\n```{.r .cell-code}\nsum(is.na(data)) # tablodaki toplam kayıp gözlem sayısı\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n```\n\n\n:::\n\n```{.r .cell-code}\ncomplete.cases(data) # satırlarda eksik gözlemlerin durumu\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE\n[13] FALSE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\ndata[complete.cases(data),]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   row_num       col2 col3  col4 col5       col1\n1        1 0.78219328    3 FALSE    E  0.4768080\n2        2 0.42919882    2  TRUE    E  0.8424486\n3        3 0.92727397    5  TRUE    E -0.8903234\n4        4 0.77324322    3 FALSE    K  0.7529609\n5        5 0.25968125    5  TRUE    E  0.4452159\n7        7 0.06019516    4  TRUE    E  1.1495922\n9        9 0.05505382    3  TRUE    K  0.8696714\n10      10 0.62554280    4  TRUE    E  0.5059117\n11      11 0.96447029    3  TRUE    K  0.3317020\n12      12 0.82730287    3  TRUE    E  1.7399997\n14      14 0.21302545    2  TRUE    K -0.3262169\n15      15 0.73249612    1 FALSE    K  0.1485432\n16      16 0.49924102    3 FALSE    K -0.3798679\n17      17 0.72977197    4 FALSE    K  0.7884411\n19      19 0.43553048    3 FALSE    K  0.2583817\n20      20 0.23658045    1 FALSE    E  0.2401732\n```\n\n\n:::\n\n```{.r .cell-code}\ndata[!complete.cases(data),]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   row_num       col2 col3  col4 col5         col1\n6        6 0.32122467    2  TRUE <NA>  0.421106220\n8        8 0.04345645    1 FALSE <NA> -0.896320181\n13      13 0.31502824    2 FALSE <NA> -0.008925433\n18      18 0.08033604    3  TRUE <NA> -0.171256569\n```\n\n\n:::\n\n```{.r .cell-code}\nna.omit(data) # NA olan satırları siler.\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   row_num       col2 col3  col4 col5       col1\n1        1 0.78219328    3 FALSE    E  0.4768080\n2        2 0.42919882    2  TRUE    E  0.8424486\n3        3 0.92727397    5  TRUE    E -0.8903234\n4        4 0.77324322    3 FALSE    K  0.7529609\n5        5 0.25968125    5  TRUE    E  0.4452159\n7        7 0.06019516    4  TRUE    E  1.1495922\n9        9 0.05505382    3  TRUE    K  0.8696714\n10      10 0.62554280    4  TRUE    E  0.5059117\n11      11 0.96447029    3  TRUE    K  0.3317020\n12      12 0.82730287    3  TRUE    E  1.7399997\n14      14 0.21302545    2  TRUE    K -0.3262169\n15      15 0.73249612    1 FALSE    K  0.1485432\n16      16 0.49924102    3 FALSE    K -0.3798679\n17      17 0.72977197    4 FALSE    K  0.7884411\n19      19 0.43553048    3 FALSE    K  0.2583817\n20      20 0.23658045    1 FALSE    E  0.2401732\n```\n\n\n:::\n:::\n\n\n\n\n\n\n::: callout-tip\n## Not\n\n**`tibble`**, Hadley Wickham tarafından geliştirilen ve **`dplyr`** paketi ile sıkça kullanılan bir veri yapısıdır. **`tibble`**, **`data.frame`**'e benzerdir, ancak bazı önemli farklar vardır. **`tibble`**, daha düzenli ve okunabilir bir çıktı üretir ve bazı varsayılan davranışları **`data.frame`**'den farklıdır. Modern data.frame olarak tanımlanmaktadır.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# tibble örneği\nlibrary(tibble)\n\nogrenciler_tibble <- tribble(\n  ~Ad,     ~Yas, ~Cinsiyet,\n  \"Ali\",   20,   \"Erkek\",\n  \"Ayşe\",  22,   \"Kadın\",\n  \"Mehmet\", 21,  \"Erkek\",\n  \"Zeynep\", 23,  \"Kadın\"\n)\n\n# tibble'ı görüntüleme\nprint(ogrenciler_tibble)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 x 3\n  Ad       Yas Cinsiyet\n  <chr>  <dbl> <chr>   \n1 Ali       20 Erkek   \n2 Ayşe      22 Kadın   \n3 Mehmet    21 Erkek   \n4 Zeynep    23 Kadın   \n```\n\n\n:::\n:::\n\n\n\n\n\n\nYukarıdaki örnekte, \"ogrenciler_tibble\" adında bir **`tibble`** oluşturuldu. **`tibble`**, sütun adlarını ve içeriği daha okunabilir bir şekilde görüntüler ve sütunların başlık ve veri tipi (**`~Ad`**, **`~Yas`**, **`~Cinsiyet`**) gibi özelliklerini korur.\n\nHem **`dataframe`** hem de **`tibble`** veri analizi ve işleme işlemlerinde kullanışlıdır. Hangi veri yapısını kullanacağınız, projenizin gereksinimlerine ve kişisel tercihinize bağlıdır. Özellikle veri analizi için **`dplyr`** gibi paketlerle çalışırken **`tibble`** tercih edilir.\n:::\n\n### Faktörler\n\n-   Faktörler, verileri kategorilere ayırmak ve düzeyler halinde depolamak için kullanılan veri nesneleridir. Hem karakter hem de tam sayıları depolayabilirler.\n\n-   \"Erkek,\"Kadın\" ve Doğru, Yanlış vb. gibi istatistiksel modelleme için veri analizinde faydalıdırlar.\n\n-   Faktörler, girdi olarak bir vektör alınarak **`factor()`** işlevi kullanılarak oluşturulur.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- c(rep(\"erkek\",5),rep(\"kadın\",7))\nprint(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"erkek\" \"erkek\" \"erkek\" \"erkek\" \"erkek\" \"kadın\" \"kadın\" \"kadın\" \"kadın\"\n[10] \"kadın\" \"kadın\" \"kadın\"\n```\n\n\n:::\n\n```{.r .cell-code}\nis.factor(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\n# veriyi faktöre çevirme\nfactor_data <- factor(data)\n\nprint(factor_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] erkek erkek erkek erkek erkek kadın kadın kadın kadın kadın kadın kadın\nLevels: erkek kadın\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(is.factor(factor_data))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\nas.numeric(factor_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 1 1 1 1 1 2 2 2 2 2 2 2\n```\n\n\n:::\n\n```{.r .cell-code}\n# data frame için vektörler oluşturalım\nboy <- c(132,151,162,139,166,147,122)\nkilo <- c(48,49,66,53,67,52,40)\ncinsiyet <- c(\"erkek\",\"erkek\",\"kadın\",\"kadın\",\"erkek\",\"kadın\",\"erkek\")\n\n# data frame\ndf <- data.frame(boy,kilo,cinsiyet)\nstr(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t7 obs. of  3 variables:\n $ boy     : num  132 151 162 139 166 147 122\n $ kilo    : num  48 49 66 53 67 52 40\n $ cinsiyet: chr  \"erkek\" \"erkek\" \"kadın\" \"kadın\" ...\n```\n\n\n:::\n\n```{.r .cell-code}\ndf$cinsiyet <- factor(cinsiyet)\nstr(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t7 obs. of  3 variables:\n $ boy     : num  132 151 162 139 166 147 122\n $ kilo    : num  48 49 66 53 67 52 40\n $ cinsiyet: Factor w/ 2 levels \"erkek\",\"kadın\": 1 1 2 2 1 2 1\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(is.factor(df$cinsiyet))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\n# cinsiyet kolononun seviyeleri\nprint(df$cinsiyet)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] erkek erkek kadın kadın erkek kadın erkek\nLevels: erkek kadın\n```\n\n\n:::\n\n```{.r .cell-code}\n# seviyelerin sırası değiştirilebilir.\n\ndf2 <- c(rep(\"düşük\",4),rep(\"orta\",5),rep(\"yüksek\",2))\n\nfactor_df2 <- factor(df2)\nprint(factor_df2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] düşük  düşük  düşük  düşük  orta   orta   orta   orta   orta   yüksek\n[11] yüksek\nLevels: düşük orta yüksek\n```\n\n\n:::\n\n```{.r .cell-code}\norder_df2 <- factor(factor_df2,levels = c(\"yüksek\",\"orta\",\"düşük\"))\nprint(order_df2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] düşük  düşük  düşük  düşük  orta   orta   orta   orta   orta   yüksek\n[11] yüksek\nLevels: yüksek orta düşük\n```\n\n\n:::\n\n```{.r .cell-code}\n# ordered=TRUE ile seviyelerin sıralı olduğu ifade edilir\norder_df2 <- factor(factor_df2,levels = c(\"yüksek\",\"orta\",\"düşük\"),ordered = TRUE)\nprint(order_df2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] düşük  düşük  düşük  düşük  orta   orta   orta   orta   orta   yüksek\n[11] yüksek\nLevels: yüksek < orta < düşük\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}