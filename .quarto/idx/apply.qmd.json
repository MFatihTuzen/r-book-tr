{"title":"Apply Ailesi","markdown":{"headingText":"Apply Ailesi","containsRefs":false,"markdown":"\n**`Apply()`** ailesi, matrislerden, dizilerden, listelerden ve veri çerçevelerinden tekrarlayan bir şekilde veri dilimlerini işlemek için fonksiyonlarla doldurulur. Bu fonksiyonlar sayesinde döngü yapılarının kullanılmasından kaçınır. Bir girdi listesi, matris veya dizi üzerinde hareket ederler ve bir veya birkaç isteğe bağlı argümanla adlandırılmış bir fonksiyon uygularlar.\n\n-   `apply()`: bir dizinin ya da matrisin satır ya da sütunlarına fonksiyon uygular.\n\n-   `lapply()`: liste üzerindeki her elemana fonksiyon uygular.\n\n-   `sapply()`: lapply fonksiyonu ile aynıdır ancak çıktısı matris ya da veri çerçevesidir.\n\n-   `mapply()`: lapply fonksiyonunun çoklu versiyonudur.\n\n-   `tapply()`: faktör ya da grup düzeyinde fonksiyon uygular.\n\n## apply\n\n**`apply`** fonksiyonu, bir veri yapısında bir fonksiyonu belirli bir boyuta uygulamak için kullanılır. Temel olarak üç ana parametre alır:\n\n-   **`X`**: Uygulanacak veri yapısı (matris, veri çerçevesi veya dizi).\n\n-   **`MARGIN`**: Fonksiyonun uygulanacağı boyut. **`1`** ise satırlar, **`2`** ise sütunlar üzerinde uygulanır.\n\n-   **`FUN`**: Uygulanacak fonksiyon.\n\n```{r}\n\nset.seed(1234)\n\n# apply\nx <-matrix(rnorm(20), nrow=5, ncol=4)\nx\n\napply(x, 2 ,sum) # sütunların toplama işlemini yapar\napply(x, 1 ,mean) # satırların ortamalasını üretir\n```\n\n### Özel Fonksiyon Kullanımı\n\nR içerisindeki hazır fonskiyonlarının yanı sıra kullanıcı tarafından belirli bir amaca yönelik olarak tanımlanmış fonksiyonlar da **`apply`** ile birlikte kullanılabilir. Örneğin aşağıdaki fonksiyon, bir sayının değerine bağlı olarak \"Küçük\" veya \"Büyük\" şeklinde bir etiket atama işlemi yapmaktadır.\n\nBu fonksiyon, **`x`** adında bir argüman alır ve bu argümanın değerine bağlı olarak bir etiket üretir. Eğer **`x`** 5'ten küçükse, \"Küçük\" değeri döndürür, aksi halde \"Büyük\" değerini döndürür. Daha sonra, örneğin bir veri çerçevesi oluşturarak bu fonksiyonu **`apply`** fonksiyonuyla nasıl kullanabileceğimizi gösterebiliriz:\n\n```{r}\n\n# Özel bir fonksiyon tanımlayalım\ncustom_function <- function(x) {\n  ifelse(x < 5, \"Küçük\", \"Büyük\")\n}\n\n# Örnek bir veri çerçevesi oluşturalım\nveri <- data.frame(A = c(3, 7, 8), B = c(6, 2, 4))\n\n# Özel fonksiyonu veri çerçevesinin her bir elemanına uygulayalım\nsonuç <- apply(veri, c(1, 2), custom_function)\n\nsonuç\n\n\n```\n\nBu kod parçacığı, **`apply`** fonksiyonunu kullanarak **`veri`** adında bir veri çerçevesinin her bir elemanına **`custom_function`** adlı özel fonksiyonu uygular. **`c(1, 2)`** parametresi, fonksiyonun hem satır hem de sütun boyunca uygulanmasını sağlar. Sonuç olarak, her elemanın \"Küçük\" veya \"Büyük\" olarak etiketlendiği bir matris elde edilir.\n\n### Fonksiyonun **`apply`** ile Birlikte Tanımlanması\n\n**`apply`** fonksiyonu içinde bir fonksiyon tanımlayıp kullanmak da oldukça yaygın bir uygulamadır. Bu, özellikle küçük veya bir kez kullanılacak fonksiyonlar için faydalıdır çünkü bu fonksiyonları ayrı olarak tanımlamak yerine, doğrudan **`apply`** fonksiyonu içine yazarak kodunuzu daha temiz ve derli toplu hale getirebilirsiniz.\n\n```{r}\n\n# Örnek bir matris oluşturalım\nmatris <- matrix(1:9, nrow = 3, ncol = 3)\n\n# Her bir sütunun maksimum değerini bulan özel bir fonksiyonu apply ile kullanalım\nsütun_max <- apply(matris, 2, function(x) max(x))\n\nsütun_max\n\n\n```\n\nBu kod parçasında, **`apply`** fonksiyonu içinde, her bir sütunun maksimum değerini bulmak için özel bir fonksiyon tanımlıyoruz. Bu fonksiyon, **`function(x)`** ile başlayıp **`x`** argümanını alır ve bu argümanın maksimum değerini döndürür. **`apply`** fonksiyonu bu özel fonksiyonu matrisin her bir sütununa uygular ve her sütunun maksimum değerlerini içeren bir vektör döndürür.\n\nBu şekilde, tek seferlik veya daha spesifik kullanımlar için özel fonksiyonları **`apply`** fonksiyonu içinde tanımlayabilirsiniz. Bu, kodunuzu daha okunabilir ve anlaşılır hale getirebilir ve gereksiz isim çakışmalarını önleyerek kod tabanınızı daha düzenli hale getirebilir.\n\n### Ek Argümanların Kullanımı\n\n**`apply`** fonksiyonu, birinci argüman olarak veri yapısını (**`X`**), ikinci argüman olarak işlem yapılacak boyutu (**`MARGIN`**) ve üçüncü argüman olarak uygulanacak fonksiyonu (**`FUN`**) alır. Ancak, **`FUN`** (üçüncü argüman) dışında ek argümanlar da kullanabilirsiniz. Bu, **`apply`** fonksiyonunu daha esnek hale getirir ve işlemlerinizi daha geniş bir yelpazede yapmanıza olanak tanır.\n\nÖrneğin, eğer kullanacağınız fonksiyonun ek argümanları varsa, bu argümanları **`...`** (üç nokta) kullanarak **`apply`** fonksiyonuna iletebilirsiniz. Bu argümanlar, **`FUN`** fonksiyonuna aktarılır ve işlemlerde kullanılabilir.\n\n```{r}\n\n# Özel bir fonksiyon tanımlayalım\ncustom_function <- function(x, threshold) {\n  ifelse(x < threshold, \"Küçük\", \"Büyük\")\n}\n\n# Özel fonksiyonu apply ile kullanırken ek bir argümanı (threshold) nasıl iletebileceğimizi görelim\nthreshold_value <- 5\nsonuç <- apply(matris, c(1, 2), custom_function, threshold = threshold_value)\n\nsonuç\n\n\n```\n\nBu kod parçasında, **`custom_function`** adlı özel bir fonksiyon tanımlıyoruz. Bu fonksiyon, **`x`** değerini ve **`threshold`** adında ek bir argümanı alır. **`x`** değeri, elemanın değerini temsil ederken, **`threshold`** değeri ise bir eşik değeri olarak kullanılır.\n\nDaha sonra, **`apply`** fonksiyonunu kullanırken **`threshold`** argümanını belirli bir değere (**`threshold_değer`**) ayarlıyoruz. Bu, **`apply`** fonksiyonu tarafından çağrılan **`custom_function`** fonksiyonuna bu değerin iletileceği anlamına gelir.\n\nSonuç olarak, **`apply`** fonksiyonu **`custom_function`** fonksiyonunu çağırırken her elemanın değerini ve belirlenen eşik değerini dikkate alarak sonuçları oluşturur. Bu şekilde, **`apply`** fonksiyonunu çok daha esnek bir şekilde kullanabilir ve ihtiyacınıza göre işlevsellik ekleyebilirsiniz.\n\n## lapply\n\nElbette, **`lapply`** fonksiyonu, listenin her bir elemanına belirtilen bir işlevi uygulamak için kullanılır ve sonuçları bir liste olarak döndürür. Bu fonksiyon, R'deki döngü yapısını vektörleştirmenin güçlü bir yoludur ve kodunuzu daha temiz ve etkili hale getirebilir.\n\n```{r}\n\n# Örnek bir liste oluşturalım\nliste <- list(a = 1:5, b = 6:10, c = 11:15)\n\n# Her bir liste elemanının karesini alalım\nkareler <- lapply(liste, function(x) x^2)\n\nkareler\n\n```\n\nBu kod, **`liste`** adlı bir liste oluşturur ve her bir liste elemanının karesini almak için **`lapply`** fonksiyonunu kullanır. Sonuç olarak, her bir liste elemanının karesini içeren yeni bir liste oluşturulur.\n\nÖrneğin, bir liste içindeki veri çerçevelerini düşünelim. Her bir veri çerçevesinin farklı sayıda sütunu olabilir ve her bir veri çerçevesinin sadece ilk sütununu alan ve bu sütunları bir liste olarak döndüren bir işlem yapmak istiyoruz.\n\n```{r}\n\n# Örnek bir liste oluşturalım\nmylist <- list(data.frame(A = 1:3, B = 4:6),\n               data.frame(X = 7:9, Y = 10:12),\n               data.frame(M = 13:15, N = 16:18))\n\n# Her bir liste elemanının ilk sütununu alalım\nsonuç <- lapply(mylist, function(x) x[,1])\n\nsonuç\n\n\n```\n\nBu kod, **`mylist`** adlı bir liste oluşturur ve her bir elemanı farklı sütunlara sahip üç adet veri çerçevesi içerir. Yukarıdak işlem her bir veri çerçevesinin ilk sütununu seçer ve bu sütunları bir liste olarak döndürür. Sonuç olarak, her bir liste elemanının ilk sütununu içeren yeni bir liste elde edilir.\n\nÖrneğin, her biri bir veri çerçevesi için sütunların ortalamasını hesaplamak isteyelim. Bunun için önceki aşamada oluşturduğumuz listeyi kullanalım.\n\n```{r}\n\nlapply(mylist,colMeans)\n\n```\n\nBu örnek, **`lapply`** fonksiyonunu yerleşik bir R fonksiyonu olan **`colMeans`** ile kullanmanın bir örneğidir. Bu tür işlevler, veri analizi yaparken veri yapısının her bir elemanına uygulanarak kolayca özet istatistikler elde etmenizi sağlar.\n\n## sapply\n\n**`sapply`**, bir işlevi bir veri yapısının her bir elemanına uygular ve sonuçları bir vektör veya dizi olarak döndürür. Diğer **`apply`** fonksiyonlarından farkı, sonucun yapısını belirleyebilme esnekliğine sahip olmasıdır.\n\nÖrneğin bir liste elemanlarının ortalamasını bulmak isteyelim.\n\n```{r}\n\n# Örnek bir liste oluşturalım\nliste <- list(a = c(1, 2, 3), b = c(4, 5, 6), c = c(7, 8, 9))\n\n# Her bir liste elemanının ortalamasını bulalım\nortalama <- sapply(liste, mean)\n\nortalama\n\n\n```\n\nBu kod, **`liste`** adlı bir liste oluşturur ve her bir liste elemanının ortalamasını bulmak için **`sapply`** fonksiyonunu kullanır. Sonuç olarak, her bir liste elemanının ortalamasını içeren bir vektör elde edilir.\n\n**`sapply`** fonksiyonu sonucun yapısını belirlemek için, veri yapısının elemanlarına uygulanan işlevin çıktısına dayanır. Örneğin, eğer uygulanan işlevin çıktısı her bir eleman için bir skaler (tek bir değer) ise, sonuç bir vektör olacaktır. Eğer uygulanan işlevin çıktısı farklı uzunlukta vektörler ise, sonuç bir matris olacaktır. Eğer uygulanan işlevin çıktısı liste ise, sonuç da bir liste olacaktır.\n\n```{r}\n\n# Her bir liste elemanının uzunluğunu bulan işlev\nuzunluk_bul <- function(x) length(x)\n\n# Her bir liste elemanının uzunluğunu bulalım\nsonuç <- sapply(liste, uzunluk_bul)\n\nsonuç\n\n\n```\n\nBu kod içerisinde her bir elemanının uzunluğunu bulmak için **`uzunluk_bul`** adlı bir işlev tanımlanır. **`sapply`** fonksiyonu, bu işlevi listenin her bir elemanına uygular. Çıktıya dikkat ederseniz, işlevin çıktısı her eleman için bir skaler (uzunluk) olduğu için sonuç bir vektör olarak döner. Ancak, eğer işlevin çıktısı her bir eleman için farklı uzunlukta bir vektör olsaydı, sonuç bir matris olarak dönecekti.\n\n```{r}\n\n\n# Her bir liste elemanının karelerini bulan işlev\nkare_bul <- function(x) x^2\n\n# Her bir liste elemanının karelerini bulalım\nsonuç <- sapply(liste, kare_bul)\n\nsonuç\n\n\n```\n\nBu kodda, **`kare_bul`** işlevi her bir liste elemanının karesini alır. Ancak, çıktıdaki farklı uzunluktaki vektörler, sonucun bir matris olmasını sağlar.\n\nBu örneklerden de görebileceğiniz gibi, **`sapply`** fonksiyonunun sonucun yapısını belirlemek için uygulanan işlevin çıktısına dayandığını görebiliriz. Bu, **`sapply`** fonksiyonunun sonucun yapısını esnek bir şekilde belirlemesini sağlar.\n\n## tapply\n\nR programlama dilinde, verileri bir faktöre veya belirli bir kategorik değişkene göre gruplamak ve her bir grup için bir işlem yapmak sıkça gereklidir. **`tapply`** fonksiyonu, bu tür durumlar için kullanışlı bir araçtır. **`tapply`**, bir veri setini bir veya birden fazla faktöre göre gruplayarak her grup için bir işlem yapmanıza olanak tanır.\n\n**`apply`** fonksiyonlarının aksine, **`tapply`** fonksiyonu veri setini faktörlere veya gruplara göre böler ve her bir grup için belirtilen bir işlemi uygular. Temel kullanımı şu şekildedir:\n\n```{r}\n#| eval: false\ntapply(X, INDEX, FUN)\n\n```\n\nBurada:\n\n-   **`X`** : Uygulanacak işlemi gerektiren vektör.\n\n-   **`INDEX`**: Gruplandırılacak faktör veya grup değişkeni.\n\n-   **`FUN`**: Her bir gruba uygulanacak işlev.\n\n```{r}\n\n# Örnek veri seti oluşturalım\nveri <- data.frame(Aylar = rep(c(\"Ocak\", \"Şubat\", \"Mart\"), each = 4),\n                   Degerler = c(10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65))\n\n# Aylara göre değerlerin ortalamasını hesaplayalım\nortalama <- tapply(veri$Degerler, veri$Aylar, mean)\n\nortalama\n\n```\n\nBu kod parçası, **`veri`** adında bir veri seti oluşturur. Bu veri setinde \"Aylar\" ve \"Değerler\" adlı iki sütun bulunmaktadır. **`tapply`** fonksiyonu, **`veri$Değerler`** sütununu **`veri$Aylar`** sütununa göre gruplar ve her bir ay için değerlerin ortalamasını hesaplar.\n\nEğer iki faktöre ya da değişkene göre bir hesapalama yapmak istersek faktörleri bir liste olarak fonksiyona belirtmemiz yeterlidir. Diyelim ki, bir veri setindeki öğrencilerin matematik ve fen bilgisi notları var ve bu notları cinsiyet ve sınıf düzeyi gibi iki farklı grup değişkenine göre incelemek istiyoruz. **`tapply`** fonksiyonunu kullanarak her bir kombinasyon için not ortalamalarını bulabiliriz.\n\n```{r}\n\n# Örnek veri seti oluşturalım\nogrenciler <- data.frame(\n  Cinsiyet = c(\"K\", \"E\", \"K\", \"E\", \"K\", \"E\", \"K\", \"E\", \"K\", \"E\"),\n  Sinif = c(9, 9, 10, 10, 11, 11, 9, 9, 10, 10),\n  Matematik = c(70, 75, 80, 85, 90, 95, 85, 80, 75, 70),\n  FenBilgisi = c(75, 80, 85, 90, 95, 100, 80, 85, 90, 95)\n)\n\n# Her bir kombinasyon için matematik ve fen bilgisi notlarının ortalamasını bulalım\nsonuç <- with(ogrenciler, tapply(Matematik, list(Cinsiyet, Sinif), mean))\nsonuç\n\n\n```\n\nBu kod, öğrencilerin cinsiyet ve sınıf düzeylerine göre matematik notlarının ortalamasını hesaplar. **`list(Cinsiyet, Sinif)`** ifadesi, **`Cinsiyet`** ve **`Sinif`** değişkenlerinin tüm kombinasyonlarını oluşturur. **`tapply`** fonksiyonu, bu kombinasyonlar için matematik notlarının ortalamasını hesaplar.\n\n### **`tapply`'ın Avantajları ve Kullanım Alanları**\n\n1.  **Grup Bazında İşlem Yapma**: **`tapply`** fonksiyonu, verileri belirli faktörler veya gruplar altında gruplayarak her bir grup için işlem yapmanıza olanak tanır. Bu, veri analizi ve özetleme işlemlerinde çok kullanışlıdır.\n\n2.  **Esneklik**: **`tapply`** fonksiyonu, birden fazla faktörü kullanarak verileri gruplamak ve her bir grup için farklı işlemler yapmak için esneklik sağlar. Bu, çeşitli veri analizi senaryolarına uyarlanabilirlik sağlar.\n\n3.  **Faktörlere Göre Toplamak ve Özetlemek**: **`tapply`** fonksiyonu, verileri belirli bir faktöre göre toplamak ve özetlemek için ideal bir araçtır. Özellikle kategorik değişkenlerle çalışırken grup bazında işlem yapmak istediğinizde kullanışlıdır.\n\n**`tapply`** fonksiyonu, veri analizi ve işleme süreçlerinde grup bazında işlem yapmanın hızlı ve etkili bir yolunu sunar. Farklı faktörler veya gruplar altında verileri gruplamak ve her bir grup için farklı işlemler yapmak için kullanılabilir. Bu, veri analizindeki pek çok senaryoda kullanışlı bir araçtır.\n\n## mapply\n\nR programlama dilinde, bir işlevi birden çok giriş değeri veya argüman ile uygulamak gerekebilir. **`mapply`** fonksiyonu, bu tür durumlar için kullanışlı bir araçtır. Bu fonksiyon, birden çok vektör veya listeye sahip olduğunuzda, her bir girişe bir işlev uygular ve sonuçları birleştirir. Temel kullanımı şu şekildedir:\n\n```{r}\n#| eval: false\nmapply(FUN, ..., MoreArgs = NULL, SIMPLIFY = TRUE, USE.NAMES = TRUE)\n\n```\n\nBurada:\n\n-   **`FUN`**: Uygulanacak işlev.\n\n-   **`...`**: Birden çok vektör veya liste.\n\n-   **`MoreArgs`**: İşlevin sabit argümanları (opsiyonel).\n\n-   **`SIMPLIFY`**: Sonuçların basitleştirilip basitleştirilmeyeceğini belirten bir mantıksal değer (varsayılan olarak **`TRUE`**).\n\n-   **`USE.NAMES`**: Sonuçlarda isimlerin kullanılıp kullanılmayacağını belirten bir mantıksal değer (varsayılan olarak **`TRUE`**).\n\nAşağıdaki örnekte, **`mapply`** fonksiyonu **`*`** (çarpma) işlemini **`a`** ve **`b`** vektörlerinin karşılıklı elemanlarına uygular.\n\n```{r}\n\n# İki vektör oluşturalım\na <- c(1, 2, 3)\nb <- c(4, 5, 6)\n\n# Her iki vektördeki elemanları çarparak sonuçları hesaplayalım\nsonuç <- mapply(FUN = \"*\", a, b)\n\nsonuç\n\n\n```\n\nBu örnekte ise **`mapply`** fonksiyonu iki farklı işlevi (**`üs_al`** ve **`çarp`**) aynı anda iki vektörün karşılıklı elemanlarına uygular.\n\n```{r}\n\n# İki farklı fonksiyon tanımlayalım\nüs_al <- function(x, y) x^y\nçarp <- function(x, y) x * y\n\n# İki vektör oluşturalım\na <- c(1, 2, 3)\nb <- c(2, 3, 4)\n\n# Her bir vektördeki elemanları farklı işlevlere uygulayarak sonuçları hesaplayalım\nsonuç1 <- mapply(üs_al, a, b)\nsonuç2 <- mapply(çarp, a, b)\n\nsonuç1\nsonuç2\n\n\n```\n\nBu örnekte, **`mapply`** fonksiyonu **`paste`** işlemini liste elemanlarına uygular ve **`collapse`** argümanını kullanarak sonuçları birleştirir.\n\n```{r}\n\n# Örnek bir liste oluşturalım\nliste <- list(a = c(1, 2, 3), b = c(4, 5, 6), c = c(7, 8, 9))\n\n# Her bir liste elemanını birleştirerek sonuçları hesaplayalım\nsonuç <- mapply(FUN = paste, liste, collapse = \"-\")\n\nsonuç\n\n\n```\n\n### **`mapply` Fonksiyonunun Kullanım Alanları**\n\n-   **Birden Çok Vektör veya Liste ile İşlev Uygulama**: **`mapply`**, birden çok giriş değeri ile bir işlevi uygulamak için kullanılır.\n\n-   **Döngüsüz Programlama**: **`mapply`**, döngüsüz programlama yaklaşımını benimseyerek kodun daha temiz ve etkili olmasını sağlar.\n\n-   **Veri Çerçevesi İşlemleri**: **`mapply`**, veri çerçevelerinde veya matrislerdeki satır veya sütunlar arasında işlevleri uygulamak için kullanılabilir.\n\n**`mapply`** fonksiyonu, birden çok giriş değeri ile bir işlevi uygulamak için kullanılan kullanışlı bir araçtır. Bu fonksiyon, programlamada döngülerin azaltılması ve kodun daha temiz hale getirilmesine yardımcı olur.\n\n## vapply\n\n**`vapply`** fonksiyonu, bir vektör üzerinde belirli bir işlevi uygularken, işlevin çıktı türünü önceden belirleyebileceğiniz bir yöntem sunar. Genel olarak, **`sapply`** fonksiyonuna benzer şekilde çalışır, ancak dönüş değerlerinin türünü belirleyebilme özelliğiyle farklılık gösterir. Bu, çıktının türünü bilmeniz gerektiğinde ve istenmeyen bir tür dönüşümünü önlemek istediğinizde oldukça faydalıdır.\n\nİşlevi şu şekildedir:\n\n```{r}\n#| eval: false\nvapply(X, FUN, FUN.VALUE, ...)\n\n```\n\nBurada:\n\n-   **`X`**: İşlevin uygulanacağı vektör veya dizi.\n\n-   **`FUN`**: Uygulanacak işlev.\n\n-   **`FUN.VALUE`**: İşlevin çıktı türünü belirten bir örnek veya örnek vektör.\n\n-   **`...`**: Ek argümanlar (opsiyonel).\n\nÖrnek olarak, bir vektördeki her bir elemanın uzunluğunu bulalım, ancak çıktı olarak her zaman bir tamsayı vektörü almak isteyelim:\n\n```{r}\n\n# Örnek bir vektör oluşturalım\nv <- c(\"abc\", \"de\", \"fghi\")\n\n# Her bir elemanın uzunluğunu bulan işlevi tanımlayalım\nuzunluk_bul <- function(x) {\n  return(nchar(x))\n}\n\n# Çıktı olarak her zaman bir tamsayı vektörü almak için vapply'i kullanalım\nsonuç <- vapply(v, uzunluk_bul, FUN.VALUE = integer(1))\n\nsonuç\n\n\n```\n\nBu örnekte, **`vapply`**, \"v\" vektöründeki her bir elemanın uzunluğunu bulmak için **`nchar`** işlevini uygular. Ancak, **`FUN.VALUE = integer(1)`** argümanı sayesinde, her zaman bir tamsayı vektörü döndürülmesini sağlar. Bu, her elemanın uzunluğunun tamsayı olarak dönmesini garanti eder.\n\n**`vapply`** fonksiyonu, işlevin çıktı türünü önceden belirlemek istediğinizde oldukça kullanışlıdır ve programınızın daha sağlam ve öngörülebilir olmasına yardımcı olabilir.\n","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"output-file":"apply.html"},"language":{"toc-title-document":"İçindekiler","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Yazar","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.8.25","editor":"visual","theme":{"light":"sandstone","dark":"cyborg"}},"extensions":{"book":{"multiFile":true}}},"pdf":{"identifier":{"display-name":"PDF","target-format":"pdf","base-format":"pdf"},"execute":{"fig-width":5.5,"fig-height":3.5,"fig-format":"pdf","fig-dpi":300,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"pdf-engine":"lualatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","output-file":"apply.pdf"},"language":{"toc-title-document":"İçindekiler","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Yazar","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"block-headings":true,"editor":"visual","documentclass":"scrreprt"},"extensions":{"book":{"selfContainedOutput":true}}}},"projectFormats":["html","pdf"]}