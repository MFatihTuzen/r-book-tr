{"title":"Veri Tipleri ve Yapıları","markdown":{"headingText":"Veri Tipleri ve Yapıları","containsRefs":false,"markdown":"\n## Veri Tipleri\n\nR'da kulllanılan 5 farklı veri tipi vardır. Bu veri tipleri atomic vectörler olarak da bilinir. Atomic olması vektörlerin homojen olması anlamına gelmektedir. Yani vektör içerisinde aynı veri tipinden değerler yer alabilir. Veri tipleri;\n\n-   numeric veya double (reel sayılar)\n\n-   integer (tamsayılar)\n\n-   complex (karmaşık sayılar)\n\n-   character (metinsel ifadeler)\n\n-   logical, TRUE ve FALSE (mantıksal)\n\n`typeof()` veya `class()` fonksiyonları ile veri tipi öğrenilebilir.\n\n::: callout-important\n## Önemli\n\n**`typeof()`** ve **`class()`** fonksiyonları, R programlama dilinde nesnelerin özelliklerini sorgulamak için kullanılır. Farklı amaçlara hizmet ederler ve bazı durumlarda farklı sonuçlar üretebilirler.\n\n-   **`typeof()`** fonksiyonu, bir nesnenin temel veri türünü belirler. Örneğin, bir nesnenin karakter dizisi (string), sayı, liste, fonksiyon veya vektör gibi temel veri türlerinden hangisine ait olduğunu gösterir. Ancak, nesnenin özel sınıfını (class) ifade etmez. Örneğin, bir faktörün **`typeof()`** değeri \"integer\" olabilir.\n\n-   **`class()`** fonksiyonu ise bir nesnenin özel sınıfını belirtir. Eğer bir nesne özel bir sınıfa aitse (örneğin, bir veri çerçevesi veya faktör), **`class()`** fonksiyonu bu özel sınıfın adını verir. Eğer nesne birden fazla sınıfa aitse, sınıflar bir sıra halinde listelenir.\n\nBu fonksiyonlar genellikle birlikte kullanılır çünkü bir nesnenin veri tipi ve sınıfı arasında farklılıklar olabilir. Örneğin, bir veri çerçevesi **`typeof()`** ile incelendiğinde **`list`** çıkabilir, çünkü veri çerçeveleri bir liste türündedir. Ancak, **`class()`** fonksiyonu bu nesnenin özel sınıfını, yani **`data.frame`** olarak gösterecektir. Bu farklılıklar, bir nesnenin hangi özelliklere sahip olduğunu daha iyi anlamak için kullanılabilir.\n:::\n\n**numeric**\n\n```{r}\na <- 3.5\nclass(a)\ntypeof(a) # typeof numeriklerin tipini double olarak gösterir.\nis.numeric(a) # verinin tipinin numerik olup olmadığı sorgulanır.\n\n```\n\n**integer**\n\n```{r}\n\nb <- 5\nclass(b)\nis.integer(b)\n\nc <- 6L # integer olması için sayının sağına L yazılır.\nclass(c)\nis.integer(c)\n\nclass(as.integer(b)) # as. ile baslayan fonksiyonlar dönüşüm için kullanılır.\n```\n\n**complex**\n\n```{r}\n\nz <- 4 + 2i\nclass(z)\n\n```\n\n**character**\n\n```{r}\nd <- \"R Programlama\"\nclass(d)\ne <- \"5.5\"\nclass(e)\nclass(as.numeric(e))\n\n```\n\n**logical**\n\n```{r}\nx <- TRUE\ny <- FALSE\nclass(c(x,y))\nas.integer(c(x,y)) # TRUE ve FALSE numeric olarak 1 ve 0 değerine karşılık gelir.\n\n```\n\n## Veri Yapıları\n\n![https://app.dataquest.io/m/493/dataframes-in-r/1/introduction](images/data_structures.png){fig-align=\"center\"}\n\n### Vektörler\n\n-   R'daki en temel nesneler vektörlerdir.\n\n-   Vektörler homojen yapıya sahiptir yani bütün elemanları aynı veri tipinde olmalıdır.\n\n-   Vektörler tek boyutludur.\n\n-   Bir vektör oluşturmak için kullanabilecek en temel fonksiyon **`c()`**'dir.\n\n```{r}\n\nv <- c(1,4,7,2,5,8,3,6,9)\n\nv[1] # 1. elemanını seçer\nv[3] # 3. elemanını seçer\nv[c(3,7)] # 3. ve 7. elemani secer\nv[1:6] # 1. elemandan 6. elemana kadar secer\nv[-2] # 2. elemani haric tutarak secer\n\nlength(v) # vektörün uzunluğunu gösterir\nv2 <- c(v,12) # vektöre eleman ekleme\nv2\n\n# : ile başlangıç ve bitiş değerleri belli olan vektörler yaratılabilir.\n\nv3 <- 1:10\nv3\n\nv4 <- 11:20\nv4\n# Vektörler ile matematiksel işlemler yapılabilir.\n\nv3 + v4\nv3 / v4\n2 * v3 - v4\n\n```\n\nAşağıda vektörler ile birlikte sıklıkla kulanılan bazı fonksiyonlara yer verilmiştir.\n\n#### **seq**\n\n**`seq()`** fonksiyonu, ardışık sayı dizileri oluşturmak için kullanılır. Bu fonksiyon, başlangıç ve bitiş değerlerinin yanı sıra belirli bir artış veya azalış miktarını belirterek ardışık bir dizi oluşturmanızı sağlar.\n\n**`seq()`** fonksiyonu genellikle üç temel parametre alır:\n\n1.  **`from`**: Dizinin başlangıç değeri.\n\n2.  **`to`**: Dizinin bitiş değeri.\n\n3.  **`by`**: Opsiyonel olarak belirlenebilen artış/azalış miktarı.\n\n```{r}\n\nseq(from = 5, to = 50, by =5) # 5 ile başlayan 50 ile biten 5şer artan vektör\nseq(from = 5, to = 50, length = 7) # 5 ile başlayan 50 ile 7 elemanlı vektör\nseq(5,1,-1) # 5 ile baslayıp 1'e kadar 1'er azaltarak vektor olusturma\n\n```\n\n#### **rep**\n\n**`rep()`** fonksiyonu, R programlama dilinde tekrarlanan öğelerden oluşan vektörler oluşturmak için kullanılır. Bu fonksiyon, belirli bir öğenin veya öğelerin tekrarlanarak bir vektör oluşturulmasına izin verir.\n\n**`rep()`** fonksiyonunun temel parametreleri şunlardır:\n\n-   **`x`**: Tekrarlanacak öğelerin kendisi veya vektörü.\n\n-   **`times`**: Tekrar sayısını belirten bir sayı veya vektör.\n\n-   **`each`**: Her bir öğenin kaç kez tekrarlanacağını belirten bir sayı veya vektör.\n\n-   **`length.out:`** çıktının istenen uzunluğu\n\n```{r}\n# 8 tane 10 değeri olan vektör\nrep(10,times = 8) \n\n# 1,2,3 vektörünün 4 defa tekrarlanması\nrep(c(1,2,3), times = 4) \n\n# each argünmanı ile sıralı ve tekrarlı vektör\nrep(c(1,2,3), each = 4)\n\n# sadece ilk 4 elemanı verir\nrep(1:4, each = 2, length.out = 4) \n\n```\n\n#### **all**\n\n**`all()`** fonksiyonu, R programlama dilinde bir mantıksal vektörün tüm elemanlarının **`TRUE`** olup olmadığını kontrol etmek için kullanılır. Eğer vektörde en az bir **`FALSE`** değer varsa, **`FALSE`** sonucunu verir. Eğer vektördeki tüm elemanlar **`TRUE`** ise, **`TRUE`** döndürür. Bu fonksiyon genellikle koşullu ifadelerde ve vektörlerin doğruluğunu kontrol etmek için kullanılır.\n\n```{r}\n\n# Bir vektör oluşturalım\nsayi_vektoru <- c(10, 20, 30, 40, 50)\n\n# Tüm sayıların 0 ile 60 arasında olup olmadığını kontrol edelim\nall(sayi_vektoru > 0 & sayi_vektoru < 60)\n\n# vektördeki tüm elemanların şartı sağlayıp sağlamadıkları test edelim\nall(sayi_vektoru > 30) \n\n\n```\n\n#### **any**\n\n**`any()`** fonksiyonu, R programlama dilinde bir mantıksal vektörün içinde en az bir tane **`TRUE`** değerinin olup olmadığını kontrol etmek için kullanılır. Eğer vektörde en az bir **`TRUE`** değer varsa, **`TRUE`** sonucunu verir. Eğer vektördeki tüm elemanlar **`FALSE`** ise, **`FALSE`** döndürür. Bu fonksiyon genellikle koşullu ifadelerde ve vektörlerin içeriğini kontrol etmek için kullanılır.\n\n```{r}\n\n# vektördeki en az bir elemanın şartı sağlayıp sağlamadığı test edelim\nany(sayi_vektoru) \n\n# Vektörde en az bir elemanın 10 olup olmadığını kontrol edelim\nany(sayi_vektoru==10) \n\n```\n\n#### **unique**\n\n**`unique()`** fonksiyonu, R programlama dilinde bir vektördeki benzersiz (tekrar etmeyen) elemanları bulmak için kullanılır. Bu fonksiyon, vektördeki tekrarlanan elemanları kaldırarak yalnızca benzersiz elemanları içeren yeni bir vektör oluşturur. Bu fonksiyon, veri temizleme veya benzersiz değerlerin bulunması gibi durumlarda sıklıkla kullanılır.\n\n```{r}\n\n# Tekrarlı gözlmeleri olan bir vektör oluşturalım\nvektor <- rep(1:5,3)\nvektor\nunique(vektor) # tekrarlı gözlemler temizlenir\n\n```\n\n#### **duplicated**\n\n**`duplicated()`** fonksiyonu, bir vektördeki tekrarlanan değerleri tespit etmek için kullanılır. Bu fonksiyon, bir vektördeki her bir elemanın önceki elemanlar arasında daha önce görülüp görülmediğini kontrol eder ve tekrar eden değerleri belirler. Bu fonksiyon, veri temizleme veya tekrarlanan değerlerin tespit edilmesi gereken durumlarda kullanışlıdır.\n\n```{r}\n\n# tekrarlı gözlemlerin varlığını kontrol eder\nduplicated(vektor) \n\n# tekrarlı gözlemleri listeler\nvektor[duplicated(vektor)]\n\n```\n\n#### **sort**\n\n**`sort()`** fonksiyonu, vektörleri sıralamak için kullanılır. Bu fonksiyon, sayısal veya karakter vektörlerin elemanlarını artan veya azalan sıraya göre sıralar.\n\n```{r}\n#| eval: false\nsort(x, decreasing = FALSE)\n```\n\nBurada:\n\n-   **`x`**, sıralanacak olan vektördür.\n\n-   **`decreasing`**, sıralamanın azalan sırada olup olmayacağını belirleyen bir mantıksal değerdir (varsayılan olarak **`FALSE`**).\n\n```{r}\n\n# Bir sayısal vektör oluşturalım\nvektor <- c(5, 2, 8, 1, 4)\n\n# küçükten büyüğe yani artan sıralama yapar.\nsort(vektor)\n\n# büyükten küçüğe yani azalan sıralama yapar.\nsort(vektor,decreasing = TRUE) \n\n# Bir karakter vektörü oluşturalım\nkarakter_vektor <- c(\"elma\", \"armut\", \"muz\", \"kavun\")\n\n# karakter tipinideki vektörler alfabetik sıraya göre sıralanır\nsort(karakter_vektor)\nsort(karakter_vektor,decreasing = TRUE) \n```\n\n#### **is.na**\n\n**`is.na()`** fonksiyonu, R programlama dilinde bir vektördeki veya veri çerçevesindeki değerlerin **`NA`** (Not Available - Mevcut Değil) olup olmadığını kontrol etmek ve verilerin içinde eksik veya mevcut olmayan değerleri tespit etmek için kullanılır.için kullanılır. Her **`NA`** değeri için ilgili konumda **`TRUE`**, değilse **`FALSE`** döndürür. Veri temizleme ve analiz aşamalarında oldukça faydalıdır.\n\n```{r}\n\n# Bir vektör oluşturalım\nvektor <- c(1, 2, NA, 4, NA, 6)\n\n# vektördeki elamanların NA olup olmadığını test eder.\nis.na(vektor)\n\n# NA olmayan değerleri filtreleyelim\nvektor[!is.na(vektor)]\n\n# NA değerlerini bir başka değerle değiştirelim, örneğin 0 ile\nvektor[is.na(vektor)] <- 0\nvektor\n\n```\n\n#### **which**\n\n**`which()`** fonksiyonu, belirli bir koşulu sağlayan veya belirli bir değere sahip olan elemanların konumlarını bulmak için kullanılır. Bu fonksiyon, bir vektörde veya bir koşulu karşılayan elemanların indislerini döndürür. Filtreleme veya koşullu indeksleme gibi durumlarda oldukça faydalıdır.\n\n```{r}\n\n# Bir vektör oluşturalım\nvektor <- c(10, 20, 30, 40, 50)\n\n# 30'dan büyük olan elemanların indekslerini bulalım\nwhich(vektor > 30)\nvektor[which(vektor > 30)]\n\n# vektördeki maximum elemanın posizyonunu gösterir\nwhich.max(vektor)\n\n# vektördeki minimum elemanın posizyonunu gösterir\nwhich.min(vektor) \n\n\n```\n\n#### **Temel İstatistiksel Bazı Fonksiyonlar**\n\n```{r}\n\n(veri <- 1:10)\nmean(veri, na.rm = TRUE) # aritmetik ortalama\nmedian(veri) # medyan (ortanca)\nsum(veri,na.rm = TRUE) # vektör toplamını verir\nmin(veri,na.rm = TRUE) # vektörün minimum değeri\nmax(veri,na.rm = TRUE) # vektörün maximum değeri\nsd(veri,na.rm = TRUE) # standart sapma\nvar(veri) # varyans\nsummary(veri) # Özet istatistikler\nquantile(veri) # Çeyreklikler\n\n\n```\n\n### Matrisler\n\n-   Matrisler, iki boyutlu yani satır ve sütunları olan atomik vektörlerdir.\n\n-   **`matrix()`** fonksiyonu ile tanımlanmaktadır.\n\n-   Vektörlerin birleştirilmesi ile de matrisler oluşturulabilir. [**rbind**]{.underline} satır bazlı alt alta birleştirme, [**cbind**]{.underline} ise sütun bazlı yanyana birleştirme yapar. Burada vektörlerin aynı boyutlarda olmasına dikkat edilmesi gerekir.\n\n```{r}\n\nv1 <- c(3,4,6,8,5)\nv2 <- c(4,8,4,7,1)\nv3 <- c(2,2,5,4,6)\nv4 <- c(4,7,5,2,5)\n\nmatris <- cbind(v1, v2, v3, v4)\nmatris\n\nis.matrix(matris)\ndim(matris) # matrisin boyutları\n\nmatrix(nrow = 3, ncol = 3, 1:9)\nmatrix(1:9, nrow = 3, ncol = 3, byrow = TRUE) # byrow satırlara göre oluşturur.\n\nmat <- seq(3, 21, by = 2)\nmat\ndim(mat) <- c(5,2)\nmat\nmatrix(c(1,2,3,11,22,33), nrow = 2, ncol = 3, byrow = TRUE)\n\n# normal dağılımdan 0 ortalamalı, 1 standart sapmalı 16 sayı üret\nMA <- rnorm(16, 0, 1)\nMA <- matrix(MA, nrow = 4, ncol = 4)\n\n# normal dağılımdan 90 ortalamalı, 10 standart sapmalı 16 sayı üret\nMB <- rnorm(16, 90, 10)\nMB <- matrix(MB, nrow = 4, ncol = 4)\n\nm <- rbind(MA, MB)\nm\n\n# satır ve sütun isimlendirme\ncolnames(m) <- LETTERS[1:4]\nrownames(m) <- tail(LETTERS,8)\nm\n\n# Matris Elemanlarina Erismek\nm[1,1] # 1. satır, 1.sütundak, eleman\nm[4,2] # 4. satır, 2.sütundak, eleman\nm[,2] # 2. sütun elemanları\nm[-3,] # 3. satır hariç tüm elemanlar\n\n# köşegen matris oluşturma\ndiag(2,nrow=3)\ndiag(1,5) # 5*5 birim matris\n\n# transpose\nt(m)\n\n# matris ile işlemler\n\nm1 <- matrix(1:4,nrow=2)\nm2 <- matrix(5:8,nrow=2)\n\nm1;m2\nm1 + m2 # matris elemanları birebir toplanır\nm1 / m2 # matris elemanları birebir toplanır\nm1 * m2 # matris elemanları birebir çarpılır\nm1 %*% m2 # matris çarpımı\nsolve(m2) # matrisin tersi\n\nrowSums(m1) # satır toplamları\nrowMeans(m1) # satır ortalaması\ncolSums(m1) # sütun toplamları\ncolMeans(m1) # sütun ortalaması\n\n```\n\n### Listeler\n\n-   Listeler, birbirinden farklı veri tiplerine sahip vektörler, matrisler vb farklı objeleri birarada tutabilen yapılardır.\n\n-   **`list()`** ile liste oluşturulur.\n\n```{r}\n\nx <- c(3,5,7)\ny <- letters[1:10]\nz <- c(rep(TRUE,3),rep(FALSE,4))\n\nlist <- list(x,y,z)\nlist\nclass(list) # listenin sınıfını verir\nstr(list) # listenin yapısını verir\n\nnames(list) <- c(\"numeric\",\"karakter\",\"mantıksal\") # liste isimlendirme\nlist\n\nlist$numeric\nlist$karakter\nlist$mantıksal\n\nlist[[2]]\n\nlist$numeric2 <- c(4:10) # listeye eleman ekleme\nlist\n\nlist$numeric <- NULL # listeden eleman silme\nlist\n\nunlist(list) # listeyi vektöre çevirir.\n\n```\n\n### dataframe\n\nVeri çerçevesi (dataframe), her sütunun bir değişkenin değerlerini ve her satırın her sütundan bir değer kümesini içerdiği bir tablo veya iki boyutlu dizi benzeri bir yapıdır. Bir veri çerçevesinin özellikleri şunlardır:\n\n-   Sütun adları boş olmamalıdır.\n\n-   Satır adları benzersiz olmalıdır.\n\n-   Bir veri çerçevesinde saklanan veriler sayısal, faktör veya karakter tipinde olabilir.\n\n-   Her sütun aynı sayıda veri öğesi içermelidir.\n\n**`data.frame()`** fonksiyonunu uygulayarak bir veri çerçevesi oluşturabiliriz.\n\n```{r}\n\n# data.frame oluşturma\nset.seed(12345)\n\ndata <- data.frame(\n  row_num = 1:20,\n  col1 = rnorm(20),\n  col2 = runif(20), # uniform dağılımdam 20 gözlem üret\n  col3 = rbinom(20,size=5,prob = 0.5), # binom dağılımdam 20 gözlem üret\n  col4 = sample(c(\"TRUE\",\"FALSE\"),20,replace = TRUE),\n  col5 = sample(c(rep(c(\"E\",\"K\"),8),rep(NA,4))),\n  stringsAsFactors = TRUE # karakter olanlar faktör olarak değerlendirilsin\n)\n\nclass(data)\nhead(data) # ilk 6 gözlemi gösterir\ntail(data) # son 6 gözlemi gösterir\ntail(data,10) # son 10 gözlemi gösterir\n\nstr(data) # tablonun yapısını gösterir\nsummary(data) # tablonun özet istatistiklerini gösterir\n\n# veri çerçevesinden belirli sütun/ları seçmek için $ veya [] kullanılır.\nhead(data$col1)\nhead(data[,\"col1\"])\n\n# veri çerçevesinden belirli satır/ları seçmek için [] kullanılır.\ndata[1:2,] \n\n# 3. and 5. satır ile 2. ve 4. kolon\ndata[c(3,5),c(2,4)]\n\n# koşula göre veriler seçilebilir\ndata$row_num > 12 # TRUE veya FALSE döner\ndata[data$row_num > 12,] # koşula göre satırlar döner\n\n# subset ile tablo filtrelenebilir.\nsubset(data, \n       row_num >= 10 & col4 == 'TRUE',\n       select = c(row_num, col1, col2,col4))\n\n# names veya colnames ile sütun isimleri elde edilir.\nnames(data)\ncolnames(data)\n\n# vektör ile sütun seçimi\ncols <- c(\"col1\",\"col2\",\"col5\")\nhead(data[cols])\n\n# sütun silme\ndata$col1 <- NULL\nhead(data)\n\n# sütun ekleme\ndata$col1 <- rnorm(20)\nhead(data)\n\n# sütunları sıralama\nhead(data[c(\"row_num\",\"col1\",\"col2\",\"col3\",\"col4\",\"col5\")])\n\n# sıralama\nhead(data[order(data$col3),]) # artan\nhead(data[order(-data$row_num),]) # azalan\nhead(data[order(data$col3,-data$row_num),])\n\n# kayıp gözlemler (missing values)\ntail(is.na(data))\ntail(is.na(data$col5))\ndata[is.na(data$col5),] # col5 NA olan satılar\ndata[!is.na(data$col5),] # col5 NA olmayan satılar\n\nrowSums(is.na(data)) # satılardaki toplam kayıp gözlem sayısı\ncolSums(is.na(data)) # sütunlardaki toplam kayıp gözlem sayısı\nsum(is.na(data)) # tablodaki toplam kayıp gözlem sayısı\n\ncomplete.cases(data) # satırlarda eksik gözlemlerin durumu\ndata[complete.cases(data),]\ndata[!complete.cases(data),]\n\nna.omit(data) # NA olan satırları siler.\n\n```\n\n::: callout-tip\n## Not\n\n**`tibble`**, Hadley Wickham tarafından geliştirilen ve **`dplyr`** paketi ile sıkça kullanılan bir veri yapısıdır. **`tibble`**, **`data.frame`**'e benzerdir, ancak bazı önemli farklar vardır. **`tibble`**, daha düzenli ve okunabilir bir çıktı üretir ve bazı varsayılan davranışları **`data.frame`**'den farklıdır. Modern data.frame olarak tanımlanmaktadır.\n\n```{r}\n# tibble örneği\nlibrary(tibble)\n\nogrenciler_tibble <- tribble(\n  ~Ad,     ~Yas, ~Cinsiyet,\n  \"Ali\",   20,   \"Erkek\",\n  \"Ayşe\",  22,   \"Kadın\",\n  \"Mehmet\", 21,  \"Erkek\",\n  \"Zeynep\", 23,  \"Kadın\"\n)\n\n# tibble'ı görüntüleme\nprint(ogrenciler_tibble)\n\n```\n\nYukarıdaki örnekte, \"ogrenciler_tibble\" adında bir **`tibble`** oluşturuldu. **`tibble`**, sütun adlarını ve içeriği daha okunabilir bir şekilde görüntüler ve sütunların başlık ve veri tipi (**`~Ad`**, **`~Yas`**, **`~Cinsiyet`**) gibi özelliklerini korur.\n\nHem **`dataframe`** hem de **`tibble`** veri analizi ve işleme işlemlerinde kullanışlıdır. Hangi veri yapısını kullanacağınız, projenizin gereksinimlerine ve kişisel tercihinize bağlıdır. Özellikle veri analizi için **`dplyr`** gibi paketlerle çalışırken **`tibble`** tercih edilir.\n:::\n\n### Faktörler\n\n-   Faktörler, verileri kategorilere ayırmak ve düzeyler halinde depolamak için kullanılan veri nesneleridir. Hem karakter hem de tam sayıları depolayabilirler.\n\n-   \"Erkek,\"Kadın\" ve Doğru, Yanlış vb. gibi istatistiksel modelleme için veri analizinde faydalıdırlar.\n\n-   Faktörler, girdi olarak bir vektör alınarak **`factor()`** işlevi kullanılarak oluşturulur.\n\n```{r}\n\ndata <- c(rep(\"erkek\",5),rep(\"kadın\",7))\nprint(data)\nis.factor(data)\n\n# veriyi faktöre çevirme\nfactor_data <- factor(data)\n\nprint(factor_data)\nprint(is.factor(factor_data))\n\nas.numeric(factor_data)\n\n# data frame için vektörler oluşturalım\nboy <- c(132,151,162,139,166,147,122)\nkilo <- c(48,49,66,53,67,52,40)\ncinsiyet <- c(\"erkek\",\"erkek\",\"kadın\",\"kadın\",\"erkek\",\"kadın\",\"erkek\")\n\n# data frame\ndf <- data.frame(boy,kilo,cinsiyet)\nstr(df)\ndf$cinsiyet <- factor(cinsiyet)\nstr(df)\n\nprint(is.factor(df$cinsiyet))\n\n# cinsiyet kolononun seviyeleri\nprint(df$cinsiyet)\n\n# seviyelerin sırası değiştirilebilir.\n\ndf2 <- c(rep(\"düşük\",4),rep(\"orta\",5),rep(\"yüksek\",2))\n\nfactor_df2 <- factor(df2)\nprint(factor_df2)\n\norder_df2 <- factor(factor_df2,levels = c(\"yüksek\",\"orta\",\"düşük\"))\nprint(order_df2)\n\n# ordered=TRUE ile seviyelerin sıralı olduğu ifade edilir\norder_df2 <- factor(factor_df2,levels = c(\"yüksek\",\"orta\",\"düşük\"),ordered = TRUE)\nprint(order_df2)\n\n```\n","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"output-file":"data_types.html"},"language":{"toc-title-document":"İçindekiler","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Yazar","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.8.25","editor":"visual","theme":{"light":"sandstone","dark":"cyborg"}},"extensions":{"book":{"multiFile":true}}},"pdf":{"identifier":{"display-name":"PDF","target-format":"pdf","base-format":"pdf"},"execute":{"fig-width":5.5,"fig-height":3.5,"fig-format":"pdf","fig-dpi":300,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"pdf-engine":"lualatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","output-file":"data_types.pdf"},"language":{"toc-title-document":"İçindekiler","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Yazar","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"block-headings":true,"editor":"visual","documentclass":"scrreprt"},"extensions":{"book":{"selfContainedOutput":true}}}},"projectFormats":["html","pdf"]}