[
  {
    "objectID": "data_transformation.html",
    "href": "data_transformation.html",
    "title": "Veri Dönüştürme",
    "section": "",
    "text": "Uzun Format Dönüşümü - pivot_longer\nGeniş formatlı (wide format) veriyi uzun formatlı (long format) hale dönüştürmek için kullanılır. Her bir sütunun bir değişkeni temsil ettiği geniş formatlı veri setlerini, her bir gözlemi temsil eden uzun formatlı veri setlerine dönüştürmek için kullanılır.\npivot_longer(data, cols, names_to, values_to, names_prefix = NULL, names_sep = \"_\", names_pattern = NULL, ...)\nÇeşitli örnekler yapmak için billboard veri setini kullanalım. billboard veri seti, tidyr paketinde bulunan ve müzik endüstrisindeki popülerlik sıralamalarını içeren bir veri setidir. Veri seti, 1999-2000 yılları arasında Billboard Hot 100 listesindeki şarkıların haftalık sıralamalarını içerir. Her bir hafta için bir sütun bulunur ve bu sütunlar, o haftadaki şarkıların sıralamalarını içerir. Öncelikle veri setini inceleyelim.\nlibrary(tidyr)\nbillboard\n\n# A tibble: 317 × 79\n   artist     track date.entered   wk1   wk2   wk3   wk4   wk5   wk6   wk7   wk8\n   &lt;chr&gt;      &lt;chr&gt; &lt;date&gt;       &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1 2 Pac      Baby… 2000-02-26      87    82    72    77    87    94    99    NA\n 2 2Ge+her    The … 2000-09-02      91    87    92    NA    NA    NA    NA    NA\n 3 3 Doors D… Kryp… 2000-04-08      81    70    68    67    66    57    54    53\n 4 3 Doors D… Loser 2000-10-21      76    76    72    69    67    65    55    59\n 5 504 Boyz   Wobb… 2000-04-15      57    34    25    17    17    31    36    49\n 6 98^0       Give… 2000-08-19      51    39    34    26    26    19     2     2\n 7 A*Teens    Danc… 2000-07-08      97    97    96    95   100    NA    NA    NA\n 8 Aaliyah    I Do… 2000-01-29      84    62    51    41    38    35    35    38\n 9 Aaliyah    Try … 2000-03-18      59    53    38    28    21    18    16    14\n10 Adams, Yo… Open… 2000-08-26      76    76    74    69    68    67    61    58\n# ℹ 307 more rows\n# ℹ 68 more variables: wk9 &lt;dbl&gt;, wk10 &lt;dbl&gt;, wk11 &lt;dbl&gt;, wk12 &lt;dbl&gt;,\n#   wk13 &lt;dbl&gt;, wk14 &lt;dbl&gt;, wk15 &lt;dbl&gt;, wk16 &lt;dbl&gt;, wk17 &lt;dbl&gt;, wk18 &lt;dbl&gt;,\n#   wk19 &lt;dbl&gt;, wk20 &lt;dbl&gt;, wk21 &lt;dbl&gt;, wk22 &lt;dbl&gt;, wk23 &lt;dbl&gt;, wk24 &lt;dbl&gt;,\n#   wk25 &lt;dbl&gt;, wk26 &lt;dbl&gt;, wk27 &lt;dbl&gt;, wk28 &lt;dbl&gt;, wk29 &lt;dbl&gt;, wk30 &lt;dbl&gt;,\n#   wk31 &lt;dbl&gt;, wk32 &lt;dbl&gt;, wk33 &lt;dbl&gt;, wk34 &lt;dbl&gt;, wk35 &lt;dbl&gt;, wk36 &lt;dbl&gt;,\n#   wk37 &lt;dbl&gt;, wk38 &lt;dbl&gt;, wk39 &lt;dbl&gt;, wk40 &lt;dbl&gt;, wk41 &lt;dbl&gt;, wk42 &lt;dbl&gt;, …\nartist: Şarkının sanatçısının adı.\ntrack: Şarkının adı.\ndate.entered: Şarkının Billboard Hot 100 listesine girdiği tarih.\nwk1, wk2, …, wk76: Haftalık sıralama bilgilerini içeren sütunlar. Her bir sütun, bir haftaya ait sıralamaları içerir. Örneğin, wk1 sütunu, şarkının ilk haftadaki sıralamasını içerir.\nBu değişkenler, şarkıların sanatçıları, adları ve haftalık sıralamaları gibi bilgileri içerir. Veri setindeki haftalık sıralama sütunları, her bir hafta için şarkıların sıralamasını içerir. Bu sıralama bilgileri, her bir hafta için bir sütunda bulunur ve bu sütunlar “wk1”, “wk2”, …, “wk76” gibi adlarla temsil edilir.\nDikkat edilirse tablonun 317 satır ve 79 sütundan oluştuğu görülmektedir. Ayrıca hafta değişkenleri yatay olarak herbiri ayrı kolonlarda hafta numaraları ile belirtilmektedir. Şimdi bu verii uzun formata dönüştürerek daha kullanışlı bir formata dönüştürelim.\nbillboard_long &lt;- billboard |&gt; \n  pivot_longer(\n    cols = starts_with(\"wk\"), \n    names_to = \"week\", \n    values_to = \"rank\",\n    values_drop_na = TRUE\n  )\n\nbillboard_long\n\n# A tibble: 5,307 × 5\n   artist  track                   date.entered week   rank\n   &lt;chr&gt;   &lt;chr&gt;                   &lt;date&gt;       &lt;chr&gt; &lt;dbl&gt;\n 1 2 Pac   Baby Don't Cry (Keep... 2000-02-26   wk1      87\n 2 2 Pac   Baby Don't Cry (Keep... 2000-02-26   wk2      82\n 3 2 Pac   Baby Don't Cry (Keep... 2000-02-26   wk3      72\n 4 2 Pac   Baby Don't Cry (Keep... 2000-02-26   wk4      77\n 5 2 Pac   Baby Don't Cry (Keep... 2000-02-26   wk5      87\n 6 2 Pac   Baby Don't Cry (Keep... 2000-02-26   wk6      94\n 7 2 Pac   Baby Don't Cry (Keep... 2000-02-26   wk7      99\n 8 2Ge+her The Hardest Part Of ... 2000-09-02   wk1      91\n 9 2Ge+her The Hardest Part Of ... 2000-09-02   wk2      87\n10 2Ge+her The Hardest Part Of ... 2000-09-02   wk3      92\n# ℹ 5,297 more rows\nBu şekilde, pivot_longer fonksiyonu kullanılarak “wk” ile başlayan sütunlar uzun formata dönüştürülür ve her bir hafta için şarkı sıralamaları tek bir sütun altında toplanır. “week” sütunu, hafta numaralarını, “rank” sütunu ise şarkı sıralamalarını içerir.\ndim(billboard_long)\n\n[1] 5307    5\nUzun formata dönüştürüldükten sonra, her bir hafta için her bir şarkının sıralamasını içeren sütunlar tek bir sütun altında toplanır. Bu, sütun sayısının azaldığı anlamına gelirken, satır sayısının arttığı anlamına gelir. Dolayısıyla, tablo boyutunda bir değişiklik olur. Örneğin, başlangıçta her hafta için bir sütun vardı ve bu sütunlar “wk1”, “wk2”, …, “wk76” olarak adlandırılıyordu. Ancak uzun formata dönüştürdükten sonra, her bir şarkının her hafta için bir sıralama değeri içeren bir sütunu vardır. Bu, sütun sayısının arttığı ve satır sayısının da arttığı bir durumdur. Dolayısı ile uzun tablonun boyutu 5307 satır ve 5 kolondan oluşmaktadır.\nEğer veri setini daha düzenli hale getirmek amacıyla week kolonundaki değerlerin başındak wk ifadesini kaldırmak istersek aşağıdaki şekilde bir düzenleme yapabiliriz.\nbillboard |&gt; \n  pivot_longer(\n    cols = starts_with(\"wk\"), \n    names_to = \"week\", \n    names_transform = readr::parse_number,\n    values_to = \"rank\",\n    values_drop_na = TRUE,\n  )\n\n# A tibble: 5,307 × 5\n   artist  track                   date.entered  week  rank\n   &lt;chr&gt;   &lt;chr&gt;                   &lt;date&gt;       &lt;dbl&gt; &lt;dbl&gt;\n 1 2 Pac   Baby Don't Cry (Keep... 2000-02-26       1    87\n 2 2 Pac   Baby Don't Cry (Keep... 2000-02-26       2    82\n 3 2 Pac   Baby Don't Cry (Keep... 2000-02-26       3    72\n 4 2 Pac   Baby Don't Cry (Keep... 2000-02-26       4    77\n 5 2 Pac   Baby Don't Cry (Keep... 2000-02-26       5    87\n 6 2 Pac   Baby Don't Cry (Keep... 2000-02-26       6    94\n 7 2 Pac   Baby Don't Cry (Keep... 2000-02-26       7    99\n 8 2Ge+her The Hardest Part Of ... 2000-09-02       1    91\n 9 2Ge+her The Hardest Part Of ... 2000-09-02       2    87\n10 2Ge+her The Hardest Part Of ... 2000-09-02       3    92\n# ℹ 5,297 more rows\nBu kodda, pivot_longer fonksiyonunu kullanarak “wk” ile başlayan sütunları uzun formata dönüştürüyoruz. Ancak, bu sefer names_transform argümanını da kullanıyoruz. Bu argüman, sütun adlarından sayısal değerleri çıkarmak için readr::parse_number fonksiyonunu kullanır.\nnames_transform = readr::parse_number ifadesiyle, sütun adlarından “wk” ifadesini ve ardından gelen sayısal değerleri ayırıyoruz. Örneğin, “wk1”, “wk2”, …, “wk76” gibi sütun adlarından sadece sayısal kısmı alarak, her bir sütunun haftayı temsil etmesini sağlıyoruz. Böylelikle, uzun formata dönüşümü daha anlamlı hale getiriyoruz. Artık her bir sütun, hangi haftaya ait olduğunu temsil ederken, her bir satır bir şarkının o haftaki sıralamasını içerir. Bu sayede, veri seti daha düzenli hale gelir ve analizler için daha uygun hale gelir.",
    "crumbs": [
      "Veri Dönüştürme"
    ]
  },
  {
    "objectID": "data_transformation.html#uzun-format-dönüşümü---pivot_longer",
    "href": "data_transformation.html#uzun-format-dönüşümü---pivot_longer",
    "title": "Veri Dönüştürme",
    "section": "",
    "text": "Kullanım Alanları:\n\nÇapraz-tablo verilerini analiz etmek veya görselleştirmek için.\nİstatistiksel analizlerde veri hazırlığı sürecinde, bazı modellere uygun hale getirmek için.\nVeri setindeki değişkenlerin (sütunların) gruplandırılması veya kategorize edilmesi gerektiğinde.\n\n\n\n\ndata: İşlem yapılacak olan veri seti.\ncols: Uzun formatlı hale dönüştürülecek sütunların belirtilmesi.\nnames_to: Yeni oluşturulacak sütunun adı.\nvalues_to: Sütun içerisindeki değerlerin yer alacağı sütunun adı.\nDiğer argümanlar, isteğe bağlı olarak sütun adlarının belirtilmesi için kullanılır.\n\n\n\n\n\n\n\n\n\n\n\nbillboard |&gt;: Bu ifade, “billboard” veri setini işlemek üzere bir dizi dplyr fonksiyonuna (veya tidyverse fonksiyonuna) zincirlenmiş bir işlem başlatır. |&gt; operatörü, bir işlemin çıktısını bir sonraki işlemin ilk argümanı olarak kullanmamızı sağlar.\npivot_longer(): Bu fonksiyon, veri setindeki sütunları uzun formata dönüştürmek için kullanılır. Yani, sütunları satırlara dönüştürür. Bu örnekte, pivot_longer fonksiyonu kullanılarak sütunlar uzun formata dönüştürülecektir.\ncols = starts_with(\"wk\"): pivot_longer fonksiyonunun ilk argümanı olan cols, dönüştürülecek sütunların seçimini belirler. Bu durumda, “wk” ile başlayan sütunlar seçilir. “wk” ile başlayan sütunlar, haftalık müzik sıralamalarını içerir.\nnames_to = \"week\": pivot_longer fonksiyonunun ikinci argümanı olan names_to, dönüştürülen sütunların isimlerinin atanacağı yeni sütunun adını belirler. Bu durumda, dönüştürülen sütunların isimleri “week” olarak atanacaktır.\nvalues_to = \"rank\": pivot_longer fonksiyonunun üçüncü argümanı olan values_to, dönüştürülen sütunlardaki değerlerin atanacağı yeni sütunun adını belirler. Bu durumda, dönüştürülen sütunlardaki değerler “rank” olarak atanacaktır.\nvalues_drop_na = TRUE: Bu parametre, dönüştürülen sütunlardaki NA değerlerin (boş hücrelerin) kaldırılıp kaldırılmayacağını belirler. TRUE olarak ayarlandığında, NA değerler kaldırılır. Bu, dönüştürülen sütunlardaki eksik değerlerin işlenme şeklini kontrol eder. Bu örnekte, NA değerler kaldırılarak işlenir.\n\n\n\n\n\n\n\n\n\n\nÖnemli\n\n\n\nEğer values_drop_na = TRUE argümanında FALSE değerini kullansaydık daha fazla satır sayısına sahip bir sonuç elde ederdik.\n\nbillboard_long_with_na &lt;- billboard |&gt; \n  pivot_longer(\n    cols = starts_with(\"wk\"), \n    names_to = \"week\", \n    values_to = \"rank\",\n    values_drop_na = FALSE\n  )\n\ndim(billboard_long_with_na)\n\n[1] 24092     5\n\n\nBu şekilde üretilen tablonu satır sayısına baktığımızda 24092 satır olduğunu görürüz. Bu aslında başlangıçta yer alan 317 satırın 76 hafta verisi (wk ile başlayan 76 hafta olduğundan) ile tekrarlaması anlamına gelir. Doğal olarak 317 * 76 = 24092 satır sayısı ortaya çıkar ve wk ile başlamayan sütunlar da tekrar ederek satırlarda oluşur.\n\n\n\n\n\n\n\n\n\n\n\n\nAlternatif Yol\n\n\n\nBu amaçla aşağıdaki kod da benzer işi yapmaktadır.\n\nbillboard |&gt; \n  pivot_longer(\n    cols = starts_with(\"wk\"), \n    names_to = \"week\", \n    names_prefix = \"wk\",   # Her bir değişken adının başından \"wk\" metni kaldırır\n    names_transform = as.integer,   # Sütun adlarından sayısal değerleri alır\n    values_to = \"rank\",\n    values_drop_na = TRUE,\n  )\n\n# A tibble: 5,307 × 5\n   artist  track                   date.entered  week  rank\n   &lt;chr&gt;   &lt;chr&gt;                   &lt;date&gt;       &lt;int&gt; &lt;dbl&gt;\n 1 2 Pac   Baby Don't Cry (Keep... 2000-02-26       1    87\n 2 2 Pac   Baby Don't Cry (Keep... 2000-02-26       2    82\n 3 2 Pac   Baby Don't Cry (Keep... 2000-02-26       3    72\n 4 2 Pac   Baby Don't Cry (Keep... 2000-02-26       4    77\n 5 2 Pac   Baby Don't Cry (Keep... 2000-02-26       5    87\n 6 2 Pac   Baby Don't Cry (Keep... 2000-02-26       6    94\n 7 2 Pac   Baby Don't Cry (Keep... 2000-02-26       7    99\n 8 2Ge+her The Hardest Part Of ... 2000-09-02       1    91\n 9 2Ge+her The Hardest Part Of ... 2000-09-02       2    87\n10 2Ge+her The Hardest Part Of ... 2000-09-02       3    92\n# ℹ 5,297 more rows\n\n\nBu kod parçası öncekiyle benzer bir dönüşüm gerçekleştiriyor ancak birkaç farklılık bulunuyor.\n\nnames_prefix = \"wk\" : Bu argüman her bir değişken adının başından “wk” metni kaldırır. Yani, “wk1”, “wk2”, …, “wk76” gibi sütun adlarından “wk” metni kaldırılır. Bu, her bir sütunun hangi haftaya ait olduğunu temsil eden sayısal değerlerin elde edilmesini sağlar.\nnames_transform = as.integer: Bu argüman, sütun adlarından sayısal değerleri almak için as.integer fonksiyonunu kullanır. Önceki örnekte olduğu gibi, sütun adlarından sayıları alırken bu sefer as.integer fonksiyonunu kullanarak sayıları dönüştürürüz.\n\nBu dönüşüm, önceki örnekle benzerdir ancak sütun adlarının öne eklenmesi ve sayısal dönüşümün yapıldığı yerdeki farklılıklar dikkate alınmalıdır. Bu farklılıklar, dönüşüm sonucunda elde edilen uzun formatlı veri setinin nasıl yapılandırıldığına ve nasıl yorumlanacağına etki edebilir.",
    "crumbs": [
      "Veri Dönüştürme"
    ]
  },
  {
    "objectID": "data_transformation.html#geniş-format-dönüşümü---pivot_wider",
    "href": "data_transformation.html#geniş-format-dönüşümü---pivot_wider",
    "title": "Veri Dönüştürme",
    "section": "Geniş Format Dönüşümü - pivot_wider",
    "text": "Geniş Format Dönüşümü - pivot_wider\nUzun formatlı (long format) veriyi geniş formatlı (wide format) hale dönüştürmek için kullanılır. Her bir gözlemi temsil eden uzun formatlı veri setlerini, her bir sütunun bir değişkeni temsil ettiği geniş formatlı veri setlerine dönüştürmek için kullanılır.\n\nKullanım Alanları:\n\nÇapraz-tablo verilerini oluşturmak için.\nUzun formatlı veri setlerini daha okunabilir ve anlamlı bir şekilde görselleştirmek için.\nVeri setindeki bazı grupların veya kategorilerin karşılaştırılması için.\n\n\n\npivot_wider(data, names_from, values_from, values_fn = list, values_fill = list(), names_prefix = NULL, names_sep = \"_\", names_repair = \"check_unique\", id_cols = NULL, values_fn_args = list(), ...)\n\n\ndata: İşlem yapılacak olan veri seti.\nnames_from: Geniş formatlı hale dönüştürülecek olan sütunların adı.\nvalues_from: Yeni sütunlara değerlerin alınacağı sütunun adı.\nDiğer argümanlar, isteğe bağlı olarak sütun adlarının belirtilmesi ve eksik değerlerin doldurulması için kullanılır.\n\nBu fonksiyon ile bazı örnekler yapmak için tidyr paketindeki us_rent_income veri setini kullanabiliriz. Veri seti 2017 yılına ait American Community Survey ile edilmiştir. Bu araştırma Amerika Birleşik Devletleri’nde federal hükümet tarafından her yıl gerçekleştirilen bir nüfus sayımı ve sosyo-ekonomik anket programıdır. Bu anket, Amerika’nın demografik ve ekonomik özellikleri hakkında geniş kapsamlı veriler sağlar.\n\nus_rent_income\n\n# A tibble: 104 × 5\n   GEOID NAME       variable estimate   moe\n   &lt;chr&gt; &lt;chr&gt;      &lt;chr&gt;       &lt;dbl&gt; &lt;dbl&gt;\n 1 01    Alabama    income      24476   136\n 2 01    Alabama    rent          747     3\n 3 02    Alaska     income      32940   508\n 4 02    Alaska     rent         1200    13\n 5 04    Arizona    income      27517   148\n 6 04    Arizona    rent          972     4\n 7 05    Arkansas   income      23789   165\n 8 05    Arkansas   rent          709     5\n 9 06    California income      29454   109\n10 06    California rent         1358     3\n# ℹ 94 more rows\n\n\nVeri setinde 104 satır ve 5 sütun bulunmaktadır.\n\nGEOID: Bu değişken, Amerika Birleşik Devletleri’ndeki belirli bir coğrafi alanın benzersiz kimlik numarasını içerir. FIP state identifier olarak bilinen bu değişken, Amerika Birleşik Devletleri’ndeki bir eyaletin Federal Bilgi İşlem Standartları (FIPS) kodunu içerir.\nNAME: Bu değişken, eyaletin veya coğrafi bölgenin adını içerir.\nvariable: Bu değişken, veri setinde ölçülen değişkenin adını belirtir. İki farklı değer alabilir: “income” (ortalama yıllık gelir) veya “rent” (ortalama aylık kira).\nestimate: Bu değişken, belirli bir coğrafi alandaki tahmini değeri içerir. Örneğin, belirli bir eyalet için ortalama yıllık gelir veya ortalama aylık kira miktarı gibi.\nmoe: Bu değişken, tahmini değerin 90% güven aralığı içindeki marj hatasını (margin of error) içerir. Marj hatası, tahmini değerin gerçek değerden ne kadar sapabileceğini gösterir. Bu, tahminin güvenilirliğini değerlendirmeye yardımcı olur.\n\n\nus_rent_income |&gt; \n  pivot_wider(\n    names_from = variable,\n    values_from = c(estimate, moe)\n  )\n\n# A tibble: 52 × 6\n   GEOID NAME                 estimate_income estimate_rent moe_income moe_rent\n   &lt;chr&gt; &lt;chr&gt;                          &lt;dbl&gt;         &lt;dbl&gt;      &lt;dbl&gt;    &lt;dbl&gt;\n 1 01    Alabama                        24476           747        136        3\n 2 02    Alaska                         32940          1200        508       13\n 3 04    Arizona                        27517           972        148        4\n 4 05    Arkansas                       23789           709        165        5\n 5 06    California                     29454          1358        109        3\n 6 08    Colorado                       32401          1125        109        5\n 7 09    Connecticut                    35326          1123        195        5\n 8 10    Delaware                       31560          1076        247       10\n 9 11    District of Columbia           43198          1424        681       17\n10 12    Florida                        25952          1077         70        3\n# ℹ 42 more rows\n\n\nBu kod, us_rent_income veri setini pivot_wider() fonksiyonu ile veri setindeki uzun formattan geniş formata dönüştürmeye olanak tanır.\n\nnames_from = variable: Bu argüman, genişletilecek sütunların isimlerini belirtir. Burada variable değişkeni kullanılarak genişletilecek sütunlar belirlenir. Bu durumda, variable değişkenindeki değerler (income ve rent) sütun adlarına dönüştürülecek.\nvalues_from = c(estimate, moe): Bu argüman, yeni genişletilmiş sütunların değerlerinin hangi sütunlardan alınacağını belirtir. estimate ve moe sütunlarındaki değerler, genişletilmiş sütunların içeriğini oluşturur.\n\nSonuç olarak, bu kod us_rent_income veri setini income_estimate, income_moe, rent_estimate ve rent_moe olmak üzere dört yeni sütun içeren bir geniş formatlı veri setine dönüştürür.\nDikkat edilirse değişken isimlerinin arasına \"_\" ifadesi konmuştur. Bu ifadenin gelmesinin sebebi, pivot_wider() fonksiyonunda kullanılan names_sep parametresinin varsayılan değerinin \"_\" olmasından kaynaklıdır. Eğer names_sep parametresi belirtilmezse değişken isimlerinin arasında \"_\" kullanılır.\nBu nedenle, values_from = c(estimate, moe) ifadesindeki estimate ve moe sütunları, genişletilmiş sütunların adlarında alt çizgi ile ayrılır. Sonuç olarak, yeni oluşturulan sütunlar income_estimate, income_moe, rent_estimate ve rent_moe adlarına sahip olur. Eğer \"_\" yerine \".\" (nokta) koymak istersek kodu aşağıdaki şekilde güncellememiz gerekir.\n\nus_rent_income |&gt; \n  pivot_wider(\n    names_from = variable,\n    values_from = c(estimate, moe),\n    names_sep = \".\"\n  )\n\n# A tibble: 52 × 6\n   GEOID NAME                 estimate.income estimate.rent moe.income moe.rent\n   &lt;chr&gt; &lt;chr&gt;                          &lt;dbl&gt;         &lt;dbl&gt;      &lt;dbl&gt;    &lt;dbl&gt;\n 1 01    Alabama                        24476           747        136        3\n 2 02    Alaska                         32940          1200        508       13\n 3 04    Arizona                        27517           972        148        4\n 4 05    Arkansas                       23789           709        165        5\n 5 06    California                     29454          1358        109        3\n 6 08    Colorado                       32401          1125        109        5\n 7 09    Connecticut                    35326          1123        195        5\n 8 10    Delaware                       31560          1076        247       10\n 9 11    District of Columbia           43198          1424        681       17\n10 12    Florida                        25952          1077         70        3\n# ℹ 42 more rows\n\n\nBaşka dikkat edilecek bir husus ise, değişken isminin önce variable değişkeninden gelmesi ve sonrasında değer ile ilgli kısımdan gelerek birleştirilmesidir. Örneğin \"estimate.income\" isminin noktadan önceki kısmı variable değişkeninden, sonraki kısmı ise income değişken isminden gelmektedir. Arzu edilirse bu durumun tersi de yapılabilir.\n\nus_rent_income |&gt; \n  pivot_wider(\n    names_from = variable,\n    names_glue = \"{variable}_{.value}\",\n    values_from = c(estimate, moe)\n  )\n\n# A tibble: 52 × 6\n   GEOID NAME                 income_estimate rent_estimate income_moe rent_moe\n   &lt;chr&gt; &lt;chr&gt;                          &lt;dbl&gt;         &lt;dbl&gt;      &lt;dbl&gt;    &lt;dbl&gt;\n 1 01    Alabama                        24476           747        136        3\n 2 02    Alaska                         32940          1200        508       13\n 3 04    Arizona                        27517           972        148        4\n 4 05    Arkansas                       23789           709        165        5\n 5 06    California                     29454          1358        109        3\n 6 08    Colorado                       32401          1125        109        5\n 7 09    Connecticut                    35326          1123        195        5\n 8 10    Delaware                       31560          1076        247       10\n 9 11    District of Columbia           43198          1424        681       17\n10 12    Florida                        25952          1077         70        3\n# ℹ 42 more rows\n\n\nnames_glue parametresi, sütun adlarını oluşturmak için bir şablon sağlar. {variable}_{.value} ifadesi, yeni oluşturulan sütunların adlarını belirler. {variable} değişkenin adını, .value ise genişletilen değerlerin adını temsil eder. Örneğin, income_estimate, income_moe, rent_estimate ve rent_moe sütunlarına denk gelir.\nYapacağımız diğer bir örnek ise veri setinde olmayan bir durum olduğunda boş gelebilecek gözlemlere ne işlem yapılacağıdır. Örneğin veri setinin ilk satırındaki Alabama eyaletine ilişkin income verilerinin hiç olmadığını varsayalım.\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nus_rent_income |&gt; \n  slice(-1) # ilk gözlem haricindeki satırlar seçilir\n\n# A tibble: 103 × 5\n   GEOID NAME       variable estimate   moe\n   &lt;chr&gt; &lt;chr&gt;      &lt;chr&gt;       &lt;dbl&gt; &lt;dbl&gt;\n 1 01    Alabama    rent          747     3\n 2 02    Alaska     income      32940   508\n 3 02    Alaska     rent         1200    13\n 4 04    Arizona    income      27517   148\n 5 04    Arizona    rent          972     4\n 6 05    Arkansas   income      23789   165\n 7 05    Arkansas   rent          709     5\n 8 06    California income      29454   109\n 9 06    California rent         1358     3\n10 08    Colorado   income      32401   109\n# ℹ 93 more rows\n\n\nBu durumda veri setinin geniş formata dönüştürmek istersek income değişkenleri kayıp gözlem yani NA olarak değerlendirilir.\n\nus_rent_income |&gt; \n  slice(-1) |&gt; \n  pivot_wider(\n    names_from = variable,\n    values_from = c(estimate,moe),\n    \n  )\n\n# A tibble: 52 × 6\n   GEOID NAME                 estimate_rent estimate_income moe_rent moe_income\n   &lt;chr&gt; &lt;chr&gt;                        &lt;dbl&gt;           &lt;dbl&gt;    &lt;dbl&gt;      &lt;dbl&gt;\n 1 01    Alabama                        747              NA        3         NA\n 2 02    Alaska                        1200           32940       13        508\n 3 04    Arizona                        972           27517        4        148\n 4 05    Arkansas                       709           23789        5        165\n 5 06    California                    1358           29454        3        109\n 6 08    Colorado                      1125           32401        5        109\n 7 09    Connecticut                   1123           35326        5        195\n 8 10    Delaware                      1076           31560       10        247\n 9 11    District of Columbia          1424           43198       17        681\n10 12    Florida                       1077           25952        3         70\n# ℹ 42 more rows\n\n\nEğer bu şekilde oluşan gözlemlere değer atamak istersek values_fill argümanını kullanabiliriz. Örneğin bu şekilde oluşan bir durumda NA değerlere 0 değerini atanmasını varsayalım. Aşağıki kod ile bunu gerçekleştirebiliriz.\n\nus_rent_income |&gt; \n  slice(-1) |&gt; \n  pivot_wider(\n    names_from = variable,\n    values_from = c(estimate,moe),\n    values_fill = 0\n  )\n\n# A tibble: 52 × 6\n   GEOID NAME                 estimate_rent estimate_income moe_rent moe_income\n   &lt;chr&gt; &lt;chr&gt;                        &lt;dbl&gt;           &lt;dbl&gt;    &lt;dbl&gt;      &lt;dbl&gt;\n 1 01    Alabama                        747               0        3          0\n 2 02    Alaska                        1200           32940       13        508\n 3 04    Arizona                        972           27517        4        148\n 4 05    Arkansas                       709           23789        5        165\n 5 06    California                    1358           29454        3        109\n 6 08    Colorado                      1125           32401        5        109\n 7 09    Connecticut                   1123           35326        5        195\n 8 10    Delaware                      1076           31560       10        247\n 9 11    District of Columbia          1424           43198       17        681\n10 12    Florida                       1077           25952        3         70\n# ℹ 42 more rows\n\n\n\n\n\n\n\n\nDikkat\n\n\n\nOrijinal veri setindeki eksik değerlerin zaten NA olduğu durumda values_fill kullanmak işe yaramaz. Çünkü mevcut durumda zaten veri setinde NA gözlem bulunmaktadır. values_fill dönüşüm sonrası oluşabilecek NA gözlemler için kullanılır.\nBu nedenle, values_fill parametresi yerine R içerisinde farklı opsiyonlar ile tüm NA değerlerini doldurmak daha uygun olacaktır. Yani, boş hücrelerin tümünü 0 ile doldurmak için values_fill parametresi kullanılmaz.",
    "crumbs": [
      "Veri Dönüştürme"
    ]
  },
  {
    "objectID": "data_transformation.html#değişken-birleştirme---unite",
    "href": "data_transformation.html#değişken-birleştirme---unite",
    "title": "Veri Dönüştürme",
    "section": "Değişken Birleştirme - unite",
    "text": "Değişken Birleştirme - unite\nBelirli sütunlardaki değerleri birleştirerek yeni bir sütun oluşturmak için kullanılır. Genellikle, ayrı sütunlarda bulunan bilgileri birleştirerek yeni bir kategorik değişken oluşturmak için kullanılır.\n\nKullanım Alanları:\n\nBirden fazla sütundaki bilgileri tek bir değişkende birleştirme.\nTarih ve saat gibi bilgileri tek bir sütunda birleştirme.\n\n\n\nunite(data, col, ..., sep = \"_\", remove = TRUE)\n\n\ndata: İşlem yapılacak olan veri seti.\ncol: Birleştirilen sütunun adı.\n...: Birleştirilecek olan sütunların adları.\nsep: Birleştirme işlemi sırasında kullanılacak ayırıcı karakter.\nremove: Orijinal sütunları kaldırma veya koruma seçeneği.\n\n\nadresler &lt;- tibble(\n  sokak = c(\"Örnek Sokak\", \"Şehitler Caddesi\", \"Atatürk Bulvarı\"),\n  mahalle = c(\"Merkez\", \"Güneşli\", \"Bahçelievler\"),\n  ilce = c(\"Çankaya\", \"Bağcılar\", \"Üsküdar\"),\n  sehir = c(\"Ankara\", \"İstanbul\", \"İstanbul\"),\n  posta_kodu = c(\"06000\", \"34100\", \"34662\")\n)\n\nadresler\n\n# A tibble: 3 × 5\n  sokak            mahalle      ilce     sehir    posta_kodu\n  &lt;chr&gt;            &lt;chr&gt;        &lt;chr&gt;    &lt;chr&gt;    &lt;chr&gt;     \n1 Örnek Sokak      Merkez       Çankaya  Ankara   06000     \n2 Şehitler Caddesi Güneşli      Bağcılar İstanbul 34100     \n3 Atatürk Bulvarı  Bahçelievler Üsküdar  İstanbul 34662     \n\nadresler_unite &lt;- adresler %&gt;%\n  unite(adres, sokak, mahalle, ilce, sehir, posta_kodu, sep = \", \")\n\nadresler_unite\n\n# A tibble: 3 × 1\n  adres                                                  \n  &lt;chr&gt;                                                  \n1 Örnek Sokak, Merkez, Çankaya, Ankara, 06000            \n2 Şehitler Caddesi, Güneşli, Bağcılar, İstanbul, 34100   \n3 Atatürk Bulvarı, Bahçelievler, Üsküdar, İstanbul, 34662\n\n\nBu kod, adres bileşenlerini her birinin arasına \",\" koyarak birleştirir ve “adres” sütununu oluşturur. Varsayılan olarak, remove = TRUE olduğundan, unite() fonksiyonu, birleştirilen sütunları oluşturduktan sonra orijinal sütunları kaldırır. Eğer remove = FALSE olarak ayarlanırsa, unite() fonksiyonu, birleştirilen sütunları oluştururken orijinal sütunları kaldırmaz. Bu durumda, hem birleştirilen sütunlar hem de orijinal sütunlar veri setinde kalır.",
    "crumbs": [
      "Veri Dönüştürme"
    ]
  },
  {
    "objectID": "data_transformation.html#değişken-bölme--separate",
    "href": "data_transformation.html#değişken-bölme--separate",
    "title": "Veri Dönüştürme",
    "section": "Değişken Bölme- separate",
    "text": "Değişken Bölme- separate\nBir sütundaki değerleri belirli bir ayırıcıya göre parçalayarak yeni sütunlar oluşturmak için kullanılır. Genellikle, tek bir sütunda bulunan bilgileri ayrı ayrı sütunlara bölmek için kullanılır.\n\nKullanım Alanları:\n\nTek bir sütundaki bilgileri ayrı ayrı sütunlara bölmek.\nTarih, saat veya adres gibi bilgileri ayrı sütunlara bölmek.\n\n\n\nseparate(data, col, into, sep = \"[^[:alnum:]]+\", remove = TRUE, convert = FALSE, extra = \"warn\", fill = \"warn\")\n\n\ndata: İşlem yapılacak olan veri seti.\ncol: Parçalanacak olan sütunun adı.\ninto: Oluşturulacak yeni sütunların adları.\nsep: Parçalama işlemi sırasında kullanılacak ayırıcı karakter.\nDiğer argümanlar, isteğe bağlı olarak sütunların türünün dönüştürülmesi ve eksik değerlerin doldurulması için kullanılır.\n\n\nseparate(adresler_unite, adres, into = c(\"sokak\", \"mahalle\",\"ilce\",\"sehir\",\"posta_kodu\"), sep = \",\")\n\n# A tibble: 3 × 5\n  sokak            mahalle         ilce        sehir       posta_kodu\n  &lt;chr&gt;            &lt;chr&gt;           &lt;chr&gt;       &lt;chr&gt;       &lt;chr&gt;     \n1 Örnek Sokak      \" Merkez\"       \" Çankaya\"  \" Ankara\"   \" 06000\"  \n2 Şehitler Caddesi \" Güneşli\"      \" Bağcılar\" \" İstanbul\" \" 34100\"  \n3 Atatürk Bulvarı  \" Bahçelievler\" \" Üsküdar\"  \" İstanbul\" \" 34662\"  \n\n\nÖnceki bölümde oluşturduğumuz birleşik adres sütunu, bu kod ile bileşenlerine ayrıştırılmaktadır.",
    "crumbs": [
      "Veri Dönüştürme"
    ]
  },
  {
    "objectID": "data_transformation.html#join",
    "href": "data_transformation.html#join",
    "title": "Veri Dönüştürme",
    "section": "join",
    "text": "join\n\n\n\n\n\nR programlama dilinde dplyr paketinde bulunan left_join(), right_join(), inner_join(), ve full_join() gibi fonksiyonlar, veri çerçeveleri veya veri tabloları arasında birleştirme (join) işlemleri yapmak için kullanılır. Bu fonksiyonlar, farklı veri kaynaklarını birleştirmenizi veya ilişkilendirmenizi sağlar.\nleft_join() fonksiyonu, sol veri çerçevesi ile sağ veri çerçevesi arasında birleştirme işlemi yapar ve sol veri çerçevesindeki tüm gözlemleri korur. Eğer sağ veri çerçevesinde eşleşen gözlem yoksa, NA değerleri ile doldurulur.\n\nveri1 &lt;- data.frame(\n  Oğrenci = c(\"Ali\", \"Esra\", \"Osman\"),\n  Puan1 = c(90, 85, 78)\n)\n\nveri2 &lt;- data.frame(\n  Oğrenci = c(\"Ali\", \"Derya\", \"Merve\"),\n  Puan2 = c(88, 92, 85)\n)\n\nbirlesik_veri &lt;- left_join(veri1, veri2, by = \"Oğrenci\")\n\nprint(birlesik_veri)\n\n  Oğrenci Puan1 Puan2\n1     Ali    90    88\n2    Esra    85    NA\n3   Osman    78    NA\n\n\nBu kod, “Öğrenci” sütununa göre iki veri çerçevesini birleştirir. Sol veri çerçevesi (veri1) tüm gözlemleri içerir ve sağ veri çerçevesinde (veri2) eşleşen değerler varsa birleştirir.\nright_join() fonksiyonu, left_join() ile benzerdir, ancak sağ veri çerçevesindeki tüm gözlemleri korur. Eğer sol veri çerçevesinde eşleşen gözlem yoksa, NA değerleri ile doldurulur.\n\nbirlesik_veri &lt;- right_join(veri1, veri2, by = \"Oğrenci\")\n\nprint(birlesik_veri)\n\n  Oğrenci Puan1 Puan2\n1     Ali    90    88\n2   Derya    NA    92\n3   Merve    NA    85\n\n\nBu kod, sağ veri çerçevesi (veri2) tüm gözlemleri içerir ve sol veri çerçevesinde (veri1) eşleşen değerler varsa birleştirir.\ninner_join() fonksiyonu, sol ve sağ veri çerçeveleri arasında iç birleştirme yapar ve yalnızca ortak gözlemleri korur. Ortak gözlemleri içermeyen diğer gözlemleri atar.\n\nbirlesik_veri &lt;- inner_join(veri1, veri2, by = \"Oğrenci\")\n\nprint(birlesik_veri)\n\n  Oğrenci Puan1 Puan2\n1     Ali    90    88\n\n\nBu kod, sadece sol ve sağ veri çerçevelerinde (veri1 ve veri2) ortak olan gözlemleri korur.\nfull_join() fonksiyonu, sol ve sağ veri çerçeveleri arasında tam birleştirme yapar ve tüm gözlemleri korur. Ortak olmayan değerler NA ile doldurulur.\n\nbirlesik_veri &lt;- full_join(veri1, veri2, by = \"Oğrenci\")\n\nprint(birlesik_veri)\n\n  Oğrenci Puan1 Puan2\n1     Ali    90    88\n2    Esra    85    NA\n3   Osman    78    NA\n4   Derya    NA    92\n5   Merve    NA    85\n\n\nBu kod, sol ve sağ veri çerçevelerini (veri1 ve veri2) tamamen birleştirir ve tüm gözlemleri içerir.\n\n\n\n\n\n\nNot\n\n\n\nBu dört join fonksiyonu, farklı veri kaynaklarını birleştirme işlemlerinde kullanılır ve veri analizi sürecinde verileri daha kapsamlı bir şekilde incelemek için oldukça kullanışlıdır. Hangi join işleminin kullanılacağı, veri yapısına ve ihtiyaca bağlı olarak değişebilir.",
    "crumbs": [
      "Veri Dönüştürme"
    ]
  },
  {
    "objectID": "data_manipulation.html",
    "href": "data_manipulation.html",
    "title": "Veri Manipulasyonu",
    "section": "",
    "text": "Değişken Seçme - select\nTabloyu (veri çerçevesi) seçmek ve dönüştürmek için R’da dplyr paketinde bulunan select() fonksiyonu oldukça kullanışlıdır. Bu fonksiyon, belirli sütunları seçmek veya sütun adlarını değiştirmek için kullanılır. select() fonksiyonunu kullanarak veri çerçevesinde sütunları seçme ve dönüştürme işlemlerinin nasıl yapıldığına dair aşağıda örnekler mevcuttur.\n# belirli sütunları seçmek\ncounties %&gt;%\nselect(state, county, population, unemployment)\n\n# A tibble: 3,138 × 4\n   state   county   population unemployment\n   &lt;chr&gt;   &lt;chr&gt;         &lt;dbl&gt;        &lt;dbl&gt;\n 1 Alabama Autauga       55221          7.6\n 2 Alabama Baldwin      195121          7.5\n 3 Alabama Barbour       26932         17.6\n 4 Alabama Bibb          22604          8.3\n 5 Alabama Blount        57710          7.7\n 6 Alabama Bullock       10678         18  \n 7 Alabama Butler        20354         10.9\n 8 Alabama Calhoun      116648         12.3\n 9 Alabama Chambers      34079          8.9\n10 Alabama Cherokee      26008          7.9\n# ℹ 3,128 more rows\n\n# belli aralıkta bütün sütunların seçilmesi\ncounties %&gt;%\nselect(state, county, drive:work_at_home)\n\n# A tibble: 3,138 × 8\n   state   county   drive carpool transit  walk other_transp work_at_home\n   &lt;chr&gt;   &lt;chr&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;        &lt;dbl&gt;\n 1 Alabama Autauga   87.5     8.8     0.1   0.5          1.3          1.8\n 2 Alabama Baldwin   84.7     8.8     0.1   1            1.4          3.9\n 3 Alabama Barbour   83.8    10.9     0.4   1.8          1.5          1.6\n 4 Alabama Bibb      83.2    13.5     0.5   0.6          1.5          0.7\n 5 Alabama Blount    84.9    11.2     0.4   0.9          0.4          2.3\n 6 Alabama Bullock   74.9    14.9     0.7   5            1.7          2.8\n 7 Alabama Butler    84.5    12.4     0     0.8          0.6          1.7\n 8 Alabama Calhoun   85.3     9.4     0.2   1.2          1.2          2.7\n 9 Alabama Chambers  85.1    11.9     0.2   0.3          0.4          2.1\n10 Alabama Cherokee  83.9    12.1     0.2   0.6          0.7          2.5\n# ℹ 3,128 more rows\n\n# belirli bir ifadeyi içeren sütunları seçmek\ncounties %&gt;%\nselect(state, county, contains(\"employed\"))\n\n# A tibble: 3,138 × 4\n   state   county   employed self_employed\n   &lt;chr&gt;   &lt;chr&gt;       &lt;dbl&gt;         &lt;dbl&gt;\n 1 Alabama Autauga     23986           5.5\n 2 Alabama Baldwin     85953           5.8\n 3 Alabama Barbour      8597           7.3\n 4 Alabama Bibb         8294           6.7\n 5 Alabama Blount      22189           4.2\n 6 Alabama Bullock      3865           5.4\n 7 Alabama Butler       7813           6.2\n 8 Alabama Calhoun     47401           5  \n 9 Alabama Chambers    13689           2.8\n10 Alabama Cherokee    10155           7.9\n# ℹ 3,128 more rows\n\n# belirli bir ifade ile başyalan sütunları seçmek\ncounties %&gt;%\nselect(state, county, starts_with(\"income\"))\n\n# A tibble: 3,138 × 6\n   state   county   income income_err income_per_cap income_per_cap_err\n   &lt;chr&gt;   &lt;chr&gt;     &lt;dbl&gt;      &lt;dbl&gt;          &lt;dbl&gt;              &lt;dbl&gt;\n 1 Alabama Autauga   51281       2391          24974               1080\n 2 Alabama Baldwin   50254       1263          27317                711\n 3 Alabama Barbour   32964       2973          16824                798\n 4 Alabama Bibb      38678       3995          18431               1618\n 5 Alabama Blount    45813       3141          20532                708\n 6 Alabama Bullock   31938       5884          17580               2055\n 7 Alabama Butler    32229       1793          18390                714\n 8 Alabama Calhoun   41703        925          21374                489\n 9 Alabama Chambers  34177       2949          21071               1366\n10 Alabama Cherokee  36296       1710          21811               1556\n# ℹ 3,128 more rows\n\n# belirli bir ifade ile biten sütunları seçmek\ncounties %&gt;%\nselect(state, county, ends_with(\"work\"))\n\n# A tibble: 3,138 × 5\n   state   county   private_work public_work family_work\n   &lt;chr&gt;   &lt;chr&gt;           &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;\n 1 Alabama Autauga          73.6        20.9         0  \n 2 Alabama Baldwin          81.5        12.3         0.4\n 3 Alabama Barbour          71.8        20.8         0.1\n 4 Alabama Bibb             76.8        16.1         0.4\n 5 Alabama Blount           82          13.5         0.4\n 6 Alabama Bullock          79.5        15.1         0  \n 7 Alabama Butler           77.4        16.2         0.2\n 8 Alabama Calhoun          74.1        20.8         0.1\n 9 Alabama Chambers         85.1        12.1         0  \n10 Alabama Cherokee         73.1        18.5         0.5\n# ℹ 3,128 more rows\n\n# belirli sütunları hariç tutarak seçmek\ncounties %&gt;%\nselect(census_id:population,-c(men:land_area))\n\n# A tibble: 3,138 × 6\n   census_id state   county   region metro    population\n   &lt;chr&gt;     &lt;chr&gt;   &lt;chr&gt;    &lt;chr&gt;  &lt;chr&gt;         &lt;dbl&gt;\n 1 1001      Alabama Autauga  South  Metro         55221\n 2 1003      Alabama Baldwin  South  Metro        195121\n 3 1005      Alabama Barbour  South  Nonmetro      26932\n 4 1007      Alabama Bibb     South  Metro         22604\n 5 1009      Alabama Blount   South  Metro         57710\n 6 1011      Alabama Bullock  South  Nonmetro      10678\n 7 1013      Alabama Butler   South  Nonmetro      20354\n 8 1015      Alabama Calhoun  South  Metro        116648\n 9 1017      Alabama Chambers South  Nonmetro      34079\n10 1019      Alabama Cherokee South  Nonmetro      26008\n# ℹ 3,128 more rows\n\n# belirli veri tipindeki sütunları seçmek\ncounties %&gt;%\nselect(where(is.character))\n\n# A tibble: 3,138 × 5\n   census_id state   county   region metro   \n   &lt;chr&gt;     &lt;chr&gt;   &lt;chr&gt;    &lt;chr&gt;  &lt;chr&gt;   \n 1 1001      Alabama Autauga  South  Metro   \n 2 1003      Alabama Baldwin  South  Metro   \n 3 1005      Alabama Barbour  South  Nonmetro\n 4 1007      Alabama Bibb     South  Metro   \n 5 1009      Alabama Blount   South  Metro   \n 6 1011      Alabama Bullock  South  Nonmetro\n 7 1013      Alabama Butler   South  Nonmetro\n 8 1015      Alabama Calhoun  South  Metro   \n 9 1017      Alabama Chambers South  Nonmetro\n10 1019      Alabama Cherokee South  Nonmetro\n# ℹ 3,128 more rows\n\n# select ile kolon adı değiştirmek\ncounties %&gt;%\nselect(census_id,pop = population)\n\n# A tibble: 3,138 × 2\n   census_id    pop\n   &lt;chr&gt;      &lt;dbl&gt;\n 1 1001       55221\n 2 1003      195121\n 3 1005       26932\n 4 1007       22604\n 5 1009       57710\n 6 1011       10678\n 7 1013       20354\n 8 1015      116648\n 9 1017       34079\n10 1019       26008\n# ℹ 3,128 more rows",
    "crumbs": [
      "Veri Manipulasyonu"
    ]
  },
  {
    "objectID": "data_manipulation.html#değişken-seçme---select",
    "href": "data_manipulation.html#değişken-seçme---select",
    "title": "Veri Manipulasyonu",
    "section": "",
    "text": "Not\n\n\n\nselect() fonksiyonu ayrıca sütunları seçerken veya döndürürken bazı özel işlevler de kullanmanıza olanak tanır. Örneğin, starts_with(), ends_with(), contains() gibi işlevleri kullanarak sütun adlarının belirli bir örüntüyü karşılayanları seçebilirsiniz. Bu fonksiyon, veri manipülasyonu işlemlerinde oldukça kullanışlıdır ve veri çerçevelerini istediğiniz şekilde özelleştirmenize yardımcı olur.",
    "crumbs": [
      "Veri Manipulasyonu"
    ]
  },
  {
    "objectID": "data_manipulation.html#veri-sıralama---arrange",
    "href": "data_manipulation.html#veri-sıralama---arrange",
    "title": "Veri Manipulasyonu",
    "section": "Veri Sıralama - arrange",
    "text": "Veri Sıralama - arrange\ndplyr paketinde bulunan arrange() fonksiyonu, veri çerçevesindeki satırları belirli bir sıraya göre düzenlemek için kullanılır. Bu sıralama işlemi, bir veya daha fazla sütunun değerlerine göre yapılabilir. arrange() fonksiyonu, veri analizi ve veri keşfi sırasında verilerinizi anlamak ve analiz etmek için önemli bir araçtır.\n\ncounties_selected &lt;- counties %&gt;%\nselect(state, county, population, unemployment)\n\n# artan sıralama (ascending)\ncounties_selected %&gt;%\narrange(population)\n\n# A tibble: 3,138 × 4\n   state      county    population unemployment\n   &lt;chr&gt;      &lt;chr&gt;          &lt;dbl&gt;        &lt;dbl&gt;\n 1 Hawaii     Kalawao           85          0  \n 2 Texas      King             267          5.1\n 3 Nebraska   McPherson        433          0.9\n 4 Montana    Petroleum        443          6.6\n 5 Nebraska   Arthur           448          4  \n 6 Nebraska   Loup             548          0.7\n 7 Nebraska   Blaine           551          0.7\n 8 New Mexico Harding          565          6  \n 9 Texas      Kenedy           565          0  \n10 Colorado   San Juan         606         13.8\n# ℹ 3,128 more rows\n\n# azalan sıralama (descending)\ncounties_selected %&gt;%\narrange(desc(population))\n\n# A tibble: 3,138 × 4\n   state      county      population unemployment\n   &lt;chr&gt;      &lt;chr&gt;            &lt;dbl&gt;        &lt;dbl&gt;\n 1 California Los Angeles   10038388         10  \n 2 Illinois   Cook           5236393         10.7\n 3 Texas      Harris         4356362          7.5\n 4 Arizona    Maricopa       4018143          7.7\n 5 California San Diego      3223096          8.7\n 6 California Orange         3116069          7.6\n 7 Florida    Miami-Dade     2639042         10  \n 8 New York   Kings          2595259         10  \n 9 Texas      Dallas         2485003          7.6\n10 New York   Queens         2301139          8.6\n# ℹ 3,128 more rows\n\n# birden fazla sütun seçerek sıralama\ncounties_selected %&gt;%\narrange(state,desc(population))\n\n# A tibble: 3,138 × 4\n   state   county     population unemployment\n   &lt;chr&gt;   &lt;chr&gt;           &lt;dbl&gt;        &lt;dbl&gt;\n 1 Alabama Jefferson      659026          9.1\n 2 Alabama Mobile         414251          9.8\n 3 Alabama Madison        346438          8.5\n 4 Alabama Montgomery     228138          8.8\n 5 Alabama Shelby         203530          5.5\n 6 Alabama Tuscaloosa     200458          7.6\n 7 Alabama Baldwin        195121          7.5\n 8 Alabama Lee            150982          7.3\n 9 Alabama Morgan         119786          9.9\n10 Alabama Calhoun        116648         12.3\n# ℹ 3,128 more rows",
    "crumbs": [
      "Veri Manipulasyonu"
    ]
  },
  {
    "objectID": "data_manipulation.html#veri-filtreleme---filter",
    "href": "data_manipulation.html#veri-filtreleme---filter",
    "title": "Veri Manipulasyonu",
    "section": "Veri Filtreleme - filter",
    "text": "Veri Filtreleme - filter\ndplyr paketindeki filter() fonksiyonu, veri çerçevesinde belirli bir koşulu karşılayan satırları seçmek için kullanılır. Bu fonksiyon, veri analizi sırasında verilerinizi filtrelemek ve istediğiniz verileri elde etmek için oldukça kullanışlıdır. filter() fonksiyonu, veri çerçevesindeki satırları seçerken belirli sütunlardaki değerlere dayalı koşulları uygulamanıza olanak tanır.\n\n# sadece New York'u filtrele\ncounties_selected %&gt;%\narrange(desc(population)) %&gt;%\nfilter(state == \"New York\")\n\n# A tibble: 62 × 4\n   state    county      population unemployment\n   &lt;chr&gt;    &lt;chr&gt;            &lt;dbl&gt;        &lt;dbl&gt;\n 1 New York Kings          2595259         10  \n 2 New York Queens         2301139          8.6\n 3 New York New York       1629507          7.5\n 4 New York Suffolk        1501373          6.4\n 5 New York Bronx          1428357         14  \n 6 New York Nassau         1354612          6.4\n 7 New York Westchester     967315          7.6\n 8 New York Erie            921584          7  \n 9 New York Monroe          749356          7.7\n10 New York Richmond        472481          6.9\n# ℹ 52 more rows\n\n# işsizlik oranı 6'dan küçük olanları filtrele\ncounties_selected %&gt;%\narrange(desc(population)) %&gt;%\nfilter(unemployment &lt; 6)\n\n# A tibble: 949 × 4\n   state    county       population unemployment\n   &lt;chr&gt;    &lt;chr&gt;             &lt;dbl&gt;        &lt;dbl&gt;\n 1 Virginia Fairfax         1128722          4.9\n 2 Utah     Salt Lake       1078958          5.8\n 3 Hawaii   Honolulu         984178          5.6\n 4 Texas    Collin           862215          4.9\n 5 Texas    Denton           731851          5.7\n 6 Texas    Fort Bend        658331          5.1\n 7 Kansas   Johnson          566814          4.5\n 8 Maryland Anne Arundel     555280          5.9\n 9 Colorado Jefferson        552344          5.9\n10 Utah     Utah             551957          5.5\n# ℹ 939 more rows\n\n# birden fazla koşul\ncounties_selected %&gt;%\narrange(desc(population)) %&gt;%\nfilter(state == \"New York\",unemployment &lt; 6)\n\n# A tibble: 5 × 4\n  state    county     population unemployment\n  &lt;chr&gt;    &lt;chr&gt;           &lt;dbl&gt;        &lt;dbl&gt;\n1 New York Tompkins       103855          5.9\n2 New York Chemung         88267          5.4\n3 New York Madison         72427          5.1\n4 New York Livingston      64801          5.4\n5 New York Seneca          35144          5.5\n\n# veya kullanımı\ncounties_selected %&gt;%\narrange(desc(population)) %&gt;%\nfilter(state == \"New York\"| unemployment &lt; 6)\n\n# A tibble: 1,006 × 4\n   state    county      population unemployment\n   &lt;chr&gt;    &lt;chr&gt;            &lt;dbl&gt;        &lt;dbl&gt;\n 1 New York Kings          2595259         10  \n 2 New York Queens         2301139          8.6\n 3 New York New York       1629507          7.5\n 4 New York Suffolk        1501373          6.4\n 5 New York Bronx          1428357         14  \n 6 New York Nassau         1354612          6.4\n 7 Virginia Fairfax        1128722          4.9\n 8 Utah     Salt Lake      1078958          5.8\n 9 Hawaii   Honolulu        984178          5.6\n10 New York Westchester     967315          7.6\n# ℹ 996 more rows",
    "crumbs": [
      "Veri Manipulasyonu"
    ]
  },
  {
    "objectID": "data_manipulation.html#değişken-güncelleme-ve-oluşturma--mutate",
    "href": "data_manipulation.html#değişken-güncelleme-ve-oluşturma--mutate",
    "title": "Veri Manipulasyonu",
    "section": "Değişken Güncelleme ve Oluşturma- mutate",
    "text": "Değişken Güncelleme ve Oluşturma- mutate\ndplyr paketindeki mutate() fonksiyonu, bir veri çerçevesinde yeni sütunlar oluşturmak veya mevcut sütunları dönüştürmek için kullanılır. Bu fonksiyon, veri çerçevesindeki herhangi bir sütunu işleyerek yeni bilgiler eklemenize veya mevcut sütunları değiştirmenize olanak tanır. mutate() fonksiyonu, veri analizi sırasında verilerinizi özelleştirmek için oldukça kullanışlıdır.\n\n# işsiz nüfus sayısına ilişkin değişken üretme\ncounties_selected %&gt;%\nmutate(unemployed_population = population * unemployment / 100)\n\n# A tibble: 3,138 × 5\n   state   county   population unemployment unemployed_population\n   &lt;chr&gt;   &lt;chr&gt;         &lt;dbl&gt;        &lt;dbl&gt;                 &lt;dbl&gt;\n 1 Alabama Autauga       55221          7.6                 4197.\n 2 Alabama Baldwin      195121          7.5                14634.\n 3 Alabama Barbour       26932         17.6                 4740.\n 4 Alabama Bibb          22604          8.3                 1876.\n 5 Alabama Blount        57710          7.7                 4444.\n 6 Alabama Bullock       10678         18                   1922.\n 7 Alabama Butler        20354         10.9                 2219.\n 8 Alabama Calhoun      116648         12.3                14348.\n 9 Alabama Chambers      34079          8.9                 3033.\n10 Alabama Cherokee      26008          7.9                 2055.\n# ℹ 3,128 more rows\n\n# yeni sütun ekle\ncounties_selected %&gt;%\nmutate(unemployed_population = population * unemployment / 100) %&gt;%\narrange(desc(unemployed_population))\n\n# A tibble: 3,138 × 5\n   state      county         population unemployment unemployed_population\n   &lt;chr&gt;      &lt;chr&gt;               &lt;dbl&gt;        &lt;dbl&gt;                 &lt;dbl&gt;\n 1 California Los Angeles      10038388         10                1003839.\n 2 Illinois   Cook              5236393         10.7               560294.\n 3 Texas      Harris            4356362          7.5               326727.\n 4 Arizona    Maricopa          4018143          7.7               309397.\n 5 California Riverside         2298032         12.9               296446.\n 6 California San Diego         3223096          8.7               280409.\n 7 Michigan   Wayne             1778969         14.9               265066.\n 8 California San Bernardino    2094769         12.6               263941.\n 9 Florida    Miami-Dade        2639042         10                 263904.\n10 New York   Kings             2595259         10                 259526.\n# ℹ 3,128 more rows\n\n# var olan sütunu güncelle\ncounties %&gt;%\n  select(state, county, population, men,women) %&gt;% \nmutate(population = men + women)\n\n# A tibble: 3,138 × 5\n   state   county   population   men women\n   &lt;chr&gt;   &lt;chr&gt;         &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1 Alabama Autauga       55221 26745 28476\n 2 Alabama Baldwin      195121 95314 99807\n 3 Alabama Barbour       26932 14497 12435\n 4 Alabama Bibb          22604 12073 10531\n 5 Alabama Blount        57710 28512 29198\n 6 Alabama Bullock       10678  5660  5018\n 7 Alabama Butler        20354  9502 10852\n 8 Alabama Calhoun      116648 56274 60374\n 9 Alabama Chambers      34079 16258 17821\n10 Alabama Cherokee      26008 12975 13033\n# ℹ 3,128 more rows\n\n# birden fazla yeni değişken üretme\ncounties %&gt;%\n  select(state, county, population, men,women) %&gt;% \nmutate(men_ratio = men/population*100,\n       women_ratio = women/population*100)\n\n# A tibble: 3,138 × 7\n   state   county   population   men women men_ratio women_ratio\n   &lt;chr&gt;   &lt;chr&gt;         &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt;       &lt;dbl&gt;\n 1 Alabama Autauga       55221 26745 28476      48.4        51.6\n 2 Alabama Baldwin      195121 95314 99807      48.8        51.2\n 3 Alabama Barbour       26932 14497 12435      53.8        46.2\n 4 Alabama Bibb          22604 12073 10531      53.4        46.6\n 5 Alabama Blount        57710 28512 29198      49.4        50.6\n 6 Alabama Bullock       10678  5660  5018      53.0        47.0\n 7 Alabama Butler        20354  9502 10852      46.7        53.3\n 8 Alabama Calhoun      116648 56274 60374      48.2        51.8\n 9 Alabama Chambers      34079 16258 17821      47.7        52.3\n10 Alabama Cherokee      26008 12975 13033      49.9        50.1\n# ℹ 3,128 more rows\n\n# transmute sadece yeni eklenen değişkenleri gösterir\n\ncounties %&gt;%\n  select(state, county, population, men,women) %&gt;% \ntransmute(men_ratio = men/population*100,\n       women_ratio = women/population*100)\n\n# A tibble: 3,138 × 2\n   men_ratio women_ratio\n       &lt;dbl&gt;       &lt;dbl&gt;\n 1      48.4        51.6\n 2      48.8        51.2\n 3      53.8        46.2\n 4      53.4        46.6\n 5      49.4        50.6\n 6      53.0        47.0\n 7      46.7        53.3\n 8      48.2        51.8\n 9      47.7        52.3\n10      49.9        50.1\n# ℹ 3,128 more rows\n\n# mutate_at ile koşula göre birden fazla değişkene aynı fonksiyon uygulanabilir.\nscale2 &lt;- function(x, na.rm = FALSE) (x - mean(x, na.rm = na.rm)) / sd(x, na.rm)\n\ncounties_selected %&gt;% \n  mutate_at(c(\"population\",\"unemployment\"),scale2)\n\n# A tibble: 3,138 × 4\n   state   county   population unemployment\n   &lt;chr&gt;   &lt;chr&gt;         &lt;dbl&gt;        &lt;dbl&gt;\n 1 Alabama Autauga     -0.141       -0.0563\n 2 Alabama Baldwin      0.292       -0.0846\n 3 Alabama Barbour     -0.228        2.78  \n 4 Alabama Bibb        -0.242        0.142 \n 5 Alabama Blount      -0.133       -0.0279\n 6 Alabama Bullock     -0.278        2.89  \n 7 Alabama Butler      -0.249        0.880 \n 8 Alabama Calhoun      0.0495       1.28  \n 9 Alabama Chambers    -0.206        0.313 \n10 Alabama Cherokee    -0.231        0.0288\n# ℹ 3,128 more rows\n\ncounties_selected %&gt;% # birden fazla argüman kullanımı\n  mutate_at(c(\"population\",\"unemployment\"),scale2,na.rm = TRUE)\n\n# A tibble: 3,138 × 4\n   state   county   population unemployment\n   &lt;chr&gt;   &lt;chr&gt;         &lt;dbl&gt;        &lt;dbl&gt;\n 1 Alabama Autauga     -0.141       -0.0563\n 2 Alabama Baldwin      0.292       -0.0846\n 3 Alabama Barbour     -0.228        2.78  \n 4 Alabama Bibb        -0.242        0.142 \n 5 Alabama Blount      -0.133       -0.0279\n 6 Alabama Bullock     -0.278        2.89  \n 7 Alabama Butler      -0.249        0.880 \n 8 Alabama Calhoun      0.0495       1.28  \n 9 Alabama Chambers    -0.206        0.313 \n10 Alabama Cherokee    -0.231        0.0288\n# ℹ 3,128 more rows\n\n# mutate_if ile koşula göre birden fazla değişkende değişiklik yapılabilir.\nstr(counties_selected)\n\nspc_tbl_ [3,138 × 4] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ state       : chr [1:3138] \"Alabama\" \"Alabama\" \"Alabama\" \"Alabama\" ...\n $ county      : chr [1:3138] \"Autauga\" \"Baldwin\" \"Barbour\" \"Bibb\" ...\n $ population  : num [1:3138] 55221 195121 26932 22604 57710 ...\n $ unemployment: num [1:3138] 7.6 7.5 17.6 8.3 7.7 18 10.9 12.3 8.9 7.9 ...\n\ncounties_selected &lt;- counties_selected %&gt;% \n  mutate_if(is.character,as.factor)\n\nstr(counties_selected)\n\nspc_tbl_ [3,138 × 4] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ state       : Factor w/ 50 levels \"Alabama\",\"Alaska\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ county      : Factor w/ 1847 levels \"Abbeville\",\"Acadia\",..: 82 89 100 149 164 225 235 246 293 315 ...\n $ population  : num [1:3138] 55221 195121 26932 22604 57710 ...\n $ unemployment: num [1:3138] 7.6 7.5 17.6 8.3 7.7 18 10.9 12.3 8.9 7.9 ...\n\ncounties_selected %&gt;% \n  mutate_if(is.numeric, scale2, na.rm = TRUE)\n\n# A tibble: 3,138 × 4\n   state   county   population unemployment\n   &lt;fct&gt;   &lt;fct&gt;         &lt;dbl&gt;        &lt;dbl&gt;\n 1 Alabama Autauga     -0.141       -0.0563\n 2 Alabama Baldwin      0.292       -0.0846\n 3 Alabama Barbour     -0.228        2.78  \n 4 Alabama Bibb        -0.242        0.142 \n 5 Alabama Blount      -0.133       -0.0279\n 6 Alabama Bullock     -0.278        2.89  \n 7 Alabama Butler      -0.249        0.880 \n 8 Alabama Calhoun      0.0495       1.28  \n 9 Alabama Chambers    -0.206        0.313 \n10 Alabama Cherokee    -0.231        0.0288\n# ℹ 3,128 more rows\n\n\n\n\n\n\n\n\nDikkat\n\n\n\nmutate() ve transmute() fonksiyonları, dplyr paketinde veri çerçevelerini işlerken kullanılan iki farklı fonksiyondur. Her ikisi de yeni sütunlar oluşturmanıza veya mevcut sütunları dönüştürmenize olanak tanır, ancak aralarındaki temel fark işlevlerinin dönüş değerleridir. Ancak kullanırken aşağıda belirtilen hususlara dikkat etmek gerekir:\n\nmutate(), veri çerçevesine yeni sütunlar eklerken, orijinal veri çerçevesini değiştirmez. Yani, yeni sütunlar eklerken orijinal veri çerçevesinin boyutu artar. mutate() fonksiyonu, orijinal veri çerçevesini döndürürken eklenen sütunlarla birlikte veriyi içeren yeni bir veri çerçevesi döndürür.\ntransmute(), yeni sütunlar oluştururken orijinal veri çerçevesini değiştirmez. Ancak, transmute() fonksiyonu yalnızca belirtilen sütunları ve yeni sütunları içeren bir veri çerçevesi döndürür. Diğer orijinal sütunlar bu yeni veri çerçevesinde yer almaz. Bu, veri çerçevesini daha küçük ve özgünleştirilmiş bir hale getirir.\n\n\n\n\nKoşullu Değişken Oluşturma - case_when\ncase_when() fonksiyonu, R programlama dilinde dplyr paketi içinde bulunan ve çoklu koşullara dayalı olarak yeni bir sütun oluşturmak veya mevcut bir sütunu dönüştürmek için kullanılan bir fonksiyondur. Bu fonksiyon, özellikle veri çerçevelerinde veya veri tablolarında, belirli koşullara dayalı olarak işlem yapmanız gerektiğinde oldukça kullanışlıdır. case_when() fonksiyonu, birden fazla koşulu kontrol ederek her bir koşula uygun bir değer veya işlem döndürmenizi sağlar. case_when() fonksiyonu, bir veya daha fazla koşul ifadesi ve bu koşullara karşılık gelecek değerler içeren çiftlerin bir listesini alır. Bu çiftler, ~ operatörü ile ayrılır.\n\n# Örnek bir veri çerçevesi oluşturalım\nveri &lt;- data.frame(\n  Ogrenci_Ad = c(\"Ali\", \"Esra\", \"Erkan\", \"Derya\"),\n  Puan = c(90, 75, 60, 80)\n)\n\n# Yeni bir sütun oluşturma: Puan kategorisi\nveri &lt;- veri %&gt;%\n  mutate(Puan_Kategorisi = case_when(\n    Puan &gt;= 90 ~ \"AA\",\n    Puan &gt;= 80 ~ \"BA\",\n    Puan &gt;= 70 ~ \"BB\",\n    Puan &gt;= 60 ~ \"CB\",\n    TRUE ~ \"FF\"  # Tüm diğer durumlar için\n  ))\n\nprint(veri)\n\n  Ogrenci_Ad Puan Puan_Kategorisi\n1        Ali   90              AA\n2       Esra   75              BB\n3      Erkan   60              CB\n4      Derya   80              BA\n\n\ncase_when() fonksiyonunu birden fazla koşul ile kullanabilirsiniz. Koşullar yukarıdan aşağıya sırayla kontrol edilir ve ilk koşulu sağlayan değer kullanılır.\n\nveri &lt;- veri %&gt;%\n  mutate(Not_Durumu = case_when(\n    Puan &gt;= 90 ~ \"Geçti\",\n    Puan &gt;= 60 & Puan &lt; 70 ~ \"Şartlı Geçti\",\n    Puan &lt; 60 ~ \"Kaldı\",\n    TRUE ~ \"Bilinmiyor\"  # Tüm diğer durumlar için\n  ))\n\nveri\n\n  Ogrenci_Ad Puan Puan_Kategorisi   Not_Durumu\n1        Ali   90              AA        Geçti\n2       Esra   75              BB   Bilinmiyor\n3      Erkan   60              CB Şartlı Geçti\n4      Derya   80              BA   Bilinmiyor",
    "crumbs": [
      "Veri Manipulasyonu"
    ]
  },
  {
    "objectID": "data_manipulation.html#değişken-isimlendirme---rename",
    "href": "data_manipulation.html#değişken-isimlendirme---rename",
    "title": "Veri Manipulasyonu",
    "section": "Değişken İsimlendirme - rename",
    "text": "Değişken İsimlendirme - rename\nrename() fonksiyonu, R programlama dilinde veri çerçevesi içindeki sütunların adlarını değiştirmek için kullanılır. Veri çerçevesi sütunlarının daha açıklayıcı veya kullanıcı dostu adlara sahip olmasını sağlar. Bu, veri analizi ve raporlama süreçlerini daha anlaşılır ve düzenli hale getirmenize yardımcı olabilir.\n\n# yeniden isimlendirmede eşitliği sol tarafı yeni isim olmalı\ncounties_selected %&gt;%\nrename(unemployment_rate = unemployment)\n\n# A tibble: 3,138 × 4\n   state   county   population unemployment_rate\n   &lt;fct&gt;   &lt;fct&gt;         &lt;dbl&gt;             &lt;dbl&gt;\n 1 Alabama Autauga       55221               7.6\n 2 Alabama Baldwin      195121               7.5\n 3 Alabama Barbour       26932              17.6\n 4 Alabama Bibb          22604               8.3\n 5 Alabama Blount        57710               7.7\n 6 Alabama Bullock       10678              18  \n 7 Alabama Butler        20354              10.9\n 8 Alabama Calhoun      116648              12.3\n 9 Alabama Chambers      34079               8.9\n10 Alabama Cherokee      26008               7.9\n# ℹ 3,128 more rows\n\n# select ile beraber de yeniden isimlendirme yapılabilir\ncounties_selected %&gt;%\nselect(state, county, population, unemployment_rate = unemployment)\n\n# A tibble: 3,138 × 4\n   state   county   population unemployment_rate\n   &lt;fct&gt;   &lt;fct&gt;         &lt;dbl&gt;             &lt;dbl&gt;\n 1 Alabama Autauga       55221               7.6\n 2 Alabama Baldwin      195121               7.5\n 3 Alabama Barbour       26932              17.6\n 4 Alabama Bibb          22604               8.3\n 5 Alabama Blount        57710               7.7\n 6 Alabama Bullock       10678              18  \n 7 Alabama Butler        20354              10.9\n 8 Alabama Calhoun      116648              12.3\n 9 Alabama Chambers      34079               8.9\n10 Alabama Cherokee      26008               7.9\n# ℹ 3,128 more rows\n\n\n\n\n\n\n\n\nDikkat\n\n\n\nrename fonksiyonunda eşitliğin sol tarafına yeni isim, sağ tarafına ise önceki isim yazılır.",
    "crumbs": [
      "Veri Manipulasyonu"
    ]
  },
  {
    "objectID": "data_manipulation.html#verileri-sayma---count",
    "href": "data_manipulation.html#verileri-sayma---count",
    "title": "Veri Manipulasyonu",
    "section": "Verileri Sayma - count",
    "text": "Verileri Sayma - count\ncount() fonksiyonu, R programlama dilindeki dplyr paketinde bulunan ve belirli bir sütuna göre veri çerçevesindeki gözlemlerin sayısını hesaplamak için kullanılan bir fonksiyondur. Bu fonksiyon, veri çerçevesindeki belirli bir kategorik değişkenin benzersiz değerlerini ve her bir değer için kaç gözlemin olduğunu hesaplamak için oldukça kullanışlıdır.\ncount() fonksiyonu, veri analizi sürecinde veri özeti oluşturmak ve belirli bir değişkenin frekansını görmek için sıkça kullanılır. Ayrıca, veri çerçevesindeki her bir kategorik değeri ve bu değerlere ait gözlem sayılarını içeren yeni bir veri çerçevesi döndürür.\n\n# count ile veri setinde sayma işlemleri yapılır\ncounties %&gt;%\ncount()\n\n# A tibble: 1 × 1\n      n\n  &lt;int&gt;\n1  3138\n\n# state dağılımını elde etmek\ncounties %&gt;%\ncount(state)\n\n# A tibble: 50 × 2\n   state           n\n   &lt;chr&gt;       &lt;int&gt;\n 1 Alabama        67\n 2 Alaska         28\n 3 Arizona        15\n 4 Arkansas       75\n 5 California     58\n 6 Colorado       64\n 7 Connecticut     8\n 8 Delaware        3\n 9 Florida        67\n10 Georgia       159\n# ℹ 40 more rows\n\n# sort = TRUE ile büyükten küçüge sıralama yapılabilir\ncounties %&gt;%\ncount(state, sort = TRUE)\n\n# A tibble: 50 × 2\n   state              n\n   &lt;chr&gt;          &lt;int&gt;\n 1 Texas            253\n 2 Georgia          159\n 3 Virginia         133\n 4 Kentucky         120\n 5 Missouri         115\n 6 Kansas           105\n 7 Illinois         102\n 8 North Carolina   100\n 9 Iowa              99\n10 Tennessee         95\n# ℹ 40 more rows\n\n# wt argümanı ile değişken toplamları hesaplanabilir\ncounties %&gt;%\ncount(state, wt = population, sort = TRUE)\n\n# A tibble: 50 × 2\n   state                 n\n   &lt;chr&gt;             &lt;dbl&gt;\n 1 California     38421464\n 2 Texas          26538497\n 3 New York       19673174\n 4 Florida        19645772\n 5 Illinois       12873761\n 6 Pennsylvania   12779559\n 7 Ohio           11575977\n 8 Georgia        10006693\n 9 Michigan        9900571\n10 North Carolina  9845333\n# ℹ 40 more rows",
    "crumbs": [
      "Veri Manipulasyonu"
    ]
  },
  {
    "objectID": "data_manipulation.html#veri-özetleme---summarize",
    "href": "data_manipulation.html#veri-özetleme---summarize",
    "title": "Veri Manipulasyonu",
    "section": "Veri Özetleme - summarize",
    "text": "Veri Özetleme - summarize\ngroup_by() ve summarize() fonksiyonları, R programlama dilinde veri çerçevesi üzerinde gruplama ve özetleme işlemleri yapmak için kullanılan önemli dplyr fonksiyonlarıdır. Bu fonksiyonlar, veri analizi sürecinde verilerinizi daha iyi anlamak ve özetlemek için oldukça güçlü araçlardır.\ngroup_by() fonksiyonu, veri çerçevesindeki verileri belirli bir sütuna veya birden fazla sütuna göre gruplamak için kullanılır. Bu gruplandırma işlemi, veriyi belirli bir kategoriye veya sınıfa göre ayırmak için kullanılır.\nsummarize() fonksiyonu, gruplanmış veri üzerinde istatistiksel veya özetleyici işlemler yapmak için kullanılır. Bu fonksiyon, belirli bir grup için özet bilgileri hesaplamak için kullanılır.\n\ncounties %&gt;%\nsummarize(total_population = sum(population))\n\n# A tibble: 1 × 1\n  total_population\n             &lt;dbl&gt;\n1        315845353\n\ncounties %&gt;%\nsummarize(total_population = sum(population),\naverage_unemployment = mean(unemployment))\n\n# A tibble: 1 × 2\n  total_population average_unemployment\n             &lt;dbl&gt;                &lt;dbl&gt;\n1        315845353                 7.80\n\n# istenilen düzeye göre hesaplamalar group_by ile yapılır\ncounties %&gt;%\ngroup_by(state) %&gt;%\nsummarize(total_pop = sum(population),\naverage_unemployment = sum(unemployment))\n\n# A tibble: 50 × 3\n   state       total_pop average_unemployment\n   &lt;chr&gt;           &lt;dbl&gt;                &lt;dbl&gt;\n 1 Alabama       4830620                758. \n 2 Alaska         725461                257. \n 3 Arizona       6641928                180. \n 4 Arkansas      2958208                674. \n 5 California   38421464                626. \n 6 Colorado      5278906                477. \n 7 Connecticut   3593222                 65.3\n 8 Delaware       926454                 23.8\n 9 Florida      19645772                696. \n10 Georgia      10006693               1586. \n# ℹ 40 more rows\n\ncounties %&gt;%\ngroup_by(state) %&gt;%\nsummarize(total_pop = sum(population),\naverage_unemployment = mean(unemployment)) %&gt;%\narrange(desc(average_unemployment))\n\n# A tibble: 50 × 3\n   state          total_pop average_unemployment\n   &lt;chr&gt;              &lt;dbl&gt;                &lt;dbl&gt;\n 1 Mississippi      2988081                12.0 \n 2 Arizona          6641928                12.0 \n 3 South Carolina   4777576                11.3 \n 4 Alabama          4830620                11.3 \n 5 California      38421464                10.8 \n 6 Nevada           2798636                10.5 \n 7 North Carolina   9845333                10.5 \n 8 Florida         19645772                10.4 \n 9 Georgia         10006693                 9.97\n10 Michigan         9900571                 9.96\n# ℹ 40 more rows\n\n# birden fazla değişken düzeyinde gruplama\ncounties %&gt;%\ngroup_by(state, metro) %&gt;%\nsummarize(total_pop = sum(population))\n\n`summarise()` has grouped output by 'state'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 97 × 3\n# Groups:   state [50]\n   state      metro    total_pop\n   &lt;chr&gt;      &lt;chr&gt;        &lt;dbl&gt;\n 1 Alabama    Metro      3671377\n 2 Alabama    Nonmetro   1159243\n 3 Alaska     Metro       494990\n 4 Alaska     Nonmetro    230471\n 5 Arizona    Metro      6295145\n 6 Arizona    Nonmetro    346783\n 7 Arkansas   Metro      1806867\n 8 Arkansas   Nonmetro   1151341\n 9 California Metro     37587429\n10 California Nonmetro    834035\n# ℹ 87 more rows\n\n# elde edilen veri üzerinden devam edilecekse ungroup kullanılmalı.\n# ungroup kullanılmazsa sonradan yapılan işlemler group_by değişkenleri düzeyinde\n# devam eder\n\ncounties %&gt;%\ngroup_by(state, metro) %&gt;%\nsummarize(total_pop = sum(population)) %&gt;%\nungroup()\n\n`summarise()` has grouped output by 'state'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 97 × 3\n   state      metro    total_pop\n   &lt;chr&gt;      &lt;chr&gt;        &lt;dbl&gt;\n 1 Alabama    Metro      3671377\n 2 Alabama    Nonmetro   1159243\n 3 Alaska     Metro       494990\n 4 Alaska     Nonmetro    230471\n 5 Arizona    Metro      6295145\n 6 Arizona    Nonmetro    346783\n 7 Arkansas   Metro      1806867\n 8 Arkansas   Nonmetro   1151341\n 9 California Metro     37587429\n10 California Nonmetro    834035\n# ℹ 87 more rows\n\n# top_n en yüksek ya da en düşük sonuçları listeleme\ncounties_selected %&gt;%\ngroup_by(state) %&gt;%\ntop_n(1, population) # her eyaletteki en yüksek nüfuslu yer\n\n# A tibble: 50 × 4\n# Groups:   state [50]\n   state       county                 population unemployment\n   &lt;fct&gt;       &lt;fct&gt;                       &lt;dbl&gt;        &lt;dbl&gt;\n 1 Alabama     Jefferson                  659026          9.1\n 2 Alaska      Anchorage Municipality     299107          6.7\n 3 Arizona     Maricopa                  4018143          7.7\n 4 Arkansas    Pulaski                    390463          7.5\n 5 California  Los Angeles              10038388         10  \n 6 Colorado    El Paso                    655024          8.4\n 7 Connecticut Fairfield                  939983          9  \n 8 Delaware    New Castle                 549643          7.4\n 9 Florida     Miami-Dade                2639042         10  \n10 Georgia     Fulton                     983903          9.9\n# ℹ 40 more rows\n\ncounties_selected %&gt;%\ngroup_by(state) %&gt;%\ntop_n(-1, population) # her eyaletteki en düşük nüfuslu yer\n\n# A tibble: 50 × 4\n# Groups:   state [50]\n   state       county                   population unemployment\n   &lt;fct&gt;       &lt;fct&gt;                         &lt;dbl&gt;        &lt;dbl&gt;\n 1 Alabama     Greene                         8697         20.4\n 2 Alaska      Yakutat City and Borough        643          7.9\n 3 Arizona     Greenlee                       9023         10  \n 4 Arkansas    Calhoun                        5245          7.2\n 5 California  Alpine                         1131         10.7\n 6 Colorado    San Juan                        606         13.8\n 7 Connecticut Windham                      117470          9.3\n 8 Delaware    Kent                         169509          8.4\n 9 Florida     Liberty                        8295         10.2\n10 Georgia     Taliaferro                     1721         12.1\n# ℹ 40 more rows\n\ncounties_selected %&gt;%\ngroup_by(state) %&gt;%\ntop_n(2, population) # her eyaletteki en yüksek nüfuslu 2 yer\n\n# A tibble: 100 × 4\n# Groups:   state [50]\n   state      county                       population unemployment\n   &lt;fct&gt;      &lt;fct&gt;                             &lt;dbl&gt;        &lt;dbl&gt;\n 1 Alabama    Jefferson                        659026          9.1\n 2 Alabama    Mobile                           414251          9.8\n 3 Alaska     Anchorage Municipality           299107          6.7\n 4 Alaska     Fairbanks North Star Borough      99705          7.9\n 5 Arizona    Maricopa                        4018143          7.7\n 6 Arizona    Pima                             998537         10  \n 7 Arkansas   Benton                           238198          4.2\n 8 Arkansas   Pulaski                          390463          7.5\n 9 California Los Angeles                    10038388         10  \n10 California San Diego                       3223096          8.7\n# ℹ 90 more rows\n\n# summarise_all bütün değişkenler için özetleme yapar\ncounties_selected %&gt;% summarise_all(nlevels)\n\n# A tibble: 1 × 4\n  state county population unemployment\n  &lt;int&gt;  &lt;int&gt;      &lt;int&gt;        &lt;int&gt;\n1    50   1847          0            0\n\ncounties_selected %&gt;% \n  select(-county) %&gt;% \n  group_by(state) %&gt;% \n  summarise_all(mean)\n\n# A tibble: 50 × 3\n   state       population unemployment\n   &lt;fct&gt;            &lt;dbl&gt;        &lt;dbl&gt;\n 1 Alabama         72099.        11.3 \n 2 Alaska          25909.         9.19\n 3 Arizona        442795.        12.0 \n 4 Arkansas        39443.         8.98\n 5 California     662439.        10.8 \n 6 Colorado        82483.         7.46\n 7 Connecticut    449153.         8.16\n 8 Delaware       308818          7.93\n 9 Florida        293220.        10.4 \n10 Georgia         62935.         9.97\n# ℹ 40 more rows\n\n# summarise_at belli değişkenler için özetleme yapar\ncounties_selected %&gt;% \n  select(-county) %&gt;% \n  group_by(state) %&gt;% \n  summarise_at(\"population\",mean)\n\n# A tibble: 50 × 2\n   state       population\n   &lt;fct&gt;            &lt;dbl&gt;\n 1 Alabama         72099.\n 2 Alaska          25909.\n 3 Arizona        442795.\n 4 Arkansas        39443.\n 5 California     662439.\n 6 Colorado        82483.\n 7 Connecticut    449153.\n 8 Delaware       308818 \n 9 Florida        293220.\n10 Georgia         62935.\n# ℹ 40 more rows\n\n# summarise_if ile koşula göre özetleme yapar\ncounties_selected %&gt;% \n  summarize_if(is.numeric, mean, na.rm = TRUE)\n\n# A tibble: 1 × 2\n  population unemployment\n       &lt;dbl&gt;        &lt;dbl&gt;\n1    100652.         7.80\n\n\n\n\n\n\n\n\nDikkat\n\n\n\nungroup() fonksiyonu, dplyr paketinde kullanılan bir işlevdir ve bir veri çerçevesini veya gruplanmış bir veri çerçevesini gruplardan çıkarmak için kullanılır. group_by() fonksiyonu ile gruplanmış bir veri çerçevesini oluşturduğunuzda, veri çerçevesi belirli sütunlar üzerinde gruplama yapar ve her grup için ayrı işlemler yapmanıza olanak tanır. Ancak bazen gruplamadan çıkmak ve orijinal veri çerçevesini elde etmek isteyebilirsiniz.\n\n\n\n# Örnek bir veri çerçevesi oluşturalım\nveri &lt;- data.frame(\n  Sehir = c(\"İstanbul\", \"Ankara\", \"İstanbul\", \"Ankara\", \"İzmir\"),\n  Cinsiyet = c(\"Erkek\", \"Kadın\", \"Erkek\", \"Kadın\", \"Erkek\"),\n  Yas = c(28, 32, 22, 24, 30),\n  Puan = c(90, 85, 78, 92, 88)\n)\n\n# Şehir sütununa göre veriyi grupla\ngruplu_veri &lt;- group_by(veri, Sehir)\ngruplu_veri |&gt; summarise(mean(Puan))\n\n# A tibble: 3 × 2\n  Sehir    `mean(Puan)`\n  &lt;chr&gt;           &lt;dbl&gt;\n1 Ankara           88.5\n2 İstanbul         84  \n3 İzmir            88  \n\n# Grubu çıkarma\ngruplu_veri &lt;- ungroup(gruplu_veri)\ngruplu_veri |&gt; summarise(mean(Puan))\n\n# A tibble: 1 × 1\n  `mean(Puan)`\n         &lt;dbl&gt;\n1         86.6\n\n\nAynı veri setinde farklı sonuçlar elde edildiğine dikkat edelim. Eğer group_by ile oluşturulan veri setinde başka işlemler yapacaksanız öncesinde ungroup() yapmayı ihmal etmeyin.\n\n\n\n\n\n\nNot\n\n\n\ngroup_by sadece summarize fonksiyonu ile değil mutate, transmute gibi diğer fonksiyonlar ile birlikte de kullanılabilir.",
    "crumbs": [
      "Veri Manipulasyonu"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "R Programlama",
    "section": "",
    "text": "Önsöz\nR programlama dili, veri bilimi dünyasında vazgeçilmez bir araç haline geldi. Bu kitap, veri manipülasyonundan görselleştirmeye, keşifçi veri analizinden temel istatistik konularına kadar geniş bir yelpazede R dilini kullanarak veri analizi becerilerinizi güçlendirmenize odaklanıyor.\nKitabımız, R programlama dilini temel seviyeden başlayarak adım adım öğrenmek isteyen herkes için tasarlandı. İlk bölümlerde R dilinin temellerini kavrayacak ve dplyr gibi güçlü paketler aracılığıyla veri manipülasyonunun inceliklerini keşfedeceksiniz. Veri analizinin görselleştirme aşamasında ggplot2 paketiyle nasıl etkileyici grafikler oluşturabileceğinizi adım adım öğrenecek ve veri setlerinizin hikayesini çarpıcı görsellerle anlatacaksınız.\nKitabımız, keşifçi veri analizi sürecinde size rehberlik ederken, veri işleme tekniklerini ve önemli istatistik kavramlarını pratik örneklerle ele alacak. Temel istatistik kolları üzerine odaklanarak, veri setlerinizdeki deseni anlamak ve çözümlemek için gerekli araçları edineceksiniz. Ayrıca doğrusal regresyon gibi önemli modelleme tekniklerini R dilinde nasıl uygulayabileceğinizi adım adım öğreneceksiniz.\nBu kitabın amacı, R programlama dilini veri analizi süreçlerinizde güvenle kullanmanıza yardımcı olmak ve veri odaklı kararlar almanızı desteklemektir. Bilgi birikiminizi genişletirken öğrendiklerinizi uygulamaya dökme şansına sahip olacaksınız. Umarım bu kitap, veri analizi yolculuğunuzda size rehberlik eder ve R dilini kullanarak veriyle olan etkileşiminizi daha da derinleştirir.",
    "crumbs": [
      "Önsöz"
    ]
  },
  {
    "objectID": "data_join.html",
    "href": "data_join.html",
    "title": "Veri Birleştirme",
    "section": "",
    "text": "left_join\nleft_join() fonksiyonu, sol veri çerçevesi ile sağ veri çerçevesi arasında birleştirme işlemi yapar ve sol veri çerçevesindeki tüm gözlemleri korur. Eğer sağ veri çerçevesinde eşleşen gözlem yoksa, NA değerleri ile doldurulur.\nlibrary(dplyr)\n\nveri1 &lt;- data.frame(\n  Oğrenci = c(\"Ali\", \"Esra\", \"Osman\"),\n  Puan1 = c(90, 85, 78)\n)\n\nveri2 &lt;- data.frame(\n  Oğrenci = c(\"Ali\", \"Derya\", \"Merve\"),\n  Puan2 = c(88, 92, 85)\n)\n\nbirlesik_veri &lt;- left_join(veri1, veri2, by = \"Oğrenci\")\n\nprint(birlesik_veri)\n\n  Oğrenci Puan1 Puan2\n1     Ali    90    88\n2    Esra    85    NA\n3   Osman    78    NA\nBu kod, “Öğrenci” sütununa göre iki veri çerçevesini birleştirir. Sol veri çerçevesi (veri1) tüm gözlemleri içerir ve sağ veri çerçevesinde (veri2) eşleşen değerler varsa birleştirir.",
    "crumbs": [
      "Veri Birleştirme"
    ]
  },
  {
    "objectID": "data_join.html#right_join",
    "href": "data_join.html#right_join",
    "title": "Veri Birleştirme",
    "section": "right_join",
    "text": "right_join\nright_join() fonksiyonu, left_join() ile benzerdir, ancak sağ veri çerçevesindeki tüm gözlemleri korur. Eğer sol veri çerçevesinde eşleşen gözlem yoksa, NA değerleri ile doldurulur.\n\nbirlesik_veri &lt;- right_join(veri1, veri2, by = \"Oğrenci\")\n\nprint(birlesik_veri)\n\n  Oğrenci Puan1 Puan2\n1     Ali    90    88\n2   Derya    NA    92\n3   Merve    NA    85\n\n\nBu kod, sağ veri çerçevesi (veri2) tüm gözlemleri içerir ve sol veri çerçevesinde (veri1) eşleşen değerler varsa birleştirir.",
    "crumbs": [
      "Veri Birleştirme"
    ]
  },
  {
    "objectID": "data_join.html#inner_join",
    "href": "data_join.html#inner_join",
    "title": "Veri Birleştirme",
    "section": "inner_join",
    "text": "inner_join\ninner_join() fonksiyonu, sol ve sağ veri çerçeveleri arasında iç birleştirme yapar ve yalnızca ortak gözlemleri korur. Ortak gözlemleri içermeyen diğer gözlemleri atar.\n\nbirlesik_veri &lt;- inner_join(veri1, veri2, by = \"Oğrenci\")\n\nprint(birlesik_veri)\n\n  Oğrenci Puan1 Puan2\n1     Ali    90    88\n\n\nBu kod, sadece sol ve sağ veri çerçevelerinde (veri1 ve veri2) ortak olan gözlemleri korur.",
    "crumbs": [
      "Veri Birleştirme"
    ]
  },
  {
    "objectID": "data_join.html#full_join",
    "href": "data_join.html#full_join",
    "title": "Veri Birleştirme",
    "section": "full_join",
    "text": "full_join\nfull_join() fonksiyonu, sol ve sağ veri çerçeveleri arasında tam birleştirme yapar ve tüm gözlemleri korur. Ortak olmayan değerler NA ile doldurulur.\n\nbirlesik_veri &lt;- full_join(veri1, veri2, by = \"Oğrenci\")\n\nprint(birlesik_veri)\n\n  Oğrenci Puan1 Puan2\n1     Ali    90    88\n2    Esra    85    NA\n3   Osman    78    NA\n4   Derya    NA    92\n5   Merve    NA    85\n\n\nBu kod, sol ve sağ veri çerçevelerini (veri1 ve veri2) tamamen birleştirir ve tüm gözlemleri içerir.\n\n\n\n\n\n\nNot\n\n\n\nBu dört join fonksiyonu, farklı veri kaynaklarını birleştirme işlemlerinde kullanılır ve veri analizi sürecinde verileri daha kapsamlı bir şekilde incelemek için oldukça kullanışlıdır. Hangi join işleminin kullanılacağı, veri yapısına ve ihtiyaca bağlı olarak değişebilir.",
    "crumbs": [
      "Veri Birleştirme"
    ]
  }
]