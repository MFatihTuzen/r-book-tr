[
  {
    "objectID": "data_join.html",
    "href": "data_join.html",
    "title": "Veri Birleştirme",
    "section": "",
    "text": "Kullanacağımız Veri Setleri\nVeri analizi sürecinde, çoğu zaman birden fazla tabloyu ortak bir anahtar üzerinden birleştirmemiz gerekir.\nBu işlem, farklı kaynaklardaki bilgileri tek bir veri yapısında bütünleştirmemizi sağlar.\nÖrneğin, bir tabloda müşteri bilgileri, diğerinde sipariş bilgileri olabilir; analiz yapmak için bu tabloları birleştirmemiz gerekir.\nR’da veri birleştirme işlemleri hem base R fonksiyonları (merge()) hem de dplyr paketindeki join fonksiyonları (left_join(), inner_join(), vb.) ile yapılabilir.\nBu bölümde iki yaklaşımı da aynı veri seti üzerinden adım adım göstereceğiz.\nBu bölümde nycflights13 paketindeki veri setlerini kullanacağız. Bu paket, 2013 yılı New York uçuş verilerini içerir ve ilişkisel yapıdadır. Yani birkaç tablo, ortak anahtarlar aracılığıyla birbirine bağlanabilir.\nlibrary(dplyr)\nlibrary(nycflights13)\nglimpse(flights)\n\nRows: 336,776\nColumns: 19\n$ year           &lt;int&gt; 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2…\n$ month          &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ day            &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ dep_time       &lt;int&gt; 517, 533, 542, 544, 554, 554, 555, 557, 557, 558, 558, …\n$ sched_dep_time &lt;int&gt; 515, 529, 540, 545, 600, 558, 600, 600, 600, 600, 600, …\n$ dep_delay      &lt;dbl&gt; 2, 4, 2, -1, -6, -4, -5, -3, -3, -2, -2, -2, -2, -2, -1…\n$ arr_time       &lt;int&gt; 830, 850, 923, 1004, 812, 740, 913, 709, 838, 753, 849,…\n$ sched_arr_time &lt;int&gt; 819, 830, 850, 1022, 837, 728, 854, 723, 846, 745, 851,…\n$ arr_delay      &lt;dbl&gt; 11, 20, 33, -18, -25, 12, 19, -14, -8, 8, -2, -3, 7, -1…\n$ carrier        &lt;chr&gt; \"UA\", \"UA\", \"AA\", \"B6\", \"DL\", \"UA\", \"B6\", \"EV\", \"B6\", \"…\n$ flight         &lt;int&gt; 1545, 1714, 1141, 725, 461, 1696, 507, 5708, 79, 301, 4…\n$ tailnum        &lt;chr&gt; \"N14228\", \"N24211\", \"N619AA\", \"N804JB\", \"N668DN\", \"N394…\n$ origin         &lt;chr&gt; \"EWR\", \"LGA\", \"JFK\", \"JFK\", \"LGA\", \"EWR\", \"EWR\", \"LGA\",…\n$ dest           &lt;chr&gt; \"IAH\", \"IAH\", \"MIA\", \"BQN\", \"ATL\", \"ORD\", \"FLL\", \"IAD\",…\n$ air_time       &lt;dbl&gt; 227, 227, 160, 183, 116, 150, 158, 53, 140, 138, 149, 1…\n$ distance       &lt;dbl&gt; 1400, 1416, 1089, 1576, 762, 719, 1065, 229, 944, 733, …\n$ hour           &lt;dbl&gt; 5, 5, 5, 5, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6…\n$ minute         &lt;dbl&gt; 15, 29, 40, 45, 0, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 0…\n$ time_hour      &lt;dttm&gt; 2013-01-01 05:00:00, 2013-01-01 05:00:00, 2013-01-01 0…\n\nglimpse(airlines)\n\nRows: 16\nColumns: 2\n$ carrier &lt;chr&gt; \"9E\", \"AA\", \"AS\", \"B6\", \"DL\", \"EV\", \"F9\", \"FL\", \"HA\", \"MQ\", \"O…\n$ name    &lt;chr&gt; \"Endeavor Air Inc.\", \"American Airlines Inc.\", \"Alaska Airline…\n\nglimpse(airports)\n\nRows: 1,458\nColumns: 8\n$ faa   &lt;chr&gt; \"04G\", \"06A\", \"06C\", \"06N\", \"09J\", \"0A9\", \"0G6\", \"0G7\", \"0P2\", \"…\n$ name  &lt;chr&gt; \"Lansdowne Airport\", \"Moton Field Municipal Airport\", \"Schaumbur…\n$ lat   &lt;dbl&gt; 41.13047, 32.46057, 41.98934, 41.43191, 31.07447, 36.37122, 41.4…\n$ lon   &lt;dbl&gt; -80.61958, -85.68003, -88.10124, -74.39156, -81.42778, -82.17342…\n$ alt   &lt;dbl&gt; 1044, 264, 801, 523, 11, 1593, 730, 492, 1000, 108, 409, 875, 10…\n$ tz    &lt;dbl&gt; -5, -6, -6, -5, -5, -5, -5, -5, -5, -8, -5, -6, -5, -5, -5, -5, …\n$ dst   &lt;chr&gt; \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"U\", \"A\", \"A\", \"U\", \"A\",…\n$ tzone &lt;chr&gt; \"America/New_York\", \"America/Chicago\", \"America/Chicago\", \"Ameri…",
    "crumbs": [
      "Veri Birleştirme"
    ]
  },
  {
    "objectID": "data_join.html#right_join",
    "href": "data_join.html#right_join",
    "title": "Veri Birleştirme",
    "section": "right_join",
    "text": "right_join\nright_join() fonksiyonu, left_join() ile benzerdir, ancak sağ veri çerçevesindeki tüm gözlemleri korur. Eğer sol veri çerçevesinde eşleşen gözlem yoksa, NA değerleri ile doldurulur.\n\nbirlesik_veri &lt;- right_join(veri1, veri2, by = \"Oğrenci\")\n\nprint(birlesik_veri)\n\n  Oğrenci Puan1 Puan2\n1     Ali    90    88\n2   Derya    NA    92\n3   Merve    NA    85\n\n\nBu kod, sağ veri çerçevesi (veri2) tüm gözlemleri içerir ve sol veri çerçevesinde (veri1) eşleşen değerler varsa birleştirir.",
    "crumbs": [
      "Veri Birleştirme"
    ]
  },
  {
    "objectID": "data_join.html#inner_join",
    "href": "data_join.html#inner_join",
    "title": "Veri Birleştirme",
    "section": "inner_join",
    "text": "inner_join\ninner_join() fonksiyonu, sol ve sağ veri çerçeveleri arasında iç birleştirme yapar ve yalnızca ortak gözlemleri korur. Ortak gözlemleri içermeyen diğer gözlemleri atar.\n\nbirlesik_veri &lt;- inner_join(veri1, veri2, by = \"Oğrenci\")\n\nprint(birlesik_veri)\n\n  Oğrenci Puan1 Puan2\n1     Ali    90    88\n\n\nBu kod, sadece sol ve sağ veri çerçevelerinde (veri1 ve veri2) ortak olan gözlemleri korur.",
    "crumbs": [
      "Veri Birleştirme"
    ]
  },
  {
    "objectID": "data_join.html#full_join",
    "href": "data_join.html#full_join",
    "title": "Veri Birleştirme",
    "section": "full_join",
    "text": "full_join\nfull_join() fonksiyonu, sol ve sağ veri çerçeveleri arasında tam birleştirme yapar ve tüm gözlemleri korur. Ortak olmayan değerler NA ile doldurulur.\n\nbirlesik_veri &lt;- full_join(veri1, veri2, by = \"Oğrenci\")\n\nprint(birlesik_veri)\n\n  Oğrenci Puan1 Puan2\n1     Ali    90    88\n2    Esra    85    NA\n3   Osman    78    NA\n4   Derya    NA    92\n5   Merve    NA    85\n\n\nBu kod, sol ve sağ veri çerçevelerini (veri1 ve veri2) tamamen birleştirir ve tüm gözlemleri içerir.\n\n\n\n\n\n\nNot\n\n\n\nBu dört join fonksiyonu, farklı veri kaynaklarını birleştirme işlemlerinde kullanılır ve veri analizi sürecinde verileri daha kapsamlı bir şekilde incelemek için oldukça kullanışlıdır. Hangi join işleminin kullanılacağı, veri yapısına ve ihtiyaca bağlı olarak değişebilir.",
    "crumbs": [
      "Veri Birleştirme"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "R Programlama",
    "section": "",
    "text": "Önsöz\nR programlama dili, veri bilimi dünyasında vazgeçilmez bir araç haline geldi. Bu kitap, veri manipülasyonundan görselleştirmeye, keşifçi veri analizinden temel istatistik konularına kadar geniş bir yelpazede R dilini kullanarak veri analizi becerilerinizi güçlendirmenize odaklanıyor.\nKitabımız, R programlama dilini temel seviyeden başlayarak adım adım öğrenmek isteyen herkes için tasarlandı. İlk bölümlerde R dilinin temellerini kavrayacak ve dplyr gibi güçlü paketler aracılığıyla veri manipülasyonunun inceliklerini keşfedeceksiniz. Veri analizinin görselleştirme aşamasında ggplot2 paketiyle nasıl etkileyici grafikler oluşturabileceğinizi adım adım öğrenecek ve veri setlerinizin hikayesini çarpıcı görsellerle anlatacaksınız.\nKitabımız, keşifçi veri analizi sürecinde size rehberlik ederken, veri işleme tekniklerini ve önemli istatistik kavramlarını pratik örneklerle ele alacak. Temel istatistik kolları üzerine odaklanarak, veri setlerinizdeki deseni anlamak ve çözümlemek için gerekli araçları edineceksiniz. Ayrıca doğrusal regresyon gibi önemli modelleme tekniklerini R dilinde nasıl uygulayabileceğinizi adım adım öğreneceksiniz.\nBu kitabın amacı, R programlama dilini veri analizi süreçlerinizde güvenle kullanmanıza yardımcı olmak ve veri odaklı kararlar almanızı desteklemektir. Bilgi birikiminizi genişletirken öğrendiklerinizi uygulamaya dökme şansına sahip olacaksınız. Umarım bu kitap, veri analizi yolculuğunuzda size rehberlik eder ve R dilini kullanarak veriyle olan etkileşiminizi daha da derinleştirir.",
    "crumbs": [
      "Önsöz"
    ]
  },
  {
    "objectID": "data_transformation.html",
    "href": "data_transformation.html",
    "title": "Veri Dönüştürme",
    "section": "",
    "text": "Uzun Format Dönüşümü - pivot_longer\nGeniş formatlı (wide format) veriyi uzun formatlı (long format) hale dönüştürmek için kullanılır. Her bir sütunun bir değişkeni temsil ettiği geniş formatlı veri setlerini, her bir gözlemi temsil eden uzun formatlı veri setlerine dönüştürmek için kullanılır.\npivot_longer(data, cols, names_to, values_to, names_prefix = NULL, names_sep = \"_\", names_pattern = NULL, ...)\nÇeşitli örnekler yapmak için billboard veri setini kullanalım. billboard veri seti, tidyr paketinde bulunan ve müzik endüstrisindeki popülerlik sıralamalarını içeren bir veri setidir. Veri seti, 1999-2000 yılları arasında Billboard Hot 100 listesindeki şarkıların haftalık sıralamalarını içerir. Her bir hafta için bir sütun bulunur ve bu sütunlar, o haftadaki şarkıların sıralamalarını içerir. Öncelikle veri setini inceleyelim.\nlibrary(tidyr)\nbillboard\n\n# A tibble: 317 × 79\n   artist     track date.entered   wk1   wk2   wk3   wk4   wk5   wk6   wk7   wk8\n   &lt;chr&gt;      &lt;chr&gt; &lt;date&gt;       &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1 2 Pac      Baby… 2000-02-26      87    82    72    77    87    94    99    NA\n 2 2Ge+her    The … 2000-09-02      91    87    92    NA    NA    NA    NA    NA\n 3 3 Doors D… Kryp… 2000-04-08      81    70    68    67    66    57    54    53\n 4 3 Doors D… Loser 2000-10-21      76    76    72    69    67    65    55    59\n 5 504 Boyz   Wobb… 2000-04-15      57    34    25    17    17    31    36    49\n 6 98^0       Give… 2000-08-19      51    39    34    26    26    19     2     2\n 7 A*Teens    Danc… 2000-07-08      97    97    96    95   100    NA    NA    NA\n 8 Aaliyah    I Do… 2000-01-29      84    62    51    41    38    35    35    38\n 9 Aaliyah    Try … 2000-03-18      59    53    38    28    21    18    16    14\n10 Adams, Yo… Open… 2000-08-26      76    76    74    69    68    67    61    58\n# ℹ 307 more rows\n# ℹ 68 more variables: wk9 &lt;dbl&gt;, wk10 &lt;dbl&gt;, wk11 &lt;dbl&gt;, wk12 &lt;dbl&gt;,\n#   wk13 &lt;dbl&gt;, wk14 &lt;dbl&gt;, wk15 &lt;dbl&gt;, wk16 &lt;dbl&gt;, wk17 &lt;dbl&gt;, wk18 &lt;dbl&gt;,\n#   wk19 &lt;dbl&gt;, wk20 &lt;dbl&gt;, wk21 &lt;dbl&gt;, wk22 &lt;dbl&gt;, wk23 &lt;dbl&gt;, wk24 &lt;dbl&gt;,\n#   wk25 &lt;dbl&gt;, wk26 &lt;dbl&gt;, wk27 &lt;dbl&gt;, wk28 &lt;dbl&gt;, wk29 &lt;dbl&gt;, wk30 &lt;dbl&gt;,\n#   wk31 &lt;dbl&gt;, wk32 &lt;dbl&gt;, wk33 &lt;dbl&gt;, wk34 &lt;dbl&gt;, wk35 &lt;dbl&gt;, wk36 &lt;dbl&gt;,\n#   wk37 &lt;dbl&gt;, wk38 &lt;dbl&gt;, wk39 &lt;dbl&gt;, wk40 &lt;dbl&gt;, wk41 &lt;dbl&gt;, wk42 &lt;dbl&gt;, …\nartist: Şarkının sanatçısının adı.\ntrack: Şarkının adı.\ndate.entered: Şarkının Billboard Hot 100 listesine girdiği tarih.\nwk1, wk2, …, wk76: Haftalık sıralama bilgilerini içeren sütunlar. Her bir sütun, bir haftaya ait sıralamaları içerir. Örneğin, wk1 sütunu, şarkının ilk haftadaki sıralamasını içerir.\nBu değişkenler, şarkıların sanatçıları, adları ve haftalık sıralamaları gibi bilgileri içerir. Veri setindeki haftalık sıralama sütunları, her bir hafta için şarkıların sıralamasını içerir. Bu sıralama bilgileri, her bir hafta için bir sütunda bulunur ve bu sütunlar “wk1”, “wk2”, …, “wk76” gibi adlarla temsil edilir.\nDikkat edilirse tablonun 317 satır ve 79 sütundan oluştuğu görülmektedir. Ayrıca hafta değişkenleri yatay olarak herbiri ayrı kolonlarda hafta numaraları ile belirtilmektedir. Şimdi bu verii uzun formata dönüştürerek daha kullanışlı bir formata dönüştürelim.\nbillboard_long &lt;- billboard |&gt; \n  pivot_longer(\n    cols = starts_with(\"wk\"), \n    names_to = \"week\", \n    values_to = \"rank\",\n    values_drop_na = TRUE\n  )\n\nbillboard_long\n\n# A tibble: 5,307 × 5\n   artist  track                   date.entered week   rank\n   &lt;chr&gt;   &lt;chr&gt;                   &lt;date&gt;       &lt;chr&gt; &lt;dbl&gt;\n 1 2 Pac   Baby Don't Cry (Keep... 2000-02-26   wk1      87\n 2 2 Pac   Baby Don't Cry (Keep... 2000-02-26   wk2      82\n 3 2 Pac   Baby Don't Cry (Keep... 2000-02-26   wk3      72\n 4 2 Pac   Baby Don't Cry (Keep... 2000-02-26   wk4      77\n 5 2 Pac   Baby Don't Cry (Keep... 2000-02-26   wk5      87\n 6 2 Pac   Baby Don't Cry (Keep... 2000-02-26   wk6      94\n 7 2 Pac   Baby Don't Cry (Keep... 2000-02-26   wk7      99\n 8 2Ge+her The Hardest Part Of ... 2000-09-02   wk1      91\n 9 2Ge+her The Hardest Part Of ... 2000-09-02   wk2      87\n10 2Ge+her The Hardest Part Of ... 2000-09-02   wk3      92\n# ℹ 5,297 more rows\nBu şekilde, pivot_longer fonksiyonu kullanılarak “wk” ile başlayan sütunlar uzun formata dönüştürülür ve her bir hafta için şarkı sıralamaları tek bir sütun altında toplanır. “week” sütunu, hafta numaralarını, “rank” sütunu ise şarkı sıralamalarını içerir.\ndim(billboard_long)\n\n[1] 5307    5\nUzun formata dönüştürüldükten sonra, her bir hafta için her bir şarkının sıralamasını içeren sütunlar tek bir sütun altında toplanır. Bu, sütun sayısının azaldığı anlamına gelirken, satır sayısının arttığı anlamına gelir. Dolayısıyla, tablo boyutunda bir değişiklik olur. Örneğin, başlangıçta her hafta için bir sütun vardı ve bu sütunlar “wk1”, “wk2”, …, “wk76” olarak adlandırılıyordu. Ancak uzun formata dönüştürdükten sonra, her bir şarkının her hafta için bir sıralama değeri içeren bir sütunu vardır. Bu, sütun sayısının arttığı ve satır sayısının da arttığı bir durumdur. Dolayısı ile uzun tablonun boyutu 5307 satır ve 5 kolondan oluşmaktadır.\nEğer veri setini daha düzenli hale getirmek amacıyla week kolonundaki değerlerin başındak wk ifadesini kaldırmak istersek aşağıdaki şekilde bir düzenleme yapabiliriz.\nbillboard |&gt; \n  pivot_longer(\n    cols = starts_with(\"wk\"), \n    names_to = \"week\", \n    names_transform = readr::parse_number,\n    values_to = \"rank\",\n    values_drop_na = TRUE,\n  )\n\n# A tibble: 5,307 × 5\n   artist  track                   date.entered  week  rank\n   &lt;chr&gt;   &lt;chr&gt;                   &lt;date&gt;       &lt;dbl&gt; &lt;dbl&gt;\n 1 2 Pac   Baby Don't Cry (Keep... 2000-02-26       1    87\n 2 2 Pac   Baby Don't Cry (Keep... 2000-02-26       2    82\n 3 2 Pac   Baby Don't Cry (Keep... 2000-02-26       3    72\n 4 2 Pac   Baby Don't Cry (Keep... 2000-02-26       4    77\n 5 2 Pac   Baby Don't Cry (Keep... 2000-02-26       5    87\n 6 2 Pac   Baby Don't Cry (Keep... 2000-02-26       6    94\n 7 2 Pac   Baby Don't Cry (Keep... 2000-02-26       7    99\n 8 2Ge+her The Hardest Part Of ... 2000-09-02       1    91\n 9 2Ge+her The Hardest Part Of ... 2000-09-02       2    87\n10 2Ge+her The Hardest Part Of ... 2000-09-02       3    92\n# ℹ 5,297 more rows\nBu kodda, pivot_longer fonksiyonunu kullanarak “wk” ile başlayan sütunları uzun formata dönüştürüyoruz. Ancak, bu sefer names_transform argümanını da kullanıyoruz. Bu argüman, sütun adlarından sayısal değerleri çıkarmak için readr::parse_number fonksiyonunu kullanır.\nnames_transform = readr::parse_number ifadesiyle, sütun adlarından “wk” ifadesini ve ardından gelen sayısal değerleri ayırıyoruz. Örneğin, “wk1”, “wk2”, …, “wk76” gibi sütun adlarından sadece sayısal kısmı alarak, her bir sütunun haftayı temsil etmesini sağlıyoruz. Böylelikle, uzun formata dönüşümü daha anlamlı hale getiriyoruz. Artık her bir sütun, hangi haftaya ait olduğunu temsil ederken, her bir satır bir şarkının o haftaki sıralamasını içerir. Bu sayede, veri seti daha düzenli hale gelir ve analizler için daha uygun hale gelir.",
    "crumbs": [
      "Veri Dönüştürme"
    ]
  },
  {
    "objectID": "data_transformation.html#uzun-format-dönüşümü---pivot_longer",
    "href": "data_transformation.html#uzun-format-dönüşümü---pivot_longer",
    "title": "Veri Dönüştürme",
    "section": "",
    "text": "Kullanım Alanları:\n\nÇapraz-tablo verilerini analiz etmek veya görselleştirmek için.\nİstatistiksel analizlerde veri hazırlığı sürecinde, bazı modellere uygun hale getirmek için.\nVeri setindeki değişkenlerin (sütunların) gruplandırılması veya kategorize edilmesi gerektiğinde.\n\n\n\n\ndata: İşlem yapılacak olan veri seti.\ncols: Uzun formatlı hale dönüştürülecek sütunların belirtilmesi.\nnames_to: Yeni oluşturulacak sütunun adı.\nvalues_to: Sütun içerisindeki değerlerin yer alacağı sütunun adı.\nDiğer argümanlar, isteğe bağlı olarak sütun adlarının belirtilmesi için kullanılır.\n\n\n\n\n\n\n\n\n\n\n\nbillboard |&gt;: Bu ifade, “billboard” veri setini işlemek üzere bir dizi dplyr fonksiyonuna (veya tidyverse fonksiyonuna) zincirlenmiş bir işlem başlatır. |&gt; operatörü, bir işlemin çıktısını bir sonraki işlemin ilk argümanı olarak kullanmamızı sağlar.\npivot_longer(): Bu fonksiyon, veri setindeki sütunları uzun formata dönüştürmek için kullanılır. Yani, sütunları satırlara dönüştürür. Bu örnekte, pivot_longer fonksiyonu kullanılarak sütunlar uzun formata dönüştürülecektir.\ncols = starts_with(\"wk\"): pivot_longer fonksiyonunun ilk argümanı olan cols, dönüştürülecek sütunların seçimini belirler. Bu durumda, “wk” ile başlayan sütunlar seçilir. “wk” ile başlayan sütunlar, haftalık müzik sıralamalarını içerir.\nnames_to = \"week\": pivot_longer fonksiyonunun ikinci argümanı olan names_to, dönüştürülen sütunların isimlerinin atanacağı yeni sütunun adını belirler. Bu durumda, dönüştürülen sütunların isimleri “week” olarak atanacaktır.\nvalues_to = \"rank\": pivot_longer fonksiyonunun üçüncü argümanı olan values_to, dönüştürülen sütunlardaki değerlerin atanacağı yeni sütunun adını belirler. Bu durumda, dönüştürülen sütunlardaki değerler “rank” olarak atanacaktır.\nvalues_drop_na = TRUE: Bu parametre, dönüştürülen sütunlardaki NA değerlerin (boş hücrelerin) kaldırılıp kaldırılmayacağını belirler. TRUE olarak ayarlandığında, NA değerler kaldırılır. Bu, dönüştürülen sütunlardaki eksik değerlerin işlenme şeklini kontrol eder. Bu örnekte, NA değerler kaldırılarak işlenir.\n\n\n\n\n\n\n\n\n\n\nÖnemli\n\n\n\nEğer values_drop_na = TRUE argümanında FALSE değerini kullansaydık daha fazla satır sayısına sahip bir sonuç elde ederdik.\n\nbillboard_long_with_na &lt;- billboard |&gt; \n  pivot_longer(\n    cols = starts_with(\"wk\"), \n    names_to = \"week\", \n    values_to = \"rank\",\n    values_drop_na = FALSE\n  )\n\ndim(billboard_long_with_na)\n\n[1] 24092     5\n\n\nBu şekilde üretilen tablonu satır sayısına baktığımızda 24092 satır olduğunu görürüz. Bu aslında başlangıçta yer alan 317 satırın 76 hafta verisi (wk ile başlayan 76 hafta olduğundan) ile tekrarlaması anlamına gelir. Doğal olarak 317 * 76 = 24092 satır sayısı ortaya çıkar ve wk ile başlamayan sütunlar da tekrar ederek satırlarda oluşur.\n\n\n\n\n\n\n\n\n\n\n\n\nAlternatif Yol\n\n\n\nBu amaçla aşağıdaki kod da benzer işi yapmaktadır.\n\nbillboard |&gt; \n  pivot_longer(\n    cols = starts_with(\"wk\"), \n    names_to = \"week\", \n    names_prefix = \"wk\",   # Her bir değişken adının başından \"wk\" metni kaldırır\n    names_transform = as.integer,   # Sütun adlarından sayısal değerleri alır\n    values_to = \"rank\",\n    values_drop_na = TRUE,\n  )\n\n# A tibble: 5,307 × 5\n   artist  track                   date.entered  week  rank\n   &lt;chr&gt;   &lt;chr&gt;                   &lt;date&gt;       &lt;int&gt; &lt;dbl&gt;\n 1 2 Pac   Baby Don't Cry (Keep... 2000-02-26       1    87\n 2 2 Pac   Baby Don't Cry (Keep... 2000-02-26       2    82\n 3 2 Pac   Baby Don't Cry (Keep... 2000-02-26       3    72\n 4 2 Pac   Baby Don't Cry (Keep... 2000-02-26       4    77\n 5 2 Pac   Baby Don't Cry (Keep... 2000-02-26       5    87\n 6 2 Pac   Baby Don't Cry (Keep... 2000-02-26       6    94\n 7 2 Pac   Baby Don't Cry (Keep... 2000-02-26       7    99\n 8 2Ge+her The Hardest Part Of ... 2000-09-02       1    91\n 9 2Ge+her The Hardest Part Of ... 2000-09-02       2    87\n10 2Ge+her The Hardest Part Of ... 2000-09-02       3    92\n# ℹ 5,297 more rows\n\n\nBu kod parçası öncekiyle benzer bir dönüşüm gerçekleştiriyor ancak birkaç farklılık bulunuyor.\n\nnames_prefix = \"wk\" : Bu argüman her bir değişken adının başından “wk” metni kaldırır. Yani, “wk1”, “wk2”, …, “wk76” gibi sütun adlarından “wk” metni kaldırılır. Bu, her bir sütunun hangi haftaya ait olduğunu temsil eden sayısal değerlerin elde edilmesini sağlar.\nnames_transform = as.integer: Bu argüman, sütun adlarından sayısal değerleri almak için as.integer fonksiyonunu kullanır. Önceki örnekte olduğu gibi, sütun adlarından sayıları alırken bu sefer as.integer fonksiyonunu kullanarak sayıları dönüştürürüz.\n\nBu dönüşüm, önceki örnekle benzerdir ancak sütun adlarının öne eklenmesi ve sayısal dönüşümün yapıldığı yerdeki farklılıklar dikkate alınmalıdır. Bu farklılıklar, dönüşüm sonucunda elde edilen uzun formatlı veri setinin nasıl yapılandırıldığına ve nasıl yorumlanacağına etki edebilir.",
    "crumbs": [
      "Veri Dönüştürme"
    ]
  },
  {
    "objectID": "data_transformation.html#geniş-format-dönüşümü---pivot_wider",
    "href": "data_transformation.html#geniş-format-dönüşümü---pivot_wider",
    "title": "Veri Dönüştürme",
    "section": "Geniş Format Dönüşümü - pivot_wider",
    "text": "Geniş Format Dönüşümü - pivot_wider\nUzun formatlı (long format) veriyi geniş formatlı (wide format) hale dönüştürmek için kullanılır. Her bir gözlemi temsil eden uzun formatlı veri setlerini, her bir sütunun bir değişkeni temsil ettiği geniş formatlı veri setlerine dönüştürmek için kullanılır.\n\nKullanım Alanları:\n\nÇapraz-tablo verilerini oluşturmak için.\nUzun formatlı veri setlerini daha okunabilir ve anlamlı bir şekilde görselleştirmek için.\nVeri setindeki bazı grupların veya kategorilerin karşılaştırılması için.\n\n\n\npivot_wider(data, names_from, values_from, values_fn = list, values_fill = list(), names_prefix = NULL, names_sep = \"_\", names_repair = \"check_unique\", id_cols = NULL, values_fn_args = list(), ...)\n\n\ndata: İşlem yapılacak olan veri seti.\nnames_from: Geniş formatlı hale dönüştürülecek olan sütunların adı.\nvalues_from: Yeni sütunlara değerlerin alınacağı sütunun adı.\nDiğer argümanlar, isteğe bağlı olarak sütun adlarının belirtilmesi ve eksik değerlerin doldurulması için kullanılır.\n\nBu fonksiyon ile bazı örnekler yapmak için tidyr paketindeki us_rent_income veri setini kullanabiliriz. Veri seti 2017 yılına ait American Community Survey ile edilmiştir. Bu araştırma Amerika Birleşik Devletleri’nde federal hükümet tarafından her yıl gerçekleştirilen bir nüfus sayımı ve sosyo-ekonomik anket programıdır. Bu anket, Amerika’nın demografik ve ekonomik özellikleri hakkında geniş kapsamlı veriler sağlar.\n\nus_rent_income\n\n# A tibble: 104 × 5\n   GEOID NAME       variable estimate   moe\n   &lt;chr&gt; &lt;chr&gt;      &lt;chr&gt;       &lt;dbl&gt; &lt;dbl&gt;\n 1 01    Alabama    income      24476   136\n 2 01    Alabama    rent          747     3\n 3 02    Alaska     income      32940   508\n 4 02    Alaska     rent         1200    13\n 5 04    Arizona    income      27517   148\n 6 04    Arizona    rent          972     4\n 7 05    Arkansas   income      23789   165\n 8 05    Arkansas   rent          709     5\n 9 06    California income      29454   109\n10 06    California rent         1358     3\n# ℹ 94 more rows\n\n\nVeri setinde 104 satır ve 5 sütun bulunmaktadır.\n\nGEOID: Bu değişken, Amerika Birleşik Devletleri’ndeki belirli bir coğrafi alanın benzersiz kimlik numarasını içerir. FIP state identifier olarak bilinen bu değişken, Amerika Birleşik Devletleri’ndeki bir eyaletin Federal Bilgi İşlem Standartları (FIPS) kodunu içerir.\nNAME: Bu değişken, eyaletin veya coğrafi bölgenin adını içerir.\nvariable: Bu değişken, veri setinde ölçülen değişkenin adını belirtir. İki farklı değer alabilir: “income” (ortalama yıllık gelir) veya “rent” (ortalama aylık kira).\nestimate: Bu değişken, belirli bir coğrafi alandaki tahmini değeri içerir. Örneğin, belirli bir eyalet için ortalama yıllık gelir veya ortalama aylık kira miktarı gibi.\nmoe: Bu değişken, tahmini değerin 90% güven aralığı içindeki marj hatasını (margin of error) içerir. Marj hatası, tahmini değerin gerçek değerden ne kadar sapabileceğini gösterir. Bu, tahminin güvenilirliğini değerlendirmeye yardımcı olur.\n\n\nus_rent_income |&gt; \n  pivot_wider(\n    names_from = variable,\n    values_from = c(estimate, moe)\n  )\n\n# A tibble: 52 × 6\n   GEOID NAME                 estimate_income estimate_rent moe_income moe_rent\n   &lt;chr&gt; &lt;chr&gt;                          &lt;dbl&gt;         &lt;dbl&gt;      &lt;dbl&gt;    &lt;dbl&gt;\n 1 01    Alabama                        24476           747        136        3\n 2 02    Alaska                         32940          1200        508       13\n 3 04    Arizona                        27517           972        148        4\n 4 05    Arkansas                       23789           709        165        5\n 5 06    California                     29454          1358        109        3\n 6 08    Colorado                       32401          1125        109        5\n 7 09    Connecticut                    35326          1123        195        5\n 8 10    Delaware                       31560          1076        247       10\n 9 11    District of Columbia           43198          1424        681       17\n10 12    Florida                        25952          1077         70        3\n# ℹ 42 more rows\n\n\nBu kod, us_rent_income veri setini pivot_wider() fonksiyonu ile veri setindeki uzun formattan geniş formata dönüştürmeye olanak tanır.\n\nnames_from = variable: Bu argüman, genişletilecek sütunların isimlerini belirtir. Burada variable değişkeni kullanılarak genişletilecek sütunlar belirlenir. Bu durumda, variable değişkenindeki değerler (income ve rent) sütun adlarına dönüştürülecek.\nvalues_from = c(estimate, moe): Bu argüman, yeni genişletilmiş sütunların değerlerinin hangi sütunlardan alınacağını belirtir. estimate ve moe sütunlarındaki değerler, genişletilmiş sütunların içeriğini oluşturur.\n\nSonuç olarak, bu kod us_rent_income veri setini income_estimate, income_moe, rent_estimate ve rent_moe olmak üzere dört yeni sütun içeren bir geniş formatlı veri setine dönüştürür.\nDikkat edilirse değişken isimlerinin arasına \"_\" ifadesi konmuştur. Bu ifadenin gelmesinin sebebi, pivot_wider() fonksiyonunda kullanılan names_sep parametresinin varsayılan değerinin \"_\" olmasından kaynaklıdır. Eğer names_sep parametresi belirtilmezse değişken isimlerinin arasında \"_\" kullanılır.\nBu nedenle, values_from = c(estimate, moe) ifadesindeki estimate ve moe sütunları, genişletilmiş sütunların adlarında alt çizgi ile ayrılır. Sonuç olarak, yeni oluşturulan sütunlar income_estimate, income_moe, rent_estimate ve rent_moe adlarına sahip olur. Eğer \"_\" yerine \".\" (nokta) koymak istersek kodu aşağıdaki şekilde güncellememiz gerekir.\n\nus_rent_income |&gt; \n  pivot_wider(\n    names_from = variable,\n    values_from = c(estimate, moe),\n    names_sep = \".\"\n  )\n\n# A tibble: 52 × 6\n   GEOID NAME                 estimate.income estimate.rent moe.income moe.rent\n   &lt;chr&gt; &lt;chr&gt;                          &lt;dbl&gt;         &lt;dbl&gt;      &lt;dbl&gt;    &lt;dbl&gt;\n 1 01    Alabama                        24476           747        136        3\n 2 02    Alaska                         32940          1200        508       13\n 3 04    Arizona                        27517           972        148        4\n 4 05    Arkansas                       23789           709        165        5\n 5 06    California                     29454          1358        109        3\n 6 08    Colorado                       32401          1125        109        5\n 7 09    Connecticut                    35326          1123        195        5\n 8 10    Delaware                       31560          1076        247       10\n 9 11    District of Columbia           43198          1424        681       17\n10 12    Florida                        25952          1077         70        3\n# ℹ 42 more rows\n\n\nBaşka dikkat edilecek bir husus ise, değişken isminin önce variable değişkeninden gelmesi ve sonrasında değer ile ilgli kısımdan gelerek birleştirilmesidir. Örneğin \"estimate.income\" isminin noktadan önceki kısmı variable değişkeninden, sonraki kısmı ise income değişken isminden gelmektedir. Arzu edilirse bu durumun tersi de yapılabilir.\n\nus_rent_income |&gt; \n  pivot_wider(\n    names_from = variable,\n    names_glue = \"{variable}_{.value}\",\n    values_from = c(estimate, moe)\n  )\n\n# A tibble: 52 × 6\n   GEOID NAME                 income_estimate rent_estimate income_moe rent_moe\n   &lt;chr&gt; &lt;chr&gt;                          &lt;dbl&gt;         &lt;dbl&gt;      &lt;dbl&gt;    &lt;dbl&gt;\n 1 01    Alabama                        24476           747        136        3\n 2 02    Alaska                         32940          1200        508       13\n 3 04    Arizona                        27517           972        148        4\n 4 05    Arkansas                       23789           709        165        5\n 5 06    California                     29454          1358        109        3\n 6 08    Colorado                       32401          1125        109        5\n 7 09    Connecticut                    35326          1123        195        5\n 8 10    Delaware                       31560          1076        247       10\n 9 11    District of Columbia           43198          1424        681       17\n10 12    Florida                        25952          1077         70        3\n# ℹ 42 more rows\n\n\nnames_glue parametresi, sütun adlarını oluşturmak için bir şablon sağlar. {variable}_{.value} ifadesi, yeni oluşturulan sütunların adlarını belirler. {variable} değişkenin adını, .value ise genişletilen değerlerin adını temsil eder. Örneğin, income_estimate, income_moe, rent_estimate ve rent_moe sütunlarına denk gelir.\nYapacağımız diğer bir örnek ise veri setinde olmayan bir durum olduğunda boş gelebilecek gözlemlere ne işlem yapılacağıdır. Örneğin veri setinin ilk satırındaki Alabama eyaletine ilişkin income verilerinin hiç olmadığını varsayalım.\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nus_rent_income |&gt; \n  slice(-1) # ilk gözlem haricindeki satırlar seçilir\n\n# A tibble: 103 × 5\n   GEOID NAME       variable estimate   moe\n   &lt;chr&gt; &lt;chr&gt;      &lt;chr&gt;       &lt;dbl&gt; &lt;dbl&gt;\n 1 01    Alabama    rent          747     3\n 2 02    Alaska     income      32940   508\n 3 02    Alaska     rent         1200    13\n 4 04    Arizona    income      27517   148\n 5 04    Arizona    rent          972     4\n 6 05    Arkansas   income      23789   165\n 7 05    Arkansas   rent          709     5\n 8 06    California income      29454   109\n 9 06    California rent         1358     3\n10 08    Colorado   income      32401   109\n# ℹ 93 more rows\n\n\nBu durumda veri setinin geniş formata dönüştürmek istersek income değişkenleri kayıp gözlem yani NA olarak değerlendirilir.\n\nus_rent_income |&gt; \n  slice(-1) |&gt; \n  pivot_wider(\n    names_from = variable,\n    values_from = c(estimate,moe),\n    \n  )\n\n# A tibble: 52 × 6\n   GEOID NAME                 estimate_rent estimate_income moe_rent moe_income\n   &lt;chr&gt; &lt;chr&gt;                        &lt;dbl&gt;           &lt;dbl&gt;    &lt;dbl&gt;      &lt;dbl&gt;\n 1 01    Alabama                        747              NA        3         NA\n 2 02    Alaska                        1200           32940       13        508\n 3 04    Arizona                        972           27517        4        148\n 4 05    Arkansas                       709           23789        5        165\n 5 06    California                    1358           29454        3        109\n 6 08    Colorado                      1125           32401        5        109\n 7 09    Connecticut                   1123           35326        5        195\n 8 10    Delaware                      1076           31560       10        247\n 9 11    District of Columbia          1424           43198       17        681\n10 12    Florida                       1077           25952        3         70\n# ℹ 42 more rows\n\n\nEğer bu şekilde oluşan gözlemlere değer atamak istersek values_fill argümanını kullanabiliriz. Örneğin bu şekilde oluşan bir durumda NA değerlere 0 değerini atanmasını varsayalım. Aşağıki kod ile bunu gerçekleştirebiliriz.\n\nus_rent_income |&gt; \n  slice(-1) |&gt; \n  pivot_wider(\n    names_from = variable,\n    values_from = c(estimate,moe),\n    values_fill = 0\n  )\n\n# A tibble: 52 × 6\n   GEOID NAME                 estimate_rent estimate_income moe_rent moe_income\n   &lt;chr&gt; &lt;chr&gt;                        &lt;dbl&gt;           &lt;dbl&gt;    &lt;dbl&gt;      &lt;dbl&gt;\n 1 01    Alabama                        747               0        3          0\n 2 02    Alaska                        1200           32940       13        508\n 3 04    Arizona                        972           27517        4        148\n 4 05    Arkansas                       709           23789        5        165\n 5 06    California                    1358           29454        3        109\n 6 08    Colorado                      1125           32401        5        109\n 7 09    Connecticut                   1123           35326        5        195\n 8 10    Delaware                      1076           31560       10        247\n 9 11    District of Columbia          1424           43198       17        681\n10 12    Florida                       1077           25952        3         70\n# ℹ 42 more rows\n\n\n\n\n\n\n\n\nDikkat\n\n\n\nOrijinal veri setindeki eksik değerlerin zaten NA olduğu durumda values_fill kullanmak işe yaramaz. Çünkü mevcut durumda zaten veri setinde NA gözlem bulunmaktadır. values_fill dönüşüm sonrası oluşabilecek NA gözlemler için kullanılır.\nBu nedenle, values_fill parametresi yerine R içerisinde farklı opsiyonlar ile tüm NA değerlerini doldurmak daha uygun olacaktır. Yani, boş hücrelerin tümünü 0 ile doldurmak için values_fill parametresi kullanılmaz.",
    "crumbs": [
      "Veri Dönüştürme"
    ]
  },
  {
    "objectID": "data_transformation.html#değişken-birleştirme---unite",
    "href": "data_transformation.html#değişken-birleştirme---unite",
    "title": "Veri Dönüştürme",
    "section": "Değişken Birleştirme - unite",
    "text": "Değişken Birleştirme - unite\nBelirli sütunlardaki değerleri birleştirerek yeni bir sütun oluşturmak için kullanılır. Genellikle, ayrı sütunlarda bulunan bilgileri birleştirerek yeni bir kategorik değişken oluşturmak için kullanılır.\n\nKullanım Alanları:\n\nBirden fazla sütundaki bilgileri tek bir değişkende birleştirme.\nTarih ve saat gibi bilgileri tek bir sütunda birleştirme.\n\n\n\nunite(data, col, ..., sep = \"_\", remove = TRUE)\n\n\ndata: İşlem yapılacak olan veri seti.\ncol: Birleştirilen sütunun adı.\n...: Birleştirilecek olan sütunların adları.\nsep: Birleştirme işlemi sırasında kullanılacak ayırıcı karakter.\nremove: Orijinal sütunları kaldırma veya koruma seçeneği.\n\n\nadresler &lt;- tibble(\n  sokak = c(\"Örnek Sokak\", \"Şehitler Caddesi\", \"Atatürk Bulvarı\"),\n  mahalle = c(\"Merkez\", \"Güneşli\", \"Bahçelievler\"),\n  ilce = c(\"Çankaya\", \"Bağcılar\", \"Üsküdar\"),\n  sehir = c(\"Ankara\", \"İstanbul\", \"İstanbul\"),\n  posta_kodu = c(\"06000\", \"34100\", \"34662\")\n)\n\nadresler\n\n# A tibble: 3 × 5\n  sokak            mahalle      ilce     sehir    posta_kodu\n  &lt;chr&gt;            &lt;chr&gt;        &lt;chr&gt;    &lt;chr&gt;    &lt;chr&gt;     \n1 Örnek Sokak      Merkez       Çankaya  Ankara   06000     \n2 Şehitler Caddesi Güneşli      Bağcılar İstanbul 34100     \n3 Atatürk Bulvarı  Bahçelievler Üsküdar  İstanbul 34662     \n\nadresler_unite &lt;- adresler %&gt;%\n  unite(adres, sokak, mahalle, ilce, sehir, posta_kodu, sep = \", \")\n\nadresler_unite\n\n# A tibble: 3 × 1\n  adres                                                  \n  &lt;chr&gt;                                                  \n1 Örnek Sokak, Merkez, Çankaya, Ankara, 06000            \n2 Şehitler Caddesi, Güneşli, Bağcılar, İstanbul, 34100   \n3 Atatürk Bulvarı, Bahçelievler, Üsküdar, İstanbul, 34662\n\n\nBu kod, adres bileşenlerini her birinin arasına \",\" koyarak birleştirir ve “adres” sütununu oluşturur. Varsayılan olarak, remove = TRUE olduğundan, unite() fonksiyonu, birleştirilen sütunları oluşturduktan sonra orijinal sütunları kaldırır. Eğer remove = FALSE olarak ayarlanırsa, unite() fonksiyonu, birleştirilen sütunları oluştururken orijinal sütunları kaldırmaz. Bu durumda, hem birleştirilen sütunlar hem de orijinal sütunlar veri setinde kalır.",
    "crumbs": [
      "Veri Dönüştürme"
    ]
  },
  {
    "objectID": "data_transformation.html#değişken-bölme--separate",
    "href": "data_transformation.html#değişken-bölme--separate",
    "title": "Veri Dönüştürme",
    "section": "Değişken Bölme- separate",
    "text": "Değişken Bölme- separate\nBir sütundaki değerleri belirli bir ayırıcıya göre parçalayarak yeni sütunlar oluşturmak için kullanılır. Genellikle, tek bir sütunda bulunan bilgileri ayrı ayrı sütunlara bölmek için kullanılır.\n\nKullanım Alanları:\n\nTek bir sütundaki bilgileri ayrı ayrı sütunlara bölmek.\nTarih, saat veya adres gibi bilgileri ayrı sütunlara bölmek.\n\n\n\nseparate(data, col, into, sep = \"[^[:alnum:]]+\", remove = TRUE, convert = FALSE, extra = \"warn\", fill = \"warn\")\n\n\ndata: İşlem yapılacak olan veri seti.\ncol: Parçalanacak olan sütunun adı.\ninto: Oluşturulacak yeni sütunların adları.\nsep: Parçalama işlemi sırasında kullanılacak ayırıcı karakter.\nDiğer argümanlar, isteğe bağlı olarak sütunların türünün dönüştürülmesi ve eksik değerlerin doldurulması için kullanılır.\n\n\nseparate(adresler_unite, adres, into = c(\"sokak\", \"mahalle\",\"ilce\",\"sehir\",\"posta_kodu\"), sep = \",\")\n\n# A tibble: 3 × 5\n  sokak            mahalle         ilce        sehir       posta_kodu\n  &lt;chr&gt;            &lt;chr&gt;           &lt;chr&gt;       &lt;chr&gt;       &lt;chr&gt;     \n1 Örnek Sokak      \" Merkez\"       \" Çankaya\"  \" Ankara\"   \" 06000\"  \n2 Şehitler Caddesi \" Güneşli\"      \" Bağcılar\" \" İstanbul\" \" 34100\"  \n3 Atatürk Bulvarı  \" Bahçelievler\" \" Üsküdar\"  \" İstanbul\" \" 34662\"  \n\n\nÖnceki bölümde oluşturduğumuz birleşik adres sütunu, bu kod ile bileşenlerine ayrıştırılmaktadır.",
    "crumbs": [
      "Veri Dönüştürme"
    ]
  },
  {
    "objectID": "data_types.html",
    "href": "data_types.html",
    "title": "2  Veri Tipleri ve Yapıları",
    "section": "",
    "text": "2.1 Veri Tipleri\nR’da kulllanılan 5 temel veri tipi vardır. Bu veri tipleri atomic vectörler olarak da bilinir. Atomic olması vektörlerin homojen olması anlamına gelmektedir. Yani vektör içerisinde aynı veri tipinden değerler yer alabilir. Veri tipleri;\ntypeof() veya class() fonksiyonları ile veri tipi öğrenilebilir.\nnumeric\na &lt;- 3.5\nclass(a)\n\n[1] \"numeric\"\n\ntypeof(a) # typeof numeriklerin tipini double olarak gösterir.\n\n[1] \"double\"\n\nis.numeric(a) # verinin tipinin numerik olup olmadığı sorgulanır.\n\n[1] TRUE\ninteger\nb &lt;- 5\nclass(b)\n\n[1] \"numeric\"\n\nis.integer(b)\n\n[1] FALSE\n\nc &lt;- 6L # integer olması için sayının sağına L yazılır.\nclass(c)\n\n[1] \"integer\"\n\nis.integer(c)\n\n[1] TRUE\n\nclass(as.integer(b)) # as. ile baslayan fonksiyonlar dönüşüm için kullanılır.\n\n[1] \"integer\"\ncomplex\nz &lt;- 4 + 2i\nclass(z)\n\n[1] \"complex\"\ncharacter\nd &lt;- \"R Programlama\"\nclass(d)\n\n[1] \"character\"\n\ne &lt;- \"5.5\"\nclass(e)\n\n[1] \"character\"\n\nclass(as.numeric(e))\n\n[1] \"numeric\"\nlogical\nx &lt;- TRUE\ny &lt;- FALSE\nclass(c(x,y))\n\n[1] \"logical\"\n\nas.integer(c(x,y)) # TRUE ve FALSE numeric olarak 1 ve 0 değerine karşılık gelir.\n\n[1] 1 0",
    "crumbs": [
      "R Programlamaya Giriş",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Veri Tipleri ve Yapıları</span>"
    ]
  },
  {
    "objectID": "data_types.html#veri-tipleri",
    "href": "data_types.html#veri-tipleri",
    "title": "2  Veri Tipleri ve Yapıları",
    "section": "",
    "text": "numeric veya double (reel sayılar)\ninteger (tamsayılar)\ncomplex (karmaşık sayılar)\ncharacter (metinsel ifadeler)\nlogical, TRUE ve FALSE (mantıksal)\n\n\n\n\n\n\n\n\nÖnemli\n\n\n\ntypeof() ve class() fonksiyonları, R programlama dilinde nesnelerin özelliklerini sorgulamak için kullanılır. Farklı amaçlara hizmet ederler ve bazı durumlarda farklı sonuçlar üretebilirler.\n\ntypeof() fonksiyonu, bir nesnenin temel veri türünü belirler. Örneğin, bir nesnenin karakter dizisi (string), sayı, liste, fonksiyon veya vektör gibi temel veri türlerinden hangisine ait olduğunu gösterir. Ancak, nesnenin özel sınıfını (class) ifade etmez. Örneğin, bir faktörün typeof() değeri “integer” olabilir.\nclass() fonksiyonu ise bir nesnenin özel sınıfını belirtir. Eğer bir nesne özel bir sınıfa aitse (örneğin, bir veri çerçevesi veya faktör), class() fonksiyonu bu özel sınıfın adını verir. Eğer nesne birden fazla sınıfa aitse, sınıflar bir sıra halinde listelenir.\n\nBu fonksiyonlar genellikle birlikte kullanılır çünkü bir nesnenin veri tipi ve sınıfı arasında farklılıklar olabilir. Örneğin, bir veri çerçevesi typeof() ile incelendiğinde list çıkabilir, çünkü veri çerçeveleri bir liste türündedir. Ancak, class() fonksiyonu bu nesnenin özel sınıfını, yani data.frame olarak gösterecektir. Bu farklılıklar, bir nesnenin hangi özelliklere sahip olduğunu daha iyi anlamak için kullanılabilir.",
    "crumbs": [
      "R Programlamaya Giriş",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Veri Tipleri ve Yapıları</span>"
    ]
  },
  {
    "objectID": "data_types.html#veri-yapıları",
    "href": "data_types.html#veri-yapıları",
    "title": "2  Veri Tipleri ve Yapıları",
    "section": "2.2 Veri Yapıları",
    "text": "2.2 Veri Yapıları\n\n\n\nhttps://app.dataquest.io/m/493/dataframes-in-r/1/introduction\n\n\n\n2.2.1 Vektörler\n\nR’daki en temel nesneler vektörlerdir.\nVektörler homojen yapıya sahiptir yani bütün elemanları aynı veri tipinde olmalıdır.\nVektörler tek boyutludur.\nBir vektör oluşturmak için kullanabilecek en temel fonksiyon c()’dir.\n\n\nv &lt;- c(1,4,7,2,5,8,3,6,9)\n\nv[1] # 1. elemanını seçer\n\n[1] 1\n\nv[3] # 3. elemanını seçer\n\n[1] 7\n\nv[c(3,7)] # 3. ve 7. elemani secer\n\n[1] 7 3\n\nv[1:6] # 1. elemandan 6. elemana kadar secer\n\n[1] 1 4 7 2 5 8\n\nv[-2] # 2. elemani haric tutarak secer\n\n[1] 1 7 2 5 8 3 6 9\n\nlength(v) # vektörün uzunluğunu gösterir\n\n[1] 9\n\nv2 &lt;- c(v,12) # vektöre eleman ekleme\nv2\n\n [1]  1  4  7  2  5  8  3  6  9 12\n\n# : ile başlangıç ve bitiş değerleri belli olan vektörler yaratılabilir.\n\nv3 &lt;- 1:10\nv3\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\nv4 &lt;- 11:20\nv4\n\n [1] 11 12 13 14 15 16 17 18 19 20\n\n# Vektörler ile matematiksel işlemler yapılabilir.\n\nv3 + v4\n\n [1] 12 14 16 18 20 22 24 26 28 30\n\nv3 / v4\n\n [1] 0.09090909 0.16666667 0.23076923 0.28571429 0.33333333 0.37500000\n [7] 0.41176471 0.44444444 0.47368421 0.50000000\n\n2 * v3 - v4\n\n [1] -9 -8 -7 -6 -5 -4 -3 -2 -1  0\n\n\nAşağıda vektörler ile birlikte sıklıkla kulanılan bazı fonksiyonlara yer verilmiştir.\n\n2.2.1.1 seq\nseq() fonksiyonu, ardışık sayı dizileri oluşturmak için kullanılır. Bu fonksiyon, başlangıç ve bitiş değerlerinin yanı sıra belirli bir artış veya azalış miktarını belirterek ardışık bir dizi oluşturmanızı sağlar.\nseq() fonksiyonu genellikle üç temel parametre alır:\n\nfrom: Dizinin başlangıç değeri.\nto: Dizinin bitiş değeri.\nby: Opsiyonel olarak belirlenebilen artış/azalış miktarı.\n\n\nseq(from = 5, to = 50, by =5) # 5 ile başlayan 50 ile biten 5şer artan vektör\n\n [1]  5 10 15 20 25 30 35 40 45 50\n\nseq(from = 5, to = 50, length = 7) # 5 ile başlayan 50 ile 7 elemanlı vektör\n\n[1]  5.0 12.5 20.0 27.5 35.0 42.5 50.0\n\nseq(5,1,-1) # 5 ile baslayıp 1'e kadar 1'er azaltarak vektor olusturma\n\n[1] 5 4 3 2 1\n\n\n\n\n2.2.1.2 rep\nrep() fonksiyonu, R programlama dilinde tekrarlanan öğelerden oluşan vektörler oluşturmak için kullanılır. Bu fonksiyon, belirli bir öğenin veya öğelerin tekrarlanarak bir vektör oluşturulmasına izin verir.\nrep() fonksiyonunun temel parametreleri şunlardır:\n\nx: Tekrarlanacak öğelerin kendisi veya vektörü.\ntimes: Tekrar sayısını belirten bir sayı veya vektör.\neach: Her bir öğenin kaç kez tekrarlanacağını belirten bir sayı veya vektör.\nlength.out: çıktının istenen uzunluğu\n\n\n# 8 tane 10 değeri olan vektör\nrep(10,times = 8) \n\n[1] 10 10 10 10 10 10 10 10\n\n# 1,2,3 vektörünün 4 defa tekrarlanması\nrep(c(1,2,3), times = 4) \n\n [1] 1 2 3 1 2 3 1 2 3 1 2 3\n\n# each argünmanı ile sıralı ve tekrarlı vektör\nrep(c(1,2,3), each = 4)\n\n [1] 1 1 1 1 2 2 2 2 3 3 3 3\n\n# sadece ilk 4 elemanı verir\nrep(1:4, each = 2, length.out = 4) \n\n[1] 1 1 2 2\n\n\n\n\n2.2.1.3 all\nall() fonksiyonu, R programlama dilinde bir mantıksal vektörün tüm elemanlarının TRUE olup olmadığını kontrol etmek için kullanılır. Eğer vektörde en az bir FALSE değer varsa, FALSE sonucunu verir. Eğer vektördeki tüm elemanlar TRUE ise, TRUE döndürür. Bu fonksiyon genellikle koşullu ifadelerde ve vektörlerin doğruluğunu kontrol etmek için kullanılır.\n\n# Bir vektör oluşturalım\nsayi_vektoru &lt;- c(10, 20, 30, 40, 50)\n\n# Tüm sayıların 0 ile 60 arasında olup olmadığını kontrol edelim\nall(sayi_vektoru &gt; 0 & sayi_vektoru &lt; 60)\n\n[1] TRUE\n\n# vektördeki tüm elemanların şartı sağlayıp sağlamadıkları test edelim\nall(sayi_vektoru &gt; 30) \n\n[1] FALSE\n\n\n\n\n2.2.1.4 any\nany() fonksiyonu, R programlama dilinde bir mantıksal vektörün içinde en az bir tane TRUE değerinin olup olmadığını kontrol etmek için kullanılır. Eğer vektörde en az bir TRUE değer varsa, TRUE sonucunu verir. Eğer vektördeki tüm elemanlar FALSE ise, FALSE döndürür. Bu fonksiyon genellikle koşullu ifadelerde ve vektörlerin içeriğini kontrol etmek için kullanılır.\n\n# vektördeki en az bir elemanın şartı sağlayıp sağlamadığı test edelim\nany(sayi_vektoru) \n\nWarning in any(sayi_vektoru): 'double' tipinin argümanı mantıksala zorlanıyor\n\n\n[1] TRUE\n\n# Vektörde en az bir elemanın 10 olup olmadığını kontrol edelim\nany(sayi_vektoru==10) \n\n[1] TRUE\n\n\n\n\n2.2.1.5 unique\nunique() fonksiyonu, R programlama dilinde bir vektördeki benzersiz (tekrar etmeyen) elemanları bulmak için kullanılır. Bu fonksiyon, vektördeki tekrarlanan elemanları kaldırarak yalnızca benzersiz elemanları içeren yeni bir vektör oluşturur. Bu fonksiyon, veri temizleme veya benzersiz değerlerin bulunması gibi durumlarda sıklıkla kullanılır.\n\n# Tekrarlı gözlmeleri olan bir vektör oluşturalım\nvektor &lt;- rep(1:5,3)\nvektor\n\n [1] 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5\n\nunique(vektor) # tekrarlı gözlemler temizlenir\n\n[1] 1 2 3 4 5\n\n\n\n\n2.2.1.6 duplicated\nduplicated() fonksiyonu, bir vektördeki tekrarlanan değerleri tespit etmek için kullanılır. Bu fonksiyon, bir vektördeki her bir elemanın önceki elemanlar arasında daha önce görülüp görülmediğini kontrol eder ve tekrar eden değerleri belirler. Bu fonksiyon, veri temizleme veya tekrarlanan değerlerin tespit edilmesi gereken durumlarda kullanışlıdır.\n\n# tekrarlı gözlemlerin varlığını kontrol eder\nduplicated(vektor) \n\n [1] FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n[13]  TRUE  TRUE  TRUE\n\n# tekrarlı gözlemleri listeler\nvektor[duplicated(vektor)]\n\n [1] 1 2 3 4 5 1 2 3 4 5\n\n\n\n\n2.2.1.7 sort\nsort() fonksiyonu, vektörleri sıralamak için kullanılır. Bu fonksiyon, sayısal veya karakter vektörlerin elemanlarını artan veya azalan sıraya göre sıralar.\n\nsort(x, decreasing = FALSE)\n\nBurada:\n\nx, sıralanacak olan vektördür.\ndecreasing, sıralamanın azalan sırada olup olmayacağını belirleyen bir mantıksal değerdir (varsayılan olarak FALSE).\n\n\n# Bir sayısal vektör oluşturalım\nvektor &lt;- c(5, 2, 8, 1, 4)\n\n# küçükten büyüğe yani artan sıralama yapar.\nsort(vektor)\n\n[1] 1 2 4 5 8\n\n# büyükten küçüğe yani azalan sıralama yapar.\nsort(vektor,decreasing = TRUE) \n\n[1] 8 5 4 2 1\n\n# Bir karakter vektörü oluşturalım\nkarakter_vektor &lt;- c(\"elma\", \"armut\", \"muz\", \"kavun\")\n\n# karakter tipinideki vektörler alfabetik sıraya göre sıralanır\nsort(karakter_vektor)\n\n[1] \"armut\" \"elma\"  \"kavun\" \"muz\"  \n\nsort(karakter_vektor,decreasing = TRUE) \n\n[1] \"muz\"   \"kavun\" \"elma\"  \"armut\"\n\n\n\n\n2.2.1.8 is.na\nis.na() fonksiyonu, R programlama dilinde bir vektördeki veya veri çerçevesindeki değerlerin NA (Not Available - Mevcut Değil) olup olmadığını kontrol etmek ve verilerin içinde eksik veya mevcut olmayan değerleri tespit etmek için kullanılır.için kullanılır. Her NA değeri için ilgili konumda TRUE, değilse FALSE döndürür. Veri temizleme ve analiz aşamalarında oldukça faydalıdır.\n\n# Bir vektör oluşturalım\nvektor &lt;- c(1, 2, NA, 4, NA, 6)\n\n# vektördeki elamanların NA olup olmadığını test eder.\nis.na(vektor)\n\n[1] FALSE FALSE  TRUE FALSE  TRUE FALSE\n\n# NA olmayan değerleri filtreleyelim\nvektor[!is.na(vektor)]\n\n[1] 1 2 4 6\n\n# NA değerlerini bir başka değerle değiştirelim, örneğin 0 ile\nvektor[is.na(vektor)] &lt;- 0\nvektor\n\n[1] 1 2 0 4 0 6\n\n\n\n\n2.2.1.9 which\nwhich() fonksiyonu, belirli bir koşulu sağlayan veya belirli bir değere sahip olan elemanların konumlarını bulmak için kullanılır. Bu fonksiyon, bir vektörde veya bir koşulu karşılayan elemanların indislerini döndürür. Filtreleme veya koşullu indeksleme gibi durumlarda oldukça faydalıdır.\n\n# Bir vektör oluşturalım\nvektor &lt;- c(10, 20, 30, 40, 50)\n\n# 30'dan büyük olan elemanların indekslerini bulalım\nwhich(vektor &gt; 30)\n\n[1] 4 5\n\nvektor[which(vektor &gt; 30)]\n\n[1] 40 50\n\n# vektördeki maximum elemanın posizyonunu gösterir\nwhich.max(vektor)\n\n[1] 5\n\n# vektördeki minimum elemanın posizyonunu gösterir\nwhich.min(vektor) \n\n[1] 1\n\n\n\n\n2.2.1.10 Temel İstatistiksel Bazı Fonksiyonlar\n\n(veri &lt;- 1:10)\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\nmean(veri, na.rm = TRUE) # aritmetik ortalama\n\n[1] 5.5\n\nmedian(veri) # medyan (ortanca)\n\n[1] 5.5\n\nsum(veri,na.rm = TRUE) # vektör toplamını verir\n\n[1] 55\n\nmin(veri,na.rm = TRUE) # vektörün minimum değeri\n\n[1] 1\n\nmax(veri,na.rm = TRUE) # vektörün maximum değeri\n\n[1] 10\n\nsd(veri,na.rm = TRUE) # standart sapma\n\n[1] 3.02765\n\nvar(veri) # varyans\n\n[1] 9.166667\n\nsummary(veri) # Özet istatistikler\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   1.00    3.25    5.50    5.50    7.75   10.00 \n\nquantile(veri) # Çeyreklikler\n\n   0%   25%   50%   75%  100% \n 1.00  3.25  5.50  7.75 10.00 \n\n\n\n\n\n2.2.2 Matrisler\n\nMatrisler, iki boyutlu yani satır ve sütunları olan atomik vektörlerdir.\nmatrix() fonksiyonu ile tanımlanmaktadır.\nVektörlerin birleştirilmesi ile de matrisler oluşturulabilir. rbind satır bazlı alt alta birleştirme, cbind ise sütun bazlı yanyana birleştirme yapar. Burada vektörlerin aynı boyutlarda olmasına dikkat edilmesi gerekir.\n\n\nv1 &lt;- c(3,4,6,8,5)\nv2 &lt;- c(4,8,4,7,1)\nv3 &lt;- c(2,2,5,4,6)\nv4 &lt;- c(4,7,5,2,5)\n\nmatris &lt;- cbind(v1, v2, v3, v4)\nmatris\n\n     v1 v2 v3 v4\n[1,]  3  4  2  4\n[2,]  4  8  2  7\n[3,]  6  4  5  5\n[4,]  8  7  4  2\n[5,]  5  1  6  5\n\nis.matrix(matris)\n\n[1] TRUE\n\ndim(matris) # matrisin boyutları\n\n[1] 5 4\n\nmatrix(nrow = 3, ncol = 3, 1:9)\n\n     [,1] [,2] [,3]\n[1,]    1    4    7\n[2,]    2    5    8\n[3,]    3    6    9\n\nmatrix(1:9, nrow = 3, ncol = 3, byrow = TRUE) # byrow satırlara göre oluşturur.\n\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    4    5    6\n[3,]    7    8    9\n\nmat &lt;- seq(3, 21, by = 2)\nmat\n\n [1]  3  5  7  9 11 13 15 17 19 21\n\ndim(mat) &lt;- c(5,2)\nmat\n\n     [,1] [,2]\n[1,]    3   13\n[2,]    5   15\n[3,]    7   17\n[4,]    9   19\n[5,]   11   21\n\nmatrix(c(1,2,3,11,22,33), nrow = 2, ncol = 3, byrow = TRUE)\n\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]   11   22   33\n\n# normal dağılımdan 0 ortalamalı, 1 standart sapmalı 16 sayı üret\nMA &lt;- rnorm(16, 0, 1)\nMA &lt;- matrix(MA, nrow = 4, ncol = 4)\n\n# normal dağılımdan 90 ortalamalı, 10 standart sapmalı 16 sayı üret\nMB &lt;- rnorm(16, 90, 10)\nMB &lt;- matrix(MB, nrow = 4, ncol = 4)\n\nm &lt;- rbind(MA, MB)\nm\n\n            [,1]       [,2]       [,3]        [,4]\n[1,]  -2.7503240  1.7064411  2.1526458   1.3283256\n[2,]   0.2780720 -0.6174538  0.4130697  -1.6624795\n[3,]  -0.4844882  0.8932222 -1.2828614  -0.9401084\n[4,]  -0.7737982 -2.3351351  2.0283619   0.2146248\n[5,]  83.4734785 94.4081100 80.6934418  70.3752669\n[6,] 104.0595354 77.5422742 98.2373323 112.1611978\n[7,] 104.4952667 83.1280347 89.4010349  75.9320625\n[8,]  97.4301233 93.7626396 73.9983540  94.9469386\n\n# satır ve sütun isimlendirme\ncolnames(m) &lt;- LETTERS[1:4]\nrownames(m) &lt;- tail(LETTERS,8)\nm\n\n            A          B          C           D\nS  -2.7503240  1.7064411  2.1526458   1.3283256\nT   0.2780720 -0.6174538  0.4130697  -1.6624795\nU  -0.4844882  0.8932222 -1.2828614  -0.9401084\nV  -0.7737982 -2.3351351  2.0283619   0.2146248\nW  83.4734785 94.4081100 80.6934418  70.3752669\nX 104.0595354 77.5422742 98.2373323 112.1611978\nY 104.4952667 83.1280347 89.4010349  75.9320625\nZ  97.4301233 93.7626396 73.9983540  94.9469386\n\n# Matris Elemanlarina Erismek\nm[1,1] # 1. satır, 1.sütundak, eleman\n\n[1] -2.750324\n\nm[4,2] # 4. satır, 2.sütundak, eleman\n\n[1] -2.335135\n\nm[,2] # 2. sütun elemanları\n\n         S          T          U          V          W          X          Y \n 1.7064411 -0.6174538  0.8932222 -2.3351351 94.4081100 77.5422742 83.1280347 \n         Z \n93.7626396 \n\nm[-3,] # 3. satır hariç tüm elemanlar\n\n            A          B          C           D\nS  -2.7503240  1.7064411  2.1526458   1.3283256\nT   0.2780720 -0.6174538  0.4130697  -1.6624795\nV  -0.7737982 -2.3351351  2.0283619   0.2146248\nW  83.4734785 94.4081100 80.6934418  70.3752669\nX 104.0595354 77.5422742 98.2373323 112.1611978\nY 104.4952667 83.1280347 89.4010349  75.9320625\nZ  97.4301233 93.7626396 73.9983540  94.9469386\n\n# köşegen matris oluşturma\ndiag(2,nrow=3)\n\n     [,1] [,2] [,3]\n[1,]    2    0    0\n[2,]    0    2    0\n[3,]    0    0    2\n\ndiag(1,5) # 5*5 birim matris\n\n     [,1] [,2] [,3] [,4] [,5]\n[1,]    1    0    0    0    0\n[2,]    0    1    0    0    0\n[3,]    0    0    1    0    0\n[4,]    0    0    0    1    0\n[5,]    0    0    0    0    1\n\n# transpose\nt(m)\n\n          S          T          U          V        W         X         Y\nA -2.750324  0.2780720 -0.4844882 -0.7737982 83.47348 104.05954 104.49527\nB  1.706441 -0.6174538  0.8932222 -2.3351351 94.40811  77.54227  83.12803\nC  2.152646  0.4130697 -1.2828614  2.0283619 80.69344  98.23733  89.40103\nD  1.328326 -1.6624795 -0.9401084  0.2146248 70.37527 112.16120  75.93206\n         Z\nA 97.43012\nB 93.76264\nC 73.99835\nD 94.94694\n\n# matris ile işlemler\n\nm1 &lt;- matrix(1:4,nrow=2)\nm2 &lt;- matrix(5:8,nrow=2)\n\nm1;m2\n\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    4\n\n\n     [,1] [,2]\n[1,]    5    7\n[2,]    6    8\n\nm1 + m2 # matris elemanları birebir toplanır\n\n     [,1] [,2]\n[1,]    6   10\n[2,]    8   12\n\nm1 / m2 # matris elemanları birebir toplanır\n\n          [,1]      [,2]\n[1,] 0.2000000 0.4285714\n[2,] 0.3333333 0.5000000\n\nm1 * m2 # matris elemanları birebir çarpılır\n\n     [,1] [,2]\n[1,]    5   21\n[2,]   12   32\n\nm1 %*% m2 # matris çarpımı\n\n     [,1] [,2]\n[1,]   23   31\n[2,]   34   46\n\nsolve(m2) # matrisin tersi\n\n     [,1] [,2]\n[1,]   -4  3.5\n[2,]    3 -2.5\n\nrowSums(m1) # satır toplamları\n\n[1] 4 6\n\nrowMeans(m1) # satır ortalaması\n\n[1] 2 3\n\ncolSums(m1) # sütun toplamları\n\n[1] 3 7\n\ncolMeans(m1) # sütun ortalaması\n\n[1] 1.5 3.5\n\n\n\n\n2.2.3 Listeler\n\nListeler, birbirinden farklı veri tiplerine sahip vektörler, matrisler vb farklı objeleri birarada tutabilen yapılardır.\nlist() ile liste oluşturulur.\n\n\nx &lt;- c(3,5,7)\ny &lt;- letters[1:10]\nz &lt;- c(rep(TRUE,3),rep(FALSE,4))\n\nlist &lt;- list(x,y,z)\nlist\n\n[[1]]\n[1] 3 5 7\n\n[[2]]\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\"\n\n[[3]]\n[1]  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE\n\nclass(list) # listenin sınıfını verir\n\n[1] \"list\"\n\nstr(list) # listenin yapısını verir\n\nList of 3\n $ : num [1:3] 3 5 7\n $ : chr [1:10] \"a\" \"b\" \"c\" \"d\" ...\n $ : logi [1:7] TRUE TRUE TRUE FALSE FALSE FALSE ...\n\nnames(list) &lt;- c(\"numeric\",\"karakter\",\"mantıksal\") # liste isimlendirme\nlist\n\n$numeric\n[1] 3 5 7\n\n$karakter\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\"\n\n$mantıksal\n[1]  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE\n\nlist$numeric\n\n[1] 3 5 7\n\nlist$karakter\n\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\"\n\nlist$mantıksal\n\n[1]  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE\n\nlist[[2]]\n\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\"\n\nlist$numeric2 &lt;- c(4:10) # listeye eleman ekleme\nlist\n\n$numeric\n[1] 3 5 7\n\n$karakter\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\"\n\n$mantıksal\n[1]  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE\n\n$numeric2\n[1]  4  5  6  7  8  9 10\n\nlist$numeric &lt;- NULL # listeden eleman silme\nlist\n\n$karakter\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\"\n\n$mantıksal\n[1]  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE\n\n$numeric2\n[1]  4  5  6  7  8  9 10\n\nunlist(list) # listeyi vektöre çevirir.\n\n karakter1  karakter2  karakter3  karakter4  karakter5  karakter6  karakter7 \n       \"a\"        \"b\"        \"c\"        \"d\"        \"e\"        \"f\"        \"g\" \n karakter8  karakter9 karakter10 mantıksal1 mantıksal2 mantıksal3 mantıksal4 \n       \"h\"        \"i\"        \"j\"     \"TRUE\"     \"TRUE\"     \"TRUE\"    \"FALSE\" \nmantıksal5 mantıksal6 mantıksal7  numeric21  numeric22  numeric23  numeric24 \n   \"FALSE\"    \"FALSE\"    \"FALSE\"        \"4\"        \"5\"        \"6\"        \"7\" \n numeric25  numeric26  numeric27 \n       \"8\"        \"9\"       \"10\" \n\n\n\n\n2.2.4 dataframe\nVeri çerçevesi (dataframe), her sütunun bir değişkenin değerlerini ve her satırın her sütundan bir değer kümesini içerdiği bir tablo veya iki boyutlu dizi benzeri bir yapıdır. Bir veri çerçevesinin özellikleri şunlardır:\n\nSütun adları boş olmamalıdır.\nSatır adları benzersiz olmalıdır.\nBir veri çerçevesinde saklanan veriler sayısal, faktör veya karakter tipinde olabilir.\nHer sütun aynı sayıda veri öğesi içermelidir.\n\ndata.frame() fonksiyonunu uygulayarak bir veri çerçevesi oluşturabiliriz.\n\n# data.frame oluşturma\nset.seed(12345)\n\ndata &lt;- data.frame(\n  row_num = 1:20,\n  col1 = rnorm(20),\n  col2 = runif(20), # uniform dağılımdam 20 gözlem üret\n  col3 = rbinom(20,size=5,prob = 0.5), # binom dağılımdam 20 gözlem üret\n  col4 = sample(c(\"TRUE\",\"FALSE\"),20,replace = TRUE),\n  col5 = sample(c(rep(c(\"E\",\"K\"),8),rep(NA,4))),\n  stringsAsFactors = TRUE # karakter olanlar faktör olarak değerlendirilsin\n)\n\nclass(data)\n\n[1] \"data.frame\"\n\nhead(data) # ilk 6 gözlemi gösterir\n\n  row_num       col1      col2 col3  col4 col5\n1       1  0.5855288 0.7821933    3 FALSE    E\n2       2  0.7094660 0.4291988    2  TRUE    E\n3       3 -0.1093033 0.9272740    5  TRUE    E\n4       4 -0.4534972 0.7732432    3 FALSE    K\n5       5  0.6058875 0.2596812    5  TRUE    E\n6       6 -1.8179560 0.3212247    2  TRUE &lt;NA&gt;\n\ntail(data) # son 6 gözlemi gösterir\n\n   row_num       col1       col2 col3  col4 col5\n15      15 -0.7505320 0.73249612    1 FALSE    K\n16      16  0.8168998 0.49924102    3 FALSE    K\n17      17 -0.8863575 0.72977197    4 FALSE    K\n18      18 -0.3315776 0.08033604    3  TRUE &lt;NA&gt;\n19      19  1.1207127 0.43553048    3 FALSE    K\n20      20  0.2987237 0.23658045    1 FALSE    E\n\ntail(data,10) # son 10 gözlemi gösterir\n\n   row_num       col1       col2 col3  col4 col5\n11      11 -0.1162478 0.96447029    3  TRUE    K\n12      12  1.8173120 0.82730287    3  TRUE    E\n13      13  0.3706279 0.31502824    2 FALSE &lt;NA&gt;\n14      14  0.5202165 0.21302545    2  TRUE    K\n15      15 -0.7505320 0.73249612    1 FALSE    K\n16      16  0.8168998 0.49924102    3 FALSE    K\n17      17 -0.8863575 0.72977197    4 FALSE    K\n18      18 -0.3315776 0.08033604    3  TRUE &lt;NA&gt;\n19      19  1.1207127 0.43553048    3 FALSE    K\n20      20  0.2987237 0.23658045    1 FALSE    E\n\nstr(data) # tablonun yapısını gösterir\n\n'data.frame':   20 obs. of  6 variables:\n $ row_num: int  1 2 3 4 5 6 7 8 9 10 ...\n $ col1   : num  0.586 0.709 -0.109 -0.453 0.606 ...\n $ col2   : num  0.782 0.429 0.927 0.773 0.26 ...\n $ col3   : int  3 2 5 3 5 2 4 1 3 4 ...\n $ col4   : Factor w/ 2 levels \"FALSE\",\"TRUE\": 1 2 2 1 2 2 2 1 2 2 ...\n $ col5   : Factor w/ 2 levels \"E\",\"K\": 1 1 1 2 1 NA 1 NA 2 1 ...\n\nsummary(data) # tablonun özet istatistiklerini gösterir\n\n    row_num           col1               col2              col3         col4   \n Min.   : 1.00   Min.   :-1.81796   Min.   :0.04346   Min.   :1.00   FALSE: 9  \n 1st Qu.: 5.75   1st Qu.:-0.36206   1st Qu.:0.23069   1st Qu.:2.00   TRUE :11  \n Median :10.50   Median : 0.09471   Median :0.43236   Median :3.00             \n Mean   :10.50   Mean   : 0.07652   Mean   :0.46554   Mean   :2.85             \n 3rd Qu.:15.25   3rd Qu.: 0.61194   3rd Qu.:0.74268   3rd Qu.:3.25             \n Max.   :20.00   Max.   : 1.81731   Max.   :0.96447   Max.   :5.00             \n   col5  \n E   :8  \n K   :8  \n NA's:4  \n         \n         \n         \n\n# veri çerçevesinden belirli sütun/ları seçmek için $ veya [] kullanılır.\nhead(data$col1)\n\n[1]  0.5855288  0.7094660 -0.1093033 -0.4534972  0.6058875 -1.8179560\n\nhead(data[,\"col1\"])\n\n[1]  0.5855288  0.7094660 -0.1093033 -0.4534972  0.6058875 -1.8179560\n\n# veri çerçevesinden belirli satır/ları seçmek için [] kullanılır.\ndata[1:2,] \n\n  row_num      col1      col2 col3  col4 col5\n1       1 0.5855288 0.7821933    3 FALSE    E\n2       2 0.7094660 0.4291988    2  TRUE    E\n\n# 3. and 5. satır ile 2. ve 4. kolon\ndata[c(3,5),c(2,4)]\n\n        col1 col3\n3 -0.1093033    5\n5  0.6058875    5\n\n# koşula göre veriler seçilebilir\ndata$row_num &gt; 12 # TRUE veya FALSE döner\n\n [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[13]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n\ndata[data$row_num &gt; 12,] # koşula göre satırlar döner\n\n   row_num       col1       col2 col3  col4 col5\n13      13  0.3706279 0.31502824    2 FALSE &lt;NA&gt;\n14      14  0.5202165 0.21302545    2  TRUE    K\n15      15 -0.7505320 0.73249612    1 FALSE    K\n16      16  0.8168998 0.49924102    3 FALSE    K\n17      17 -0.8863575 0.72977197    4 FALSE    K\n18      18 -0.3315776 0.08033604    3  TRUE &lt;NA&gt;\n19      19  1.1207127 0.43553048    3 FALSE    K\n20      20  0.2987237 0.23658045    1 FALSE    E\n\n# subset ile tablo filtrelenebilir.\nsubset(data, \n       row_num &gt;= 10 & col4 == 'TRUE',\n       select = c(row_num, col1, col2,col4))\n\n   row_num       col1       col2 col4\n10      10 -0.9193220 0.62554280 TRUE\n11      11 -0.1162478 0.96447029 TRUE\n12      12  1.8173120 0.82730287 TRUE\n14      14  0.5202165 0.21302545 TRUE\n18      18 -0.3315776 0.08033604 TRUE\n\n# names veya colnames ile sütun isimleri elde edilir.\nnames(data)\n\n[1] \"row_num\" \"col1\"    \"col2\"    \"col3\"    \"col4\"    \"col5\"   \n\ncolnames(data)\n\n[1] \"row_num\" \"col1\"    \"col2\"    \"col3\"    \"col4\"    \"col5\"   \n\n# vektör ile sütun seçimi\ncols &lt;- c(\"col1\",\"col2\",\"col5\")\nhead(data[cols])\n\n        col1      col2 col5\n1  0.5855288 0.7821933    E\n2  0.7094660 0.4291988    E\n3 -0.1093033 0.9272740    E\n4 -0.4534972 0.7732432    K\n5  0.6058875 0.2596812    E\n6 -1.8179560 0.3212247 &lt;NA&gt;\n\n# sütun silme\ndata$col1 &lt;- NULL\nhead(data)\n\n  row_num      col2 col3  col4 col5\n1       1 0.7821933    3 FALSE    E\n2       2 0.4291988    2  TRUE    E\n3       3 0.9272740    5  TRUE    E\n4       4 0.7732432    3 FALSE    K\n5       5 0.2596812    5  TRUE    E\n6       6 0.3212247    2  TRUE &lt;NA&gt;\n\n# sütun ekleme\ndata$col1 &lt;- rnorm(20)\nhead(data)\n\n  row_num      col2 col3  col4 col5       col1\n1       1 0.7821933    3 FALSE    E  0.4768080\n2       2 0.4291988    2  TRUE    E  0.8424486\n3       3 0.9272740    5  TRUE    E -0.8903234\n4       4 0.7732432    3 FALSE    K  0.7529609\n5       5 0.2596812    5  TRUE    E  0.4452159\n6       6 0.3212247    2  TRUE &lt;NA&gt;  0.4211062\n\n# sütunları sıralama\nhead(data[c(\"row_num\",\"col1\",\"col2\",\"col3\",\"col4\",\"col5\")])\n\n  row_num       col1      col2 col3  col4 col5\n1       1  0.4768080 0.7821933    3 FALSE    E\n2       2  0.8424486 0.4291988    2  TRUE    E\n3       3 -0.8903234 0.9272740    5  TRUE    E\n4       4  0.7529609 0.7732432    3 FALSE    K\n5       5  0.4452159 0.2596812    5  TRUE    E\n6       6  0.4211062 0.3212247    2  TRUE &lt;NA&gt;\n\n# sıralama\nhead(data[order(data$col3),]) # artan\n\n   row_num       col2 col3  col4 col5         col1\n8        8 0.04345645    1 FALSE &lt;NA&gt; -0.896320181\n15      15 0.73249612    1 FALSE    K  0.148543198\n20      20 0.23658045    1 FALSE    E  0.240173186\n2        2 0.42919882    2  TRUE    E  0.842448636\n6        6 0.32122467    2  TRUE &lt;NA&gt;  0.421106220\n13      13 0.31502824    2 FALSE &lt;NA&gt; -0.008925433\n\nhead(data[order(-data$row_num),]) # azalan\n\n   row_num       col2 col3  col4 col5       col1\n20      20 0.23658045    1 FALSE    E  0.2401732\n19      19 0.43553048    3 FALSE    K  0.2583817\n18      18 0.08033604    3  TRUE &lt;NA&gt; -0.1712566\n17      17 0.72977197    4 FALSE    K  0.7884411\n16      16 0.49924102    3 FALSE    K -0.3798679\n15      15 0.73249612    1 FALSE    K  0.1485432\n\nhead(data[order(data$col3,-data$row_num),])\n\n   row_num       col2 col3  col4 col5         col1\n20      20 0.23658045    1 FALSE    E  0.240173186\n15      15 0.73249612    1 FALSE    K  0.148543198\n8        8 0.04345645    1 FALSE &lt;NA&gt; -0.896320181\n14      14 0.21302545    2  TRUE    K -0.326216850\n13      13 0.31502824    2 FALSE &lt;NA&gt; -0.008925433\n6        6 0.32122467    2  TRUE &lt;NA&gt;  0.421106220\n\n# kayıp gözlemler (missing values)\ntail(is.na(data))\n\n      row_num  col2  col3  col4  col5  col1\n[15,]   FALSE FALSE FALSE FALSE FALSE FALSE\n[16,]   FALSE FALSE FALSE FALSE FALSE FALSE\n[17,]   FALSE FALSE FALSE FALSE FALSE FALSE\n[18,]   FALSE FALSE FALSE FALSE  TRUE FALSE\n[19,]   FALSE FALSE FALSE FALSE FALSE FALSE\n[20,]   FALSE FALSE FALSE FALSE FALSE FALSE\n\ntail(is.na(data$col5))\n\n[1] FALSE FALSE FALSE  TRUE FALSE FALSE\n\ndata[is.na(data$col5),] # col5 NA olan satılar\n\n   row_num       col2 col3  col4 col5         col1\n6        6 0.32122467    2  TRUE &lt;NA&gt;  0.421106220\n8        8 0.04345645    1 FALSE &lt;NA&gt; -0.896320181\n13      13 0.31502824    2 FALSE &lt;NA&gt; -0.008925433\n18      18 0.08033604    3  TRUE &lt;NA&gt; -0.171256569\n\ndata[!is.na(data$col5),] # col5 NA olmayan satılar\n\n   row_num       col2 col3  col4 col5       col1\n1        1 0.78219328    3 FALSE    E  0.4768080\n2        2 0.42919882    2  TRUE    E  0.8424486\n3        3 0.92727397    5  TRUE    E -0.8903234\n4        4 0.77324322    3 FALSE    K  0.7529609\n5        5 0.25968125    5  TRUE    E  0.4452159\n7        7 0.06019516    4  TRUE    E  1.1495922\n9        9 0.05505382    3  TRUE    K  0.8696714\n10      10 0.62554280    4  TRUE    E  0.5059117\n11      11 0.96447029    3  TRUE    K  0.3317020\n12      12 0.82730287    3  TRUE    E  1.7399997\n14      14 0.21302545    2  TRUE    K -0.3262169\n15      15 0.73249612    1 FALSE    K  0.1485432\n16      16 0.49924102    3 FALSE    K -0.3798679\n17      17 0.72977197    4 FALSE    K  0.7884411\n19      19 0.43553048    3 FALSE    K  0.2583817\n20      20 0.23658045    1 FALSE    E  0.2401732\n\nrowSums(is.na(data)) # satılardaki toplam kayıp gözlem sayısı\n\n [1] 0 0 0 0 0 1 0 1 0 0 0 0 1 0 0 0 0 1 0 0\n\ncolSums(is.na(data)) # sütunlardaki toplam kayıp gözlem sayısı\n\nrow_num    col2    col3    col4    col5    col1 \n      0       0       0       0       4       0 \n\nsum(is.na(data)) # tablodaki toplam kayıp gözlem sayısı\n\n[1] 4\n\ncomplete.cases(data) # satırlarda eksik gözlemlerin durumu\n\n [1]  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE\n[13] FALSE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE\n\ndata[complete.cases(data),]\n\n   row_num       col2 col3  col4 col5       col1\n1        1 0.78219328    3 FALSE    E  0.4768080\n2        2 0.42919882    2  TRUE    E  0.8424486\n3        3 0.92727397    5  TRUE    E -0.8903234\n4        4 0.77324322    3 FALSE    K  0.7529609\n5        5 0.25968125    5  TRUE    E  0.4452159\n7        7 0.06019516    4  TRUE    E  1.1495922\n9        9 0.05505382    3  TRUE    K  0.8696714\n10      10 0.62554280    4  TRUE    E  0.5059117\n11      11 0.96447029    3  TRUE    K  0.3317020\n12      12 0.82730287    3  TRUE    E  1.7399997\n14      14 0.21302545    2  TRUE    K -0.3262169\n15      15 0.73249612    1 FALSE    K  0.1485432\n16      16 0.49924102    3 FALSE    K -0.3798679\n17      17 0.72977197    4 FALSE    K  0.7884411\n19      19 0.43553048    3 FALSE    K  0.2583817\n20      20 0.23658045    1 FALSE    E  0.2401732\n\ndata[!complete.cases(data),]\n\n   row_num       col2 col3  col4 col5         col1\n6        6 0.32122467    2  TRUE &lt;NA&gt;  0.421106220\n8        8 0.04345645    1 FALSE &lt;NA&gt; -0.896320181\n13      13 0.31502824    2 FALSE &lt;NA&gt; -0.008925433\n18      18 0.08033604    3  TRUE &lt;NA&gt; -0.171256569\n\nna.omit(data) # NA olan satırları siler.\n\n   row_num       col2 col3  col4 col5       col1\n1        1 0.78219328    3 FALSE    E  0.4768080\n2        2 0.42919882    2  TRUE    E  0.8424486\n3        3 0.92727397    5  TRUE    E -0.8903234\n4        4 0.77324322    3 FALSE    K  0.7529609\n5        5 0.25968125    5  TRUE    E  0.4452159\n7        7 0.06019516    4  TRUE    E  1.1495922\n9        9 0.05505382    3  TRUE    K  0.8696714\n10      10 0.62554280    4  TRUE    E  0.5059117\n11      11 0.96447029    3  TRUE    K  0.3317020\n12      12 0.82730287    3  TRUE    E  1.7399997\n14      14 0.21302545    2  TRUE    K -0.3262169\n15      15 0.73249612    1 FALSE    K  0.1485432\n16      16 0.49924102    3 FALSE    K -0.3798679\n17      17 0.72977197    4 FALSE    K  0.7884411\n19      19 0.43553048    3 FALSE    K  0.2583817\n20      20 0.23658045    1 FALSE    E  0.2401732\n\n\n\n\n\n\n\n\nNot\n\n\n\ntibble, Hadley Wickham tarafından geliştirilen ve dplyr paketi ile sıkça kullanılan bir veri yapısıdır. tibble, data.frame’e benzerdir, ancak bazı önemli farklar vardır. tibble, daha düzenli ve okunabilir bir çıktı üretir ve bazı varsayılan davranışları data.frame’den farklıdır. Modern data.frame olarak tanımlanmaktadır.\n\n# tibble örneği\nlibrary(tibble)\n\nogrenciler_tibble &lt;- tribble(\n  ~Ad,     ~Yas, ~Cinsiyet,\n  \"Ali\",   20,   \"Erkek\",\n  \"Ayşe\",  22,   \"Kadın\",\n  \"Mehmet\", 21,  \"Erkek\",\n  \"Zeynep\", 23,  \"Kadın\"\n)\n\n# tibble'ı görüntüleme\nprint(ogrenciler_tibble)\n\n# A tibble: 4 × 3\n  Ad       Yas Cinsiyet\n  &lt;chr&gt;  &lt;dbl&gt; &lt;chr&gt;   \n1 Ali       20 Erkek   \n2 Ayşe      22 Kadın   \n3 Mehmet    21 Erkek   \n4 Zeynep    23 Kadın   \n\n\nYukarıdaki örnekte, “ogrenciler_tibble” adında bir tibble oluşturuldu. tibble, sütun adlarını ve içeriği daha okunabilir bir şekilde görüntüler ve sütunların başlık ve veri tipi (~Ad, ~Yas, ~Cinsiyet) gibi özelliklerini korur.\nHem dataframe hem de tibble veri analizi ve işleme işlemlerinde kullanışlıdır. Hangi veri yapısını kullanacağınız, projenizin gereksinimlerine ve kişisel tercihinize bağlıdır. Özellikle veri analizi için dplyr gibi paketlerle çalışırken tibble tercih edilir.\n\n\n\n\n2.2.5 Faktörler\n\nFaktörler, verileri kategorilere ayırmak ve düzeyler halinde depolamak için kullanılan veri nesneleridir. Hem karakter hem de tam sayıları depolayabilirler.\n“Erkek,”Kadın” ve Doğru, Yanlış vb. gibi istatistiksel modelleme için veri analizinde faydalıdırlar.\nFaktörler, girdi olarak bir vektör alınarak factor() işlevi kullanılarak oluşturulur.\n\n\ndata &lt;- c(rep(\"erkek\",5),rep(\"kadın\",7))\nprint(data)\n\n [1] \"erkek\" \"erkek\" \"erkek\" \"erkek\" \"erkek\" \"kadın\" \"kadın\" \"kadın\" \"kadın\"\n[10] \"kadın\" \"kadın\" \"kadın\"\n\nis.factor(data)\n\n[1] FALSE\n\n# veriyi faktöre çevirme\nfactor_data &lt;- factor(data)\n\nprint(factor_data)\n\n [1] erkek erkek erkek erkek erkek kadın kadın kadın kadın kadın kadın kadın\nLevels: erkek kadın\n\nprint(is.factor(factor_data))\n\n[1] TRUE\n\nas.numeric(factor_data)\n\n [1] 1 1 1 1 1 2 2 2 2 2 2 2\n\n# data frame için vektörler oluşturalım\nboy &lt;- c(132,151,162,139,166,147,122)\nkilo &lt;- c(48,49,66,53,67,52,40)\ncinsiyet &lt;- c(\"erkek\",\"erkek\",\"kadın\",\"kadın\",\"erkek\",\"kadın\",\"erkek\")\n\n# data frame\ndf &lt;- data.frame(boy,kilo,cinsiyet)\nstr(df)\n\n'data.frame':   7 obs. of  3 variables:\n $ boy     : num  132 151 162 139 166 147 122\n $ kilo    : num  48 49 66 53 67 52 40\n $ cinsiyet: chr  \"erkek\" \"erkek\" \"kadın\" \"kadın\" ...\n\ndf$cinsiyet &lt;- factor(cinsiyet)\nstr(df)\n\n'data.frame':   7 obs. of  3 variables:\n $ boy     : num  132 151 162 139 166 147 122\n $ kilo    : num  48 49 66 53 67 52 40\n $ cinsiyet: Factor w/ 2 levels \"erkek\",\"kadın\": 1 1 2 2 1 2 1\n\nprint(is.factor(df$cinsiyet))\n\n[1] TRUE\n\n# cinsiyet kolononun seviyeleri\nprint(df$cinsiyet)\n\n[1] erkek erkek kadın kadın erkek kadın erkek\nLevels: erkek kadın\n\n# seviyelerin sırası değiştirilebilir.\n\ndf2 &lt;- c(rep(\"düşük\",4),rep(\"orta\",5),rep(\"yüksek\",2))\n\nfactor_df2 &lt;- factor(df2)\nprint(factor_df2)\n\n [1] düşük  düşük  düşük  düşük  orta   orta   orta   orta   orta   yüksek\n[11] yüksek\nLevels: düşük orta yüksek\n\norder_df2 &lt;- factor(factor_df2,levels = c(\"yüksek\",\"orta\",\"düşük\"))\nprint(order_df2)\n\n [1] düşük  düşük  düşük  düşük  orta   orta   orta   orta   orta   yüksek\n[11] yüksek\nLevels: yüksek orta düşük\n\n# ordered=TRUE ile seviyelerin sıralı olduğu ifade edilir\norder_df2 &lt;- factor(factor_df2,levels = c(\"yüksek\",\"orta\",\"düşük\"),ordered = TRUE)\nprint(order_df2)\n\n [1] düşük  düşük  düşük  düşük  orta   orta   orta   orta   orta   yüksek\n[11] yüksek\nLevels: yüksek &lt; orta &lt; düşük",
    "crumbs": [
      "R Programlamaya Giriş",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Veri Tipleri ve Yapıları</span>"
    ]
  },
  {
    "objectID": "r_about.html",
    "href": "r_about.html",
    "title": "R Programlama Hakkında",
    "section": "",
    "text": "R Programı ile Neler Yapılabilir\nR programlama, veri analizi, istatistiksel ve ekonometrik hesaplamalar, veri görselleştirme ve veri madenciliği gibi istatistiksel ve veri analitiği işlemleri için kullanılan bir programlama dilidir. İlk olarak 1990 yılında Ross Ihaka ve Robert Gentleman tarafından geliştirilmeye başlanmıştır ve o zamandan bu yana istatistiksel analiz alanında çok popüler bir araç haline gelmiştir. Yazılım ismini yazarların isimlerinin baş harflerinden almaktadır.\nR, açık kaynaklı bir programlama dili ve yazılım ortamıdır, bu da onu geniş bir kullanıcı topluluğu tarafından desteklenen ve geliştirilen bir platform yapar. R ile yapılabilecek başlıca işler şunlardır:",
    "crumbs": [
      "R Programlama Hakkında"
    ]
  },
  {
    "objectID": "r_about.html#r-programı-ile-neler-yapılabilir",
    "href": "r_about.html#r-programı-ile-neler-yapılabilir",
    "title": "R Programlama Hakkında",
    "section": "",
    "text": "Veri Analizi: R, veri çerçeveleri ve veri setleri üzerinde işlem yapmak için bir dizi fonksiyon ve araç sunar. Veri temizleme, dönüştürme, özeti alma ve analiz etme işlemleri R ile kolayca gerçekleştirilebilir.\nVeri Görselleştirme: R, ggplot2 gibi grafik paketleri ile verilerinizi görselleştirmenize olanak tanır. Çeşitli grafik türleri (çizgi grafikleri, sütun grafikleri, dağılım grafikleri vb.) oluşturabilirsiniz.\nİstatistiksel Analiz: R, istatistiksel modelleri oluşturmak, hipotez testleri yapmak ve regresyon analizi gibi istatistiksel analizler gerçekleştirmek için zengin bir araç seti sunar. Ayrıca zaman serisi analizi ve kümeleme gibi konularda da kullanılır.\nVeri Madenciliği: R, veri madenciliği uygulamaları için kullanılabilir. Makine öğrenimi algoritmaları uygulamak ve veri madenciliği projeleri geliştirmek için paketler içerir.\nRaporlama: R Markdown kullanarak veri analizi ve sonuçlarını raporlama için kullanılır. Bu, anlamlı ve formatlı raporlar oluşturmanıza yardımcı olur.\nPaketler ve Genişletilebilirlik: R, kullanıcıların işlevselliği genişletmek için paketler ekleyebileceği bir sistem sunar. CRAN (Comprehensive R Archive Network) gibi kaynaklar, binlerce paketi içeren bir depo sağlar.\n\n\n\n\n\n\n\nNot\n\n\n\nR programlama özellikle istatistik, veri bilimi ve akademik araştırmalar alanlarında çok kullanılır, ancak endüstriyel uygulamalarda da giderek daha fazla kullanılmaktadır. R’nin açık kaynaklı olması ve geniş bir kullanıcı topluluğuna sahip olması, bu dilin popülerliğini artırmıştır. R ile çalışmak için temel programlama bilgisine sahip olmak yararlı olacaktır, ancak öğrenmesi oldukça erişilebilir bir dildir ve çevrimiçi kaynaklar ve kurslar mevcuttur.",
    "crumbs": [
      "R Programlama Hakkında"
    ]
  },
  {
    "objectID": "r_about.html#r-programlama-ile-ilgili-faydalı-kaynaklar",
    "href": "r_about.html#r-programlama-ile-ilgili-faydalı-kaynaklar",
    "title": "R Programlama Hakkında",
    "section": "R Programlama ile ilgili Faydalı Kaynaklar",
    "text": "R Programlama ile ilgili Faydalı Kaynaklar\nR programlamayı öğrenmek ve geliştirmek için bir dizi faydalı kaynak bulunmaktadır. R programlamaya başlamak veya ilerlemek için kullanabileceğiniz bazı kaynaklar:\n\nResmi R Web Sitesi: R’nin resmi web sitesi (https://www.r-project.org/) R programlamaya başlamak için temel kaynaktır. Burada R’nin indirilmesi, kurulumu ve temel belgelendirme bilgilerine erişebilirsiniz.\nRStudio: R programlama için yaygın olarak kullanılan RStudio IDE’si (Entegre Geliştirme Ortamı), R kodlarını yazmak, çalıştırmak ve yönetmek için güçlü bir araçtır. RStudio’nun resmi web sitesi (https://www.rstudio.com/) RStudio’nun indirilmesi ve kullanımı hakkında bilgi sunar.\nR Dersleri ve Kurslar: İnternette birçok ücretsiz R dersi ve kursu bulabilirsiniz. Coursera, edX, Udemy ve DataCamp gibi platformlar, R programlamayı öğrenmek için çeşitli kurslar sunmaktadır.\nR Belgeleri: R’nin resmi belgeleme (https://cran.r-project.org/manuals.html) kaynakları, R dilinin temellerini ve paketlerini öğrenmek için çok faydalıdır. R’deki komutlar ve fonksiyonlar hakkında ayrıntılı bilgi içerirler.\nKitaplar: R programlamayı öğrenmek için yazılmış birçok kitap bulunmaktadır. Örnek olarak, R for Data Science (Hadley Wickham ve Garrett Grolemund), Advanced R (Hadley Wickham) gibi kitaplar önerilebilir.\nStack Overflow: Programlama sorunları ve hatalarıyla karşılaştığınızda, Stack Overflow gibi forumlarda R ile ilgili sorular sormak ve cevaplamak için topluluktan yardım alabilirsiniz.\nGitHub: R ile ilgili açık kaynaklı projeleri incelemek ve kendi projelerinizi paylaşmak için GitHub gibi platformları kullanabilirsiniz. GitHub’da R kodlarını içeren birçok depo bulunmaktadır.\nBloglar ve Videolar: R ile ilgili bloglar ve YouTube kanalları, öğrenmek ve güncel kalmak için harika kaynaklardır. RStudio Blog (https://posit.co/blog/) ve YouTube’da R ile ilgili videoları bulabileceğiniz RStudio’nun resmi kanalı bunlara örnektir.\n\n\n\n\n\n\n\nTavsiye\n\n\n\nR programlamayı öğrenmek ve geliştirmek için sürekli olarak yeni kaynaklar ve materyaller üretilmektedir. İhtiyacınıza ve seviyenize uygun kaynakları seçmek için zaman ayırın ve kendi hızınıza göre öğrenmeye devam edin.",
    "crumbs": [
      "R Programlama Hakkında"
    ]
  },
  {
    "objectID": "r_about.html#r-ve-rstudionun-bilgisayara-kurulması",
    "href": "r_about.html#r-ve-rstudionun-bilgisayara-kurulması",
    "title": "R Programlama Hakkında",
    "section": "R ve RStudio’nun Bilgisayara Kurulması",
    "text": "R ve RStudio’nun Bilgisayara Kurulması\nR’ın internet sitesinden işletim sisteminize uygun programı indirip kurabilirsiniz. Linux, Mac OS ve Windows işletim sistemleri için sürümleri mevcuttur.\nWindows İşletim Sistemi İçin R Kurulumu\n\nR programını indirmek için R resmi web sitesini ziyaret edin: https://cran.r-project.org/\nSayfanın üst kısmında “Download R for Windows” başlığını bulun ve tıklayın.\n\nİndirilen sayfada “base” sekmesine tıklayın.\n\nAçılan sayfada “Download R 4.3.1 for Windows” linkine tıklayın ve dosyayı indirin.\n\n\n\n\n\n\n\nDikkat\n\n\n\nSayfayı ziyaret ettiğiniz tarihlerde farklı sürümlerin olabileceğine dikkat edin. Örneğin ileri bir tarihte bu sayfayı ziyaret ettiğinizde R programının yeni sürümü ile karşılabilirsiniz. O yüzden sürüm bilgisi değişkenlik gösterebilir.\n\n\nİndirilen dosyayı çift tıklayarak çalıştırın ve yükleyiciyi başlatın.\nYükleyici, R’nin temel sürümünü yüklemek için sizi yönlendirecektir. Varsayılan ayarları genellikle kabul edebilirsiniz.\nKurulum tamamlandığında, R’yi çalıştırmak için masaüstünüzde veya Başlat menüsünde “R” simgesini bulabilirsiniz.\n\nWindows İşletim Sistemi İçin R Studio Kurulumu\nR editörü grafiksel bir arayüz olmayıp eski tip bir yazılım konsoludur. R Studio, R programlama dili için geliştirilmiş entegre bir geliştirme ortamı (IDE) ve arayüzüdür. R Studio, R kodlarını daha verimli bir şekilde yazmanıza, çalıştırmanıza ve yönetmenize olanak tanıyan daha modern ve kullanışlı bir arayüz sunmaktadır. Ayrıca veri analizi, görselleştirme ve raporlama işlemleri için güçlü bir platform sunar. R Studio, açık kaynak bir projedir ve ücretsiz olarak kullanılabilir.\nR Studio’nun kurulumu aşağıdaki adımlarla gerçekleştirilebilir:\n\nR Studio’nun en son sürümünü indirmek için aşağıdaki bağlantıyı kullanın: https://www.rstudio.com/products/rstudio/download/\nSayfada “Download RStudio Desktop for Windows” kısmına tıklayın ve indirmeyi başlatın.\n\nİndirilen dosyayı çift tıklayarak çalıştırın ve kurulumu başlatın. Kurulum sırasında varsayılan ayarları genellikle kabul edebilirsiniz.\nKurulum tamamlandığında, R Studio’yu başlatmak için masaüstünüzde veya Başlat menüsünde “RStudio” simgesini bulabilirsiniz.",
    "crumbs": [
      "R Programlama Hakkında"
    ]
  },
  {
    "objectID": "r_about.html#r-studio-kişiselleştirme",
    "href": "r_about.html#r-studio-kişiselleştirme",
    "title": "R Programlama Hakkında",
    "section": "R Studio Kişiselleştirme",
    "text": "R Studio Kişiselleştirme\n\nRStudio, kullanıcıların ihtiyaçlarına göre kişiselleştirilebilen bir entegre geliştirme ortamı (IDE) sunar. RStudio’yu kişiselleştirmek için aşağıdaki yolları kullanabilirsiniz:\n\nR Studio Arayüzündeki Alanları Değiştirme: Resimde görüldüğü gibi yeni bir R Script açıldığı takdirde arayüzde 4 farklı alan görülmektedir. Bu alanlar isteğe göre yer değiştirilebilmektedir. Bunun için “Tools” (Araçlar) menüsünden “Global Options” (Genel Ayarlar) sekmesi açılır. Buradan “Pane Layout” kısmından istenilen ayarlar yapılabilir.\nTemayı ve Editör Stilini Değiştirme: RStudio’nun görünümünü değiştirmek için birçok tema ve editör stilini seçebilirsiniz. Bu, yazılım geliştirme ortamınızın daha hoş veya kullanışlı olmasını sağlar. “Tools” (Araçlar) menüsünden “Global Options” (Genel Ayarlar) sekmesini seçerek bu ayarları değiştirebilirsiniz.\nKlavye Kısayollarını Kişiselleştirme: RStudio’da kullanılan klavye kısayollarını özelleştirebilirsiniz. “Tools” (Araçlar) menüsünden “Modify Keyboard Shortcuts” (Klavye Kısayollarını Düzenle) seçeneğini kullanarak klavye kısayollarını tanımlayabilir veya değiştirebilirsiniz.\nEklentileri ve Paketleri Kullanma: RStudio, kullanıcıların işlevselliği genişletmek için eklentileri ve R paketlerini kullanmalarını sağlar. Bu paketler, kod otomatik tamamlama, kod görselleştirme, proje yönetimi gibi birçok işlemi kolaylaştırabilir. R Studio’nun sol üst köşesindeki “Tools” (Araçlar) menüsünden “Install Packages” (Paketleri Yükle) seçeneği ile yeni paketleri yükleyebilirsiniz.\nR Markdown Belgelerini Özelleştirme: R Markdown belgeleri, raporlar ve belgeler oluşturmak için kullanılır. Bu belgeleri kişiselleştirebilirsiniz. R Markdown belgelerinin başlık, stil, tablo düzeni ve grafikler gibi birçok yönünü özelleştirebilirsiniz.\nProje Ayarlarını Yapılandırma: RStudio’da projeler kullanmak, projelerinizi daha düzenli ve etkili bir şekilde yönetmenize yardımcı olabilir. “File” (Dosya) menüsünden “New Project” (Yeni Proje) seçeneği ile yeni projeler oluşturabilir ve projelerinizi kişiselleştirebilirsiniz.\nKod Tarayıcı ve Çalışma Ortamını Özelleştirme: RStudio’nun sağ tarafında bulunan “Environment” (Çalışma Ortamı) ve “Files” (Dosyalar) sekmelerini özelleştirebilirsiniz. Bu sekmeleri dilediğiniz gibi düzenleyebilirsiniz.\nAddins Kullanma: RStudio’nun “Addins” (Eklentiler) menüsü, kullanıcıların özel işlevleri ekleyebileceği bir bölümdür. Bu sayede belirli işlemleri hızlıca gerçekleştirebilirsiniz.\n\nRStudio’nun bu kişiselleştirme seçenekleri, kullanıcıların kendi ihtiyaçlarına ve tercihlerine göre IDE’yi özelleştirmelerine olanak tanır. Bu şekilde, RStudio’yu daha verimli ve kişiselleştirilmiş bir şekilde kullanabilirsiniz. RStudio’nun ana bileşenleri ve temel özellikleri ise şunlardır:\n\nScript Editörü: RStudio’nun sol üst kısmında yer alan bu bölüm, R kodlarını yazmak, düzenlemek ve çalıştırmak için kullanılır. Renk vurguları, otomatik tamamlama ve hata işaretleme gibi birçok yazılım geliştirme özelliği içerir.\nEnvironment (Çalışma Ortamı) : Sağ üst köşede bulunan “Çalışma Ortamı” sekmesi, çalışan nesneleri ve değişkenleri görüntülemenizi sağlar. “Files” sekmesi ise projenizdeki dosyaları ve klasörleri görüntülemenize yardımcı olur.\nConsole: Alt sol köşede bulunan bu bölüm, R kodlarını anlık olarak çalıştırmanıza ve sonuçları görmesinize olanak tanır. R komutlarını doğrudan konsola yazabilir ve çalıştırabilirsiniz.\nDiğer Sekmeler : RStudio, çeşitli grafikler ve görselleştirmeler oluşturmanıza olanak tanır. R koduyla çizilen grafikler, “Plots” sekmesinde görüntülenir. Bunu yanısıra “Help” kısmında fonksiyonlar ile ilgili bilgi alınabilir,”Packages” kısmından ise paket yükleme vb. işler yapılabilir.",
    "crumbs": [
      "R Programlama Hakkında"
    ]
  },
  {
    "objectID": "data_join.html#veri-setleri",
    "href": "data_join.html#veri-setleri",
    "title": "Veri Birleştirme",
    "section": "Veri Setleri",
    "text": "Veri Setleri\n\n\n\n\n\n\n\n\n\n\nTablo\nİçerik\nAnahtar Değişken\nKayıt Sayısı\nSütun Sayısı\n\n\n\n\nflights\nUçuş detayları\ncarrier, dest\n336776\n19\n\n\nairlines\nHavayolu adları\ncarrier\n16\n2\n\n\nairports\nHavaalanı bilgileri\nfaa\n1458\n8\n\n\n\n\nglimpse(flights)\n\nRows: 336,776\nColumns: 19\n$ year           &lt;int&gt; 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2…\n$ month          &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ day            &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ dep_time       &lt;int&gt; 517, 533, 542, 544, 554, 554, 555, 557, 557, 558, 558, …\n$ sched_dep_time &lt;int&gt; 515, 529, 540, 545, 600, 558, 600, 600, 600, 600, 600, …\n$ dep_delay      &lt;dbl&gt; 2, 4, 2, -1, -6, -4, -5, -3, -3, -2, -2, -2, -2, -2, -1…\n$ arr_time       &lt;int&gt; 830, 850, 923, 1004, 812, 740, 913, 709, 838, 753, 849,…\n$ sched_arr_time &lt;int&gt; 819, 830, 850, 1022, 837, 728, 854, 723, 846, 745, 851,…\n$ arr_delay      &lt;dbl&gt; 11, 20, 33, -18, -25, 12, 19, -14, -8, 8, -2, -3, 7, -1…\n$ carrier        &lt;chr&gt; \"UA\", \"UA\", \"AA\", \"B6\", \"DL\", \"UA\", \"B6\", \"EV\", \"B6\", \"…\n$ flight         &lt;int&gt; 1545, 1714, 1141, 725, 461, 1696, 507, 5708, 79, 301, 4…\n$ tailnum        &lt;chr&gt; \"N14228\", \"N24211\", \"N619AA\", \"N804JB\", \"N668DN\", \"N394…\n$ origin         &lt;chr&gt; \"EWR\", \"LGA\", \"JFK\", \"JFK\", \"LGA\", \"EWR\", \"EWR\", \"LGA\",…\n$ dest           &lt;chr&gt; \"IAH\", \"IAH\", \"MIA\", \"BQN\", \"ATL\", \"ORD\", \"FLL\", \"IAD\",…\n$ air_time       &lt;dbl&gt; 227, 227, 160, 183, 116, 150, 158, 53, 140, 138, 149, 1…\n$ distance       &lt;dbl&gt; 1400, 1416, 1089, 1576, 762, 719, 1065, 229, 944, 733, …\n$ hour           &lt;dbl&gt; 5, 5, 5, 5, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6…\n$ minute         &lt;dbl&gt; 15, 29, 40, 45, 0, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 0…\n$ time_hour      &lt;dttm&gt; 2013-01-01 05:00:00, 2013-01-01 05:00:00, 2013-01-01 0…\n\nglimpse(airlines)\n\nRows: 16\nColumns: 2\n$ carrier &lt;chr&gt; \"9E\", \"AA\", \"AS\", \"B6\", \"DL\", \"EV\", \"F9\", \"FL\", \"HA\", \"MQ\", \"O…\n$ name    &lt;chr&gt; \"Endeavor Air Inc.\", \"American Airlines Inc.\", \"Alaska Airline…\n\nglimpse(airports)\n\nRows: 1,458\nColumns: 8\n$ faa   &lt;chr&gt; \"04G\", \"06A\", \"06C\", \"06N\", \"09J\", \"0A9\", \"0G6\", \"0G7\", \"0P2\", \"…\n$ name  &lt;chr&gt; \"Lansdowne Airport\", \"Moton Field Municipal Airport\", \"Schaumbur…\n$ lat   &lt;dbl&gt; 41.13047, 32.46057, 41.98934, 41.43191, 31.07447, 36.37122, 41.4…\n$ lon   &lt;dbl&gt; -80.61958, -85.68003, -88.10124, -74.39156, -81.42778, -82.17342…\n$ alt   &lt;dbl&gt; 1044, 264, 801, 523, 11, 1593, 730, 492, 1000, 108, 409, 875, 10…\n$ tz    &lt;dbl&gt; -5, -6, -6, -5, -5, -5, -5, -5, -5, -8, -5, -6, -5, -5, -5, -5, …\n$ dst   &lt;chr&gt; \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"U\", \"A\", \"A\", \"U\", \"A\",…\n$ tzone &lt;chr&gt; \"America/New_York\", \"America/Chicago\", \"America/Chicago\", \"Ameri…",
    "crumbs": [
      "Veri Birleştirme"
    ]
  },
  {
    "objectID": "data_join.html#anahtar-değişken-nedir",
    "href": "data_join.html#anahtar-değişken-nedir",
    "title": "Veri Birleştirme",
    "section": "Anahtar Değişken Nedir?",
    "text": "Anahtar Değişken Nedir?\nBirleştirme işlemlerinde kullanılan sütunlara anahtar değişken denir. Bu değişkenler, iki tablo arasında eşleştirmeyi sağlar. Örneğin:\n\nflights tablosundaki carrier, airlines tablosundaki carrier ile eşleştirilir.\nflights tablosundaki dest, airports tablosundaki faa ile eşleştirilir.\n\n\n\n\n\n\n\nNote\n\n\n\nAnahtar Değişken Özellikleri\n\nİki tabloda da aynı bilgiyi temsil eder.\nVeri tipleri uyumlu olmalıdır (örneğin, her ikisi de karakter olmalı).\nTekil veya tekrar eden değerler içerebilir. Tekrarlara göre ilişki türü (1–1, 1–N, N–M) belirlenir.",
    "crumbs": [
      "Veri Birleştirme"
    ]
  },
  {
    "objectID": "data_join.html#left-join",
    "href": "data_join.html#left-join",
    "title": "Veri Birleştirme",
    "section": "Left Join",
    "text": "Left Join\nleft_join() veya merge(..., all.x = TRUE) işlemleri, soldaki tablodaki tüm satırları koruyup, sağdaki tablodan yalnızca eşleşen kayıtları ekler. Bu en sık kullanılan birleştirme türüdür; çünkü genellikle “asıl veri setini” korumak isteriz.\nAmaç: Her uçuşun carrier bilgisine karşılık gelen havayolu adını ekleyelim. Yani flights tablosundaki carrier değişkenini, airlines tablosundaki carrier ile eşleştireceğiz.\nBeklenti\n\nSatır sayısı flights ile aynı kalmalı.\nEşleşmeyen carrier değerleri varsa NA gözükecek.\nSonuçta yeni sütun: name (= havayolu adı).\n\n\n\nfl_joined &lt;- flights %&gt;%\n  left_join(airlines, by = \"carrier\")\n\n# Satır sayısı değişti mi?\ntibble(\n  onceki = nrow(flights),\n  sonraki = nrow(fl_joined)\n)\n\n# A tibble: 1 × 2\n  onceki sonraki\n   &lt;int&gt;   &lt;int&gt;\n1 336776  336776\n\n\nSonuç değişmedi: left_join() soldaki tabloyu (flights) esas alır.\nYeni değişkenleri görelim:\n\nfl_joined %&gt;%\nselect(year, month, day, carrier, name) %&gt;%\ndistinct(carrier, name) %&gt;%\narrange(carrier) %&gt;%\nhead(10)\n\n# A tibble: 10 × 2\n   carrier name                       \n   &lt;chr&gt;   &lt;chr&gt;                      \n 1 9E      Endeavor Air Inc.          \n 2 AA      American Airlines Inc.     \n 3 AS      Alaska Airlines Inc.       \n 4 B6      JetBlue Airways            \n 5 DL      Delta Air Lines Inc.       \n 6 EV      ExpressJet Airlines Inc.   \n 7 F9      Frontier Airlines Inc.     \n 8 FL      AirTran Airways Corporation\n 9 HA      Hawaiian Airlines Inc.     \n10 MQ      Envoy Air                  \n\n\n\n\n\n\n\n\nNote\n\n\n\nBurada name sütunu airlines tablosundan geldi.\nEğer iki tabloda aynı isimli başka sütunlar olsaydı, dplyr otomatik olarak .x ve .y sonekleri eklerdi.\n\n\nBase R ile Aynı İşlem\nBase R’de aynı işlem merge() ile yapılır. all.x = TRUE parametresi, soldan birleştirme anlamına gelir.\n\nfl_joined_base &lt;- merge(\nflights,\nairlines,\nby = \"carrier\",\nall.x = TRUE\n)\n\n# Satır sayısı kontrolü\n\nc(before = nrow(flights), after = nrow(fl_joined_base))\n\nbefore  after \n336776 336776 \n\n\n\nhead(fl_joined_base[c(\"carrier\", \"name\")], 10)\n\n   carrier              name\n1       9E Endeavor Air Inc.\n2       9E Endeavor Air Inc.\n3       9E Endeavor Air Inc.\n4       9E Endeavor Air Inc.\n5       9E Endeavor Air Inc.\n6       9E Endeavor Air Inc.\n7       9E Endeavor Air Inc.\n8       9E Endeavor Air Inc.\n9       9E Endeavor Air Inc.\n10      9E Endeavor Air Inc.\n\n\n\n\n\n\n\n\n\n\nÖzellik\ndplyr::left_join()\nbase::merge()\n\n\n\n\nSözdizimi\nDaha okunaklı (by = \"carrier\")\nUzun, parametre odaklı\n\n\nVarsayılan\nSadece belirttiğin by üzerinden\nEğer by yoksa, ortak isimleri bulup otomatik join yapar (dikkat!)\n\n\nSonekler\n.x ve .y\n.x ve .y veya .1 ve .2\n\n\nPerformans\nGenelde daha hızlı\nBüyük veride yavaş olabilir\n\n\nOkunabilirlik\n👍\n🟡\n\n\n\n\nKüçük Deneme: Eşleşmeyen Anahtar Durumu\nVarsayalım airlines tablosundan bir satırı çıkaralım ve join yapalım; ne olur?\n\nairlines_miss &lt;- airlines %&gt;% filter(carrier != \"UA\")\nfl_test &lt;- flights %&gt;% left_join(airlines_miss, by = \"carrier\")\n\nfl_test %&gt;%\nfilter(is.na(name)) %&gt;%\ndistinct(carrier) %&gt;%\nhead()\n\n# A tibble: 1 × 1\n  carrier\n  &lt;chr&gt;  \n1 UA     \n\n\nSonuçta name = NA olan satırlar, airlines tablosunda karşılığı olmayan taşıyıcılardır.\n\n\n\n\n\n\nNote\n\n\n\nBu tip satırlar veri tutarlılığı açısından önemlidir.\nGerçek analizlerde bu tür durumlar genellikle hatalı veya eksik kod anlamına gelir.",
    "crumbs": [
      "Veri Birleştirme"
    ]
  },
  {
    "objectID": "data_join.html#kısa-özet",
    "href": "data_join.html#kısa-özet",
    "title": "Veri Birleştirme",
    "section": "Kısa Özet",
    "text": "Kısa Özet\n\nleft_join(): soldaki tüm satırları korur.\nmerge(..., all.x = TRUE): aynı işlevi base R’de yapar.\nEşleşmeyen kayıtlar → NA.\nKontrol: satır sayısı değişmemeli.\nKod tabloları eklemek için en güvenli yöntemdir.",
    "crumbs": [
      "Veri Birleştirme"
    ]
  },
  {
    "objectID": "data_join.html#inner-join",
    "href": "data_join.html#inner-join",
    "title": "Veri Birleştirme",
    "section": "Inner Join",
    "text": "Inner Join\ninner_join() veya merge(..., all = FALSE) işlemleri, iki tablodaki ortak anahtar değerlerine sahip satırları getirir. Yani her iki tabloda da eşleşen kayıtlar kalır; eşleşmeyenler atılır.\nAmaç: Yalnızca hem flights hem de airlines tablolarında karşılığı olan havayolu kodlarını içeren satırları tutmak.\nBeklenti\n\nSatır sayısı flights’tan daha az olabilir.\nHer iki tablodan da carrier eşleşmeyenler çıkarılır.\nNA değer olmamalıdır çünkü sadece eşleşenler alınır.\n\n\ndplyr ile Inner Join\n\nfl_inner &lt;- flights %&gt;%\n  inner_join(airlines, by = \"carrier\")\n\ntibble(\n  flights_satir = nrow(flights),\n  inner_join_satir = nrow(fl_inner)\n)\n\n# A tibble: 1 × 2\n  flights_satir inner_join_satir\n          &lt;int&gt;            &lt;int&gt;\n1        336776           336776\n\n\nGörüldüğü gibi satır sayısı azaldıysa, bazı carrier değerleri yalnızca bir tabloda var demektir. Sonuçtan küçük bir örnek:\n\nfl_inner %&gt;%\nselect(year, month, day, carrier, name) %&gt;%\ndistinct(carrier, name) %&gt;%\narrange(carrier) %&gt;%\nhead(10)\n\n# A tibble: 10 × 2\n   carrier name                       \n   &lt;chr&gt;   &lt;chr&gt;                      \n 1 9E      Endeavor Air Inc.          \n 2 AA      American Airlines Inc.     \n 3 AS      Alaska Airlines Inc.       \n 4 B6      JetBlue Airways            \n 5 DL      Delta Air Lines Inc.       \n 6 EV      ExpressJet Airlines Inc.   \n 7 F9      Frontier Airlines Inc.     \n 8 FL      AirTran Airways Corporation\n 9 HA      Hawaiian Airlines Inc.     \n10 MQ      Envoy Air                  \n\n\n\n\n\n\n\n\nTip\n\n\n\ninner_join() genellikle veri kesişimlerini bulmak için kullanılır. Örneğin, yalnızca hem satış listesinde hem stok listesinde bulunan ürünleri görmek istediğinizde.\n\n\nBase R ile Inner Join\nAynı mantık merge() fonksiyonunda varsayılan olarak geçerlidir. Yani all = FALSE (veya hiç yazmazsanız) inner join anlamına gelir.\n\nfl_inner_base &lt;- merge(\nflights,\nairlines,\nby = \"carrier\",\nall = FALSE\n)\n\nc(before = nrow(flights), after = nrow(fl_inner_base))\n\nbefore  after \n336776 336776 \n\n\n\nhead(fl_inner_base[c(\"carrier\", \"name\")], 10)\n\n   carrier              name\n1       9E Endeavor Air Inc.\n2       9E Endeavor Air Inc.\n3       9E Endeavor Air Inc.\n4       9E Endeavor Air Inc.\n5       9E Endeavor Air Inc.\n6       9E Endeavor Air Inc.\n7       9E Endeavor Air Inc.\n8       9E Endeavor Air Inc.\n9       9E Endeavor Air Inc.\n10      9E Endeavor Air Inc.\n\n\n\n\n\n\n\n\n\n\nÖzellik\ndplyr::inner_join()\nbase::merge()\n\n\n\n\nVarsayılan davranış\nYalnızca eşleşenleri tutar\nAynı\n\n\nSatır sayısı\nAzalabilir\nAzalabilir\n\n\nNA değerler\nOluşmaz\nOluşmaz\n\n\nKullanım alanı\nEşleşen kayıtları filtrelemek\nEşleşen kayıtları filtrelemek\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nKısa Hatırlatma:\n\ninner_join() sadece ortak anahtarları getirir. Bir tabloda olup diğerinde olmayan kayıtlar tamamen dışlanır. Bu nedenle veri kaybı olmaması istenen durumlarda left_join() tercih edilmelidir.",
    "crumbs": [
      "Veri Birleştirme"
    ]
  },
  {
    "objectID": "data_join.html#right-join-ve-full-join",
    "href": "data_join.html#right-join-ve-full-join",
    "title": "Veri Birleştirme",
    "section": "Right Join ve Full Join",
    "text": "Right Join ve Full Join\nBu iki join türü, kapsayıcı birleştirmeler olarak adlandırılır.\nAmaç, iki tablodaki tüm bilgileri korumaktır — ancak satırların hangi taraftan korunduğu değişir.\n\nRight Join\nright_join() veya merge(..., all.y = TRUE) işlemleri, sağdaki tablonun tüm satırlarını korur.\nSoldaki tablodan yalnızca eşleşen kayıtlar getirilir.\nAmaç: Tüm airlines kayıtlarını koruyalım, fakat flights tablosundan sadece eşleşenleri alalım. Bu, “sağ tarafı referans alan” bir birleştirmedir.\n\ndplyr ile Right Join\n\nfl_right &lt;- flights %&gt;%\n  right_join(airlines, by = \"carrier\")\n\ntibble(\n  flights_satir = nrow(flights),\n  airlines_satir = nrow(airlines),\n  right_join_satir = nrow(fl_right)\n)\n\n# A tibble: 1 × 3\n  flights_satir airlines_satir right_join_satir\n          &lt;int&gt;          &lt;int&gt;            &lt;int&gt;\n1        336776             16           336776\n\n\n\nfl_right %&gt;%\nselect(carrier, name) %&gt;%\ndistinct(carrier, name)\n\n# A tibble: 16 × 2\n   carrier name                       \n   &lt;chr&gt;   &lt;chr&gt;                      \n 1 UA      United Air Lines Inc.      \n 2 AA      American Airlines Inc.     \n 3 B6      JetBlue Airways            \n 4 DL      Delta Air Lines Inc.       \n 5 EV      ExpressJet Airlines Inc.   \n 6 MQ      Envoy Air                  \n 7 US      US Airways Inc.            \n 8 WN      Southwest Airlines Co.     \n 9 VX      Virgin America             \n10 FL      AirTran Airways Corporation\n11 AS      Alaska Airlines Inc.       \n12 9E      Endeavor Air Inc.          \n13 F9      Frontier Airlines Inc.     \n14 HA      Hawaiian Airlines Inc.     \n15 YV      Mesa Airlines Inc.         \n16 OO      SkyWest Airlines Inc.      \n\n\n\n\n\n\n\n\nNote\n\n\n\nright_join() işlemi özellikle “kod tablosu” tarafındaki tüm değerlerin korunmasını istediğimiz durumlarda kullanılır.\nÖrneğin: tüm müşteri listesi sağda, yalnızca satış yapanlar soldaysa.\n\n\nBase R ile Right Join\nBase R’de aynı işlem merge(..., all.y = TRUE) parametresiyle yapılır.\n\nfl_right_base &lt;- merge(\nflights,\nairlines,\nby = \"carrier\",\nall.y = TRUE\n)\n\nc(before = nrow(airlines), after = nrow(fl_right_base))\n\nbefore  after \n    16 336776 \n\n\n\nhead(fl_right_base[c(\"carrier\", \"name\")], 10)\n\n   carrier              name\n1       9E Endeavor Air Inc.\n2       9E Endeavor Air Inc.\n3       9E Endeavor Air Inc.\n4       9E Endeavor Air Inc.\n5       9E Endeavor Air Inc.\n6       9E Endeavor Air Inc.\n7       9E Endeavor Air Inc.\n8       9E Endeavor Air Inc.\n9       9E Endeavor Air Inc.\n10      9E Endeavor Air Inc.\n\n\n\n\nFull Join\nfull_join() veya merge(..., all = TRUE) işlemleri, her iki tablodaki tüm anahtar değerlerini birleştirir.\nEşleşmeyen satırların bulunduğu taraflarda NA değerler oluşur.\nAmaç: flights ve airlines tablolarını tüm anahtarlarla birleştirelim. Böylece her iki tarafta olup diğerinde olmayan kayıtlar da görünür.\ndplyr ile Full Join\n\nfl_full &lt;- flights %&gt;%\nfull_join(airlines, by = \"carrier\")\n\ntibble(\nflights_satir = nrow(flights),\nairlines_satir = nrow(airlines),\nfull_join_satir = nrow(fl_full)\n)\n\n# A tibble: 1 × 3\n  flights_satir airlines_satir full_join_satir\n          &lt;int&gt;          &lt;int&gt;           &lt;int&gt;\n1        336776             16          336776\n\n\n\nfl_full %&gt;%\nselect(carrier, name) %&gt;%\ndistinct(carrier, name) %&gt;%\narrange(carrier) %&gt;%\nhead(10)\n\n# A tibble: 10 × 2\n   carrier name                       \n   &lt;chr&gt;   &lt;chr&gt;                      \n 1 9E      Endeavor Air Inc.          \n 2 AA      American Airlines Inc.     \n 3 AS      Alaska Airlines Inc.       \n 4 B6      JetBlue Airways            \n 5 DL      Delta Air Lines Inc.       \n 6 EV      ExpressJet Airlines Inc.   \n 7 F9      Frontier Airlines Inc.     \n 8 FL      AirTran Airways Corporation\n 9 HA      Hawaiian Airlines Inc.     \n10 MQ      Envoy Air                  \n\n\nBase R ile Full Join\nBase R’de all = TRUE kullanıldığında full join elde edilir:\n\nfl_full_base &lt;- merge(\nflights,\nairlines,\nby = \"carrier\",\nall = TRUE\n)\n\nc(before = nrow(flights) + nrow(airlines), after = nrow(fl_full_base))\n\nbefore  after \n336792 336776 \n\n\n\nhead(fl_full_base[c(\"carrier\", \"name\")], 10)\n\n   carrier              name\n1       9E Endeavor Air Inc.\n2       9E Endeavor Air Inc.\n3       9E Endeavor Air Inc.\n4       9E Endeavor Air Inc.\n5       9E Endeavor Air Inc.\n6       9E Endeavor Air Inc.\n7       9E Endeavor Air Inc.\n8       9E Endeavor Air Inc.\n9       9E Endeavor Air Inc.\n10      9E Endeavor Air Inc.",
    "crumbs": [
      "Veri Birleştirme"
    ]
  },
  {
    "objectID": "data_join.html#özet",
    "href": "data_join.html#özet",
    "title": "Veri Birleştirme",
    "section": "Özet",
    "text": "Özet\n\n\n\n\n\n\n\n\n\n\nJoin Türü\ndplyr Fonksiyonu\nBase R Eşdeğeri\nKorunan Taraf\nEşleşmeyenler\n\n\n\n\nLeft Join\nleft_join()\nmerge(..., all.x = TRUE)\nSol tablo\nSağ taraf NA\n\n\nRight Join\nright_join()\nmerge(..., all.y = TRUE)\nSağ tablo\nSol taraf NA\n\n\nFull Join\nfull_join()\nmerge(..., all = TRUE)\nHer iki tablo\nHer iki tarafta da NA olabilir\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nfull_join() verilerin iki farklı kaynaktan geldiği ve birleştirmenin tamlığı kontrol edilmek istendiği durumlarda kullanışlıdır. Örneğin: iki dönem verisini, iki kurum listesini veya iki sürümü birleştirirken.",
    "crumbs": [
      "Veri Birleştirme"
    ]
  },
  {
    "objectID": "data_join.html#filtreleme-türü-joinler-semi-join-ve-anti-join",
    "href": "data_join.html#filtreleme-türü-joinler-semi-join-ve-anti-join",
    "title": "Veri Birleştirme",
    "section": "Filtreleme Türü Join’ler (Semi Join ve Anti Join)",
    "text": "Filtreleme Türü Join’ler (Semi Join ve Anti Join)\nBu iki join türü, tablo yapısını değiştirmez; yalnızca satır seçimi (filtreleme) yapar. Yani semi_join() ve anti_join() yeni sütunlar eklemez, sadece sol tablodan bazı satırları seçer. Bu işlemler SQL’de sırasıyla WHERE EXISTS ve WHERE NOT EXISTS karşılığına denktir.\n\nsemi_join()\nsemi_join() sol tablodaki satırlardan, sağ tablodaki anahtarlarla eşleşenleri tutar. Eşleşmeyen satırlar atılır. Yeni sütun eklenmez, sadece satır sayısı azalabilir.\nAmaç: flights tablosundan, airlines tablosunda karşılığı bulunan carrier kayıtlarını alalım.\n\ndplyr ile Semi Join\n\nfl_semi &lt;- flights %&gt;%\n  semi_join(airlines, by = \"carrier\")\n\ntibble(\n  flights_satir = nrow(flights),\n  semi_join_satir = nrow(fl_semi)\n)\n\n# A tibble: 1 × 2\n  flights_satir semi_join_satir\n          &lt;int&gt;           &lt;int&gt;\n1        336776          336776\n\n\n\nfl_semi %&gt;%\nselect(carrier) %&gt;%\ndistinct(carrier) %&gt;%\narrange(carrier)\n\n# A tibble: 16 × 1\n   carrier\n   &lt;chr&gt;  \n 1 9E     \n 2 AA     \n 3 AS     \n 4 B6     \n 5 DL     \n 6 EV     \n 7 F9     \n 8 FL     \n 9 HA     \n10 MQ     \n11 OO     \n12 UA     \n13 US     \n14 VX     \n15 WN     \n16 YV     \n\n\n\n\n\n\n\n\nNote\n\n\n\nsemi_join() özellikle veri filtreleme veya “kesişimde olan kayıtları koruma” amacıyla kullanılır. Örneğin, sadece aktif müşteriler listesinde bulunan siparişleri görmek istediğinizde.\n\n\nBase R ile Semi Join Benzeri İşlem\nBase R’de doğrudan semi_join() yoktur, ancak aynı etkiyi merge() veya %in% operatörüyle elde edebiliriz.\n\nfl_semi_base &lt;- subset(\nflights,\ncarrier %in% airlines$carrier\n)\n\nunique(fl_semi_base$carrier)\n\n [1] \"UA\" \"AA\" \"B6\" \"DL\" \"EV\" \"MQ\" \"US\" \"WN\" \"VX\" \"FL\" \"AS\" \"9E\" \"F9\" \"HA\" \"YV\"\n[16] \"OO\"\n\n\nYukarıdaki işlemde flights içinden sadece airlines’ta yer alan carrier değerlerine sahip satırlar alındı. Yani bu da semi_join() ile aynı sonucu verir.\n\n\n\n\n\n\n💡 Neden semi_join() Kullanılır?\n\n\n\nBazı durumlarda yalnızca bir tablodaki kayıtların, başka bir tabloda var olup olmadığını kontrol etmek isteriz.\nBu durumda inner_join() gereksiz ek sütunlar üretir, filter() ise özellikle birden fazla anahtar değişken olduğunda karmaşık hale gelir.\nsemi_join() bu iki uç arasında denge kurar ve yalnızca eşleşen satırları döndürür, ama sadece sol tablonun sütunlarını korur.\nBöylece hem daha okunaklı hem de ilişkiselliği koruyan bir filtreleme yapılmış olur.\n\n\n\n\nanti_join()\nanti_join() ise tam tersini yapar: sol tablodaki satırlardan, sağda eşleşmeyenleri getirir. Bu, veri temizliği için çok kullanışlıdır.\nAmaç: flights tablosunda olup airlines tablosunda karşılığı olmayan carrier değerlerini bulalım.\ndplyr ile Anti Join\n\nfl_anti &lt;- flights %&gt;%\n  anti_join(airlines, by = \"carrier\")\n\nfl_anti %&gt;%\nselect(carrier) %&gt;%\ndistinct()\n\n# A tibble: 0 × 1\n# ℹ 1 variable: carrier &lt;chr&gt;\n\n\nBu, flights içinde olup airlines tablosunda bulunmayan carrier kodlarını listeler. Bu, veri kalitesi kontrolünde çok işe yarar. Örneğin, flights verisinde bir carrier kodu geçiyor ama bu kod airlines tablosunda tanımlı değilse, muhtemelen bu kod hatalı ya da eski bir değerdir.\n\n\n\n\n\n\nNote\n\n\n\nanti_join() veri bütünlüğü testleri için güçlü bir araçtır.\nÖrneğin; satış tablosundaki müşteri kodlarından bazıları müşteri kayıt tablosunda yoksa bu durum veri tutarsızlığına işaret eder.\n\n\nBase R ile Anti Join Benzeri İşlem\nAynı mantığı base R’de %in% operatörüyle kurabiliriz:\n\nfl_anti_base &lt;- subset(\nflights,\n!(carrier %in% airlines$carrier)\n)\n\nunique(fl_anti_base$carrier)\n\ncharacter(0)\n\n\n\n\nÖzet\n\n\n\n\n\n\n\n\n\n\nJoin Türü\nAmaç\ndplyr Fonksiyonu\nBase R Yaklaşımı\nDönen Satırlar\n\n\n\n\nSemi Join\nEşleşenleri getirir\nsemi_join()\nsubset(..., %in%)\nSol tablodan, eşleşenler\n\n\nAnti Join\nEşleşmeyenleri getirir\nanti_join()\nsubset(..., !%in%)\nSol tablodan, eşleşmeyenler\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nÖzetle:\nBu iki fonksiyon tabloyu “filtreler”, yeni sütun eklemez.\n\nsemi_join() → ortak kayıtları bulur.\nanti_join() → eksik veya hatalı kayıtları bulur. Özellikle veri temizliği, kalite kontrolü ve kod doğrulama süreçlerinde sıklıkla kullanılır.",
    "crumbs": [
      "Veri Birleştirme"
    ]
  },
  {
    "objectID": "data_join.html#join-işlemlerinde-anahtar-yönetimi",
    "href": "data_join.html#join-işlemlerinde-anahtar-yönetimi",
    "title": "Veri Birleştirme",
    "section": "Join İşlemlerinde Anahtar Yönetimi",
    "text": "Join İşlemlerinde Anahtar Yönetimi\n\n🔑 Anahtar Değişkenlerin İsimleri Farklıysa\nBazı durumlarda iki tablodaki anahtar sütunların isimleri aynı olmayabilir. Örneğin flights tablosunda dest, airports tablosunda ise faa değişkeni aynı bilgiyi temsil eder. Bu durumda, her iki tabloda da hangi sütunun kullanılacağını by argümanı ile açıkça belirtmemiz gerekir.\n✅ dplyr Örneği\n\nflights %&gt;%\n  left_join(airports, by = c(\"dest\" = \"faa\")) %&gt;%\n  select(dest, name, lat, lon) %&gt;%\n  head()\n\n# A tibble: 6 × 4\n  dest  name                              lat   lon\n  &lt;chr&gt; &lt;chr&gt;                           &lt;dbl&gt; &lt;dbl&gt;\n1 IAH   George Bush Intercontinental     30.0 -95.3\n2 IAH   George Bush Intercontinental     30.0 -95.3\n3 MIA   Miami Intl                       25.8 -80.3\n4 BQN   &lt;NA&gt;                             NA    NA  \n5 ATL   Hartsfield Jackson Atlanta Intl  33.6 -84.4\n6 ORD   Chicago Ohare Intl               42.0 -87.9\n\n\nBurada \"dest\" = \"faa\" ifadesi:\n\nSol tablodaki (flights) dest sütunu,\nSağ tablodaki (airports) faa sütunu ile eşleştirileceğini belirtir.\n\n✅ Base R Örneği\nBase R’de aynı işlem şu şekilde yapılır:\n\nmerge(\nflights,\nairports,\nby.x = \"dest\",  # sol tablodaki değişken\nby.y = \"faa\",   # sağ tablodaki değişken\nall.x = TRUE\n)[c(\"dest\", \"name\", \"lat\", \"lon\")] %&gt;% head()\n\n  dest                              name      lat       lon\n1  ABQ Albuquerque International Sunport 35.04022 -106.6092\n2  ABQ Albuquerque International Sunport 35.04022 -106.6092\n3  ABQ Albuquerque International Sunport 35.04022 -106.6092\n4  ABQ Albuquerque International Sunport 35.04022 -106.6092\n5  ABQ Albuquerque International Sunport 35.04022 -106.6092\n6  ABQ Albuquerque International Sunport 35.04022 -106.6092\n\n\nEğer iki tabloda anahtar isimleri aynıysa, by = \"carrier\" veya by.x = \"carrier\", by.y = \"carrier\" şeklinde açıkça belirtmek her zaman iyi bir pratiktir. Böylece hem okunabilirlik artar hem de gelecekte değişiklik olduğunda hatalar önlenir.\n\n\n🧩 Birden Fazla Anahtar Değişken ile Join\nBazen iki tabloyu birden fazla değişken üzerinden eşleştirmemiz gerekir. Örneğin flights tablosunu başka bir tabloyla hem yıl, hem ay, hem de havayolu kodu (carrier) üzerinden birleştirmek isteyebiliriz. Bu durumda anahtarları by argümanı içinde bir vektör olarak belirtiriz.\n✅ dplyr Örneği\n\n# Örnek amaçlı küçük bir tablo oluşturalım\nstats &lt;- flights %&gt;%\n  group_by(year, month, carrier) %&gt;%\n  summarise(avg_delay = mean(dep_delay, na.rm = TRUE), .groups = \"drop\")\n\n# Aynı üç değişken üzerinden birleştirme\nfl_enriched &lt;- flights %&gt;%\n  left_join(stats, by = c(\"year\", \"month\", \"carrier\"))\n\nfl_enriched %&gt;% select(year, month, carrier, avg_delay) %&gt;% head()\n\n# A tibble: 6 × 4\n   year month carrier avg_delay\n  &lt;int&gt; &lt;int&gt; &lt;chr&gt;       &lt;dbl&gt;\n1  2013     1 UA           8.33\n2  2013     1 UA           8.33\n3  2013     1 AA           6.93\n4  2013     1 B6           9.49\n5  2013     1 DL           3.85\n6  2013     1 UA           8.33\n\n\n✅ Base R Örneği\n\nfl_enriched_base &lt;- merge(\nflights,\nstats,\nby = c(\"year\", \"month\", \"carrier\"),\nall.x = TRUE\n)\n\nhead(fl_enriched_base[c(\"year\", \"month\", \"carrier\", \"avg_delay\")])\n\n  year month carrier avg_delay\n1 2013     1      9E  16.88251\n2 2013     1      9E  16.88251\n3 2013     1      9E  16.88251\n4 2013     1      9E  16.88251\n5 2013     1      9E  16.88251\n6 2013     1      9E  16.88251\n\n\nBirden fazla değişken kullanmak özellikle panel veriler veya zaman serileri ile çalışırken oldukça yaygındır. Ancak anahtarların her iki tabloda da aynı sırayla ve aynı tipte (örneğin karakter veya sayı) olduğuna emin olun. )\n\n\n🔄 Farklı İsimli Birden Fazla Anahtar Değişken ile Join\nEğer iki tabloda birden fazla anahtar değişken var ve bu değişkenlerin isimleri her iki tabloda aynı değilse,\nher bir çifti eşleştirerek açıkça belirtmemiz gerekir.\n✅ dplyr Örneği\n\n# flights -&gt; other_tbl_keys : sadece anahtarlar, tekilleştirilmiş\nother_tbl_keys &lt;- flights %&gt;%\n  distinct(year, month, day, carrier) %&gt;%\n  rename(yil = year, ay = month, gun = day)\n\nfl_merge &lt;- flights %&gt;%\n  left_join(\n    other_tbl_keys,\n    by = c(\"year\" = \"yil\", \"month\" = \"ay\", \"day\" = \"gun\", \"carrier\" = \"carrier\")\n  )\n\n# Satır sayısı beklenen: flights kadar\ndplyr::tibble(before = nrow(flights), after = nrow(fl_merge))\n\n# A tibble: 1 × 2\n  before  after\n   &lt;int&gt;  &lt;int&gt;\n1 336776 336776\n\n\n✅ Base R Örneği\n\nother_tbl_keys &lt;- flights %&gt;%\n  distinct(year, month, day, carrier) %&gt;%\n  rename(yil = year, ay = month, gun = day)\n\nfl_merge_ok2 &lt;- merge(\n  flights, other_tbl_keys,\n  by.x = c(\"year\",\"month\",\"day\",\"carrier\"),\n  by.y = c(\"yil\",\"ay\",\"gun\",\"carrier\"),\n  all.x = TRUE,\n  sort = FALSE\n)\n\nc(before = nrow(flights), after = nrow(fl_merge_ok2))\n\nbefore  after \n336776 336776 \n\n\n\n\n\n\n\n\n💡 Neden distinct() ile tekilleştirdik? (dplyr + Base R)\n\n\n\nflights’tan türettiğimiz sağ tablolarda (other_tbl_keys) anahtarlar (year, month, day, carrier) tekrar ediyordu.\nBu durumda left_join() / merge() her eşleşen kombinasyonu çarpan şekilde birleştirir.\n→ N–M patlaması: satır sayısı çok büyür, bellek/işlem süresi artar.\nÇözüm: Sağ tabloyu join öncesinde distinct() ile tekilleştir → ilişkiyi N–M’den 1–N’e indir.\nBöylece her anahtar yalnızca bir kez eşleşir; hem hızlı hem mantıksal olarak doğru sonuç alırsın.",
    "crumbs": [
      "Veri Birleştirme"
    ]
  },
  {
    "objectID": "data_join.html#kullanacağımız-veri-setleri",
    "href": "data_join.html#kullanacağımız-veri-setleri",
    "title": "Veri Birleştirme",
    "section": "",
    "text": "Tablo\nİçerik\nAnahtar Değişken\nKayıt Sayısı\nSütun Sayısı\n\n\n\n\nflights\nUçuş detayları\ncarrier, dest\n336776\n19\n\n\nairlines\nHavayolu adları\ncarrier\n16\n2\n\n\nairports\nHavaalanı bilgileri\nfaa\n1458\n8",
    "crumbs": [
      "Veri Birleştirme"
    ]
  }
]