[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "R Programlama",
    "section": "",
    "text": "Önsöz\nR programlama dili, veri bilimi dünyasında vazgeçilmez bir araç haline geldi. Bu kitap, veri manipülasyonundan görselleştirmeye, keşifçi veri analizinden temel istatistik konularına kadar geniş bir yelpazede R dilini kullanarak veri analizi becerilerinizi güçlendirmenize odaklanıyor.\nKitabımız, R programlama dilini temel seviyeden başlayarak adım adım öğrenmek isteyen herkes için tasarlandı. İlk bölümlerde R dilinin temellerini kavrayacak ve dplyr gibi güçlü paketler aracılığıyla veri manipülasyonunun inceliklerini keşfedeceksiniz. Veri analizinin görselleştirme aşamasında ggplot2 paketiyle nasıl etkileyici grafikler oluşturabileceğinizi adım adım öğrenecek ve veri setlerinizin hikayesini çarpıcı görsellerle anlatacaksınız.\nKitabımız, keşifçi veri analizi sürecinde size rehberlik ederken, veri işleme tekniklerini ve önemli istatistik kavramlarını pratik örneklerle ele alacak. Temel istatistik kolları üzerine odaklanarak, veri setlerinizdeki deseni anlamak ve çözümlemek için gerekli araçları edineceksiniz. Ayrıca doğrusal regresyon gibi önemli modelleme tekniklerini R dilinde nasıl uygulayabileceğinizi adım adım öğreneceksiniz.\nBu kitabın amacı, R programlama dilini veri analizi süreçlerinizde güvenle kullanmanıza yardımcı olmak ve veri odaklı kararlar almanızı desteklemektir. Bilgi birikiminizi genişletirken öğrendiklerinizi uygulamaya dökme şansına sahip olacaksınız. Umarım bu kitap, veri analizi yolculuğunuzda size rehberlik eder ve R dilini kullanarak veriyle olan etkileşiminizi daha da derinleştirir."
  },
  {
    "objectID": "r_about.html#r-programı-ile-neler-yapılabilir",
    "href": "r_about.html#r-programı-ile-neler-yapılabilir",
    "title": "R Programlama Hakkında",
    "section": "R Programı ile Neler Yapılabilir",
    "text": "R Programı ile Neler Yapılabilir\nR, açık kaynaklı bir programlama dili ve yazılım ortamıdır, bu da onu geniş bir kullanıcı topluluğu tarafından desteklenen ve geliştirilen bir platform yapar. R ile yapılabilecek başlıca işler şunlardır:\n\nVeri Analizi: R, veri çerçeveleri ve veri setleri üzerinde işlem yapmak için bir dizi fonksiyon ve araç sunar. Veri temizleme, dönüştürme, özeti alma ve analiz etme işlemleri R ile kolayca gerçekleştirilebilir.\nVeri Görselleştirme: R, ggplot2 gibi grafik paketleri ile verilerinizi görselleştirmenize olanak tanır. Çeşitli grafik türleri (çizgi grafikleri, sütun grafikleri, dağılım grafikleri vb.) oluşturabilirsiniz.\nİstatistiksel Analiz: R, istatistiksel modelleri oluşturmak, hipotez testleri yapmak ve regresyon analizi gibi istatistiksel analizler gerçekleştirmek için zengin bir araç seti sunar. Ayrıca zaman serisi analizi ve kümeleme gibi konularda da kullanılır.\nVeri Madenciliği: R, veri madenciliği uygulamaları için kullanılabilir. Makine öğrenimi algoritmaları uygulamak ve veri madenciliği projeleri geliştirmek için paketler içerir.\nRaporlama: R Markdown kullanarak veri analizi ve sonuçlarını raporlama için kullanılır. Bu, anlamlı ve formatlı raporlar oluşturmanıza yardımcı olur.\nPaketler ve Genişletilebilirlik: R, kullanıcıların işlevselliği genişletmek için paketler ekleyebileceği bir sistem sunar. CRAN (Comprehensive R Archive Network) gibi kaynaklar, binlerce paketi içeren bir depo sağlar.\n\n\n\n\n\n\n\nNot\n\n\n\nR programlama özellikle istatistik, veri bilimi ve akademik araştırmalar alanlarında çok kullanılır, ancak endüstriyel uygulamalarda da giderek daha fazla kullanılmaktadır. R’nin açık kaynaklı olması ve geniş bir kullanıcı topluluğuna sahip olması, bu dilin popülerliğini artırmıştır. R ile çalışmak için temel programlama bilgisine sahip olmak yararlı olacaktır, ancak öğrenmesi oldukça erişilebilir bir dildir ve çevrimiçi kaynaklar ve kurslar mevcuttur."
  },
  {
    "objectID": "r_about.html#r-programlama-ile-ilgili-faydalı-kaynaklar",
    "href": "r_about.html#r-programlama-ile-ilgili-faydalı-kaynaklar",
    "title": "R Programlama Hakkında",
    "section": "R Programlama ile ilgili Faydalı Kaynaklar",
    "text": "R Programlama ile ilgili Faydalı Kaynaklar\nR programlamayı öğrenmek ve geliştirmek için bir dizi faydalı kaynak bulunmaktadır. R programlamaya başlamak veya ilerlemek için kullanabileceğiniz bazı kaynaklar:\n\nResmi R Web Sitesi: R’nin resmi web sitesi (https://www.r-project.org/) R programlamaya başlamak için temel kaynaktır. Burada R’nin indirilmesi, kurulumu ve temel belgelendirme bilgilerine erişebilirsiniz.\nRStudio: R programlama için yaygın olarak kullanılan RStudio IDE’si (Entegre Geliştirme Ortamı), R kodlarını yazmak, çalıştırmak ve yönetmek için güçlü bir araçtır. RStudio’nun resmi web sitesi (https://www.rstudio.com/) RStudio’nun indirilmesi ve kullanımı hakkında bilgi sunar.\nR Dersleri ve Kurslar: İnternette birçok ücretsiz R dersi ve kursu bulabilirsiniz. Coursera, edX, Udemy ve DataCamp gibi platformlar, R programlamayı öğrenmek için çeşitli kurslar sunmaktadır.\nR Belgeleri: R’nin resmi belgeleme (https://cran.r-project.org/manuals.html) kaynakları, R dilinin temellerini ve paketlerini öğrenmek için çok faydalıdır. R’deki komutlar ve fonksiyonlar hakkında ayrıntılı bilgi içerirler.\nKitaplar: R programlamayı öğrenmek için yazılmış birçok kitap bulunmaktadır. Örnek olarak, “R Graphics Cookbook” (Hadley Wickham), “R for Data Science” (Hadley Wickham ve Garrett Grolemund), “Advanced R” (Hadley Wickham) gibi kitaplar önerilebilir.\nStack Overflow: Programlama sorunları ve hatalarıyla karşılaştığınızda, Stack Overflow gibi forumlarda R ile ilgili sorular sormak ve cevaplamak için topluluktan yardım alabilirsiniz.\nGitHub: R ile ilgili açık kaynaklı projeleri incelemek ve kendi projelerinizi paylaşmak için GitHub gibi platformları kullanabilirsiniz. GitHub’da R kodlarını içeren birçok depo bulunmaktadır.\nBloglar ve Videolar: R ile ilgili bloglar ve YouTube kanalları, öğrenmek ve güncel kalmak için harika kaynaklardır. RStudio Blog (https://blog.rstudio.com/) ve YouTube’da R ile ilgili videoları bulabileceğiniz RStudio’nun resmi kanalı bunlara örnektir.\n\n\n\n\n\n\n\nTavsiye\n\n\n\nR programlamayı öğrenmek ve geliştirmek için sürekli olarak yeni kaynaklar ve materyaller üretilmektedir. İhtiyacınıza ve seviyenize uygun kaynakları seçmek için zaman ayırın ve kendi hızınıza göre öğrenmeye devam edin."
  },
  {
    "objectID": "r_about.html#r-ve-rstudionun-bilgisayara-kurulması",
    "href": "r_about.html#r-ve-rstudionun-bilgisayara-kurulması",
    "title": "R Programlama Hakkında",
    "section": "R ve RStudio’nun Bilgisayara Kurulması",
    "text": "R ve RStudio’nun Bilgisayara Kurulması\nR’ın internet sitesinden işletim sisteminize uygun programı indirip kurabilirsiniz. Linux, Mac OS ve Windows işletim sistemleri için sürümleri mevcuttur.\nWindows İşletim Sistemi İçin R Kurulumu\n\nR programını indirmek için R resmi web sitesini ziyaret edin: https://cran.r-project.org/\nSayfanın üst kısmında “Download R for Windows” başlığını bulun ve tıklayın.\n\nİndirilen sayfada “base” sekmesine tıklayın.\n\nAçılan sayfada “Download R 4.3.1 for Windows” linkine tıklayın ve dosyayı indirin.\n\n\n\n\n\n\n\nDikkat\n\n\n\nSayfayı ziyaret ettiğiniz tarihlerde farklı sürümlerin olabileceğine dikkat edin. Örneğin ileri bir tarihte bu sayfayı ziyaret ettiğinizde R programının yeni sürümü ile karşılabilirsiniz. O yüzden sürüm bilgisi değişkenlik gösterebilir.\n\n\nİndirilen dosyayı çift tıklayarak çalıştırın ve yükleyiciyi başlatın.\nYükleyici, R’nin temel sürümünü yüklemek için sizi yönlendirecektir. Varsayılan ayarları genellikle kabul edebilirsiniz.\nKurulum tamamlandığında, R’yi çalıştırmak için masaüstünüzde veya Başlat menüsünde “R” simgesini bulabilirsiniz.\n\nWindows İşletim Sistemi İçin R Studio Kurulumu\nR editörü grafiksel bir arayüz olmayıp eski tip bir yazılım konsoludur. R Studio, R programlama dili için geliştirilmiş entegre bir geliştirme ortamı (IDE) ve arayüzüdür. R Studio, R kodlarını daha verimli bir şekilde yazmanıza, çalıştırmanıza ve yönetmenize olanak tanıyan daha modern ve kullanışlı bir arayüz sunmaktadır. Ayrıca veri analizi, görselleştirme ve raporlama işlemleri için güçlü bir platform sunar. R Studio, açık kaynak bir projedir ve ücretsiz olarak kullanılabilir.\nR Studio’nun kurulumu aşağıdaki adımlarla gerçekleştirilebilir:\n\nR Studio’nun en son sürümünü indirmek için aşağıdaki bağlantıyı kullanın: https://www.rstudio.com/products/rstudio/download/\nSayfada “Download RStudio Desktop for Windows” kısmına tıklayın ve indirmeyi başlatın.\n\nİndirilen dosyayı çift tıklayarak çalıştırın ve kurulumu başlatın. Kurulum sırasında varsayılan ayarları genellikle kabul edebilirsiniz.\nKurulum tamamlandığında, R Studio’yu başlatmak için masaüstünüzde veya Başlat menüsünde “RStudio” simgesini bulabilirsiniz."
  },
  {
    "objectID": "r_about.html#r-studio-kişiselleştirme",
    "href": "r_about.html#r-studio-kişiselleştirme",
    "title": "R Programlama Hakkında",
    "section": "R Studio Kişiselleştirme",
    "text": "R Studio Kişiselleştirme\n\nRStudio, kullanıcıların ihtiyaçlarına göre kişiselleştirilebilen bir entegre geliştirme ortamı (IDE) sunar. RStudio’yu kişiselleştirmek için aşağıdaki yolları kullanabilirsiniz:\n\nR Studio Arayüzündeki Alanları Değiştirme: Resimde görüldüğü gibi yeni bir R Script açıldığı takdirde arayüzde 4 farklı alan görülmektedir. Bu alanlar isteğe göre yer değiştirilebilmektedir. Bunun için “Tools” (Araçlar) menüsünden “Global Options” (Genel Ayarlar) sekmesi açılır. Buradan “Pane Layout” kısmından istenilen ayarlar yapılabilir.\nTemayı ve Editör Stilini Değiştirme: RStudio’nun görünümünü değiştirmek için birçok tema ve editör stilini seçebilirsiniz. Bu, yazılım geliştirme ortamınızın daha hoş veya kullanışlı olmasını sağlar. “Tools” (Araçlar) menüsünden “Global Options” (Genel Ayarlar) sekmesini seçerek bu ayarları değiştirebilirsiniz.\nKlavye Kısayollarını Kişiselleştirme: RStudio’da kullanılan klavye kısayollarını özelleştirebilirsiniz. “Tools” (Araçlar) menüsünden “Modify Keyboard Shortcuts” (Klavye Kısayollarını Düzenle) seçeneğini kullanarak klavye kısayollarını tanımlayabilir veya değiştirebilirsiniz.\nEklentileri ve Paketleri Kullanma: RStudio, kullanıcıların işlevselliği genişletmek için eklentileri ve R paketlerini kullanmalarını sağlar. Bu paketler, kod otomatik tamamlama, kod görselleştirme, proje yönetimi gibi birçok işlemi kolaylaştırabilir. R Studio’nun sol üst köşesindeki “Tools” (Araçlar) menüsünden “Install Packages” (Paketleri Yükle) seçeneği ile yeni paketleri yükleyebilirsiniz.\nR Markdown Belgelerini Özelleştirme: R Markdown belgeleri, raporlar ve belgeler oluşturmak için kullanılır. Bu belgeleri kişiselleştirebilirsiniz. R Markdown belgelerinin başlık, stil, tablo düzeni ve grafikler gibi birçok yönünü özelleştirebilirsiniz.\nProje Ayarlarını Yapılandırma: RStudio’da projeler kullanmak, projelerinizi daha düzenli ve etkili bir şekilde yönetmenize yardımcı olabilir. “File” (Dosya) menüsünden “New Project” (Yeni Proje) seçeneği ile yeni projeler oluşturabilir ve projelerinizi kişiselleştirebilirsiniz.\nKod Tarayıcı ve Çalışma Ortamını Özelleştirme: RStudio’nun sağ tarafında bulunan “Environment” (Çalışma Ortamı) ve “Files” (Dosyalar) sekmelerini özelleştirebilirsiniz. Bu sekmeleri dilediğiniz gibi düzenleyebilirsiniz.\nAddins Kullanma: RStudio’nun “Addins” (Eklentiler) menüsü, kullanıcıların özel işlevleri ekleyebileceği bir bölümdür. Bu sayede belirli işlemleri hızlıca gerçekleştirebilirsiniz.\n\nRStudio’nun bu kişiselleştirme seçenekleri, kullanıcıların kendi ihtiyaçlarına ve tercihlerine göre IDE’yi özelleştirmelerine olanak tanır. Bu şekilde, RStudio’yu daha verimli ve kişiselleştirilmiş bir şekilde kullanabilirsiniz. RStudio’nun ana bileşenleri ve temel özellikleri ise şunlardır:\n\nScript Editörü: RStudio’nun sol üst kısmında yer alan bu bölüm, R kodlarını yazmak, düzenlemek ve çalıştırmak için kullanılır. Renk vurguları, otomatik tamamlama ve hata işaretleme gibi birçok yazılım geliştirme özelliği içerir.\nEnvironment (Çalışma Ortamı) : Sağ üst köşede bulunan “Çalışma Ortamı” sekmesi, çalışan nesneleri ve değişkenleri görüntülemenizi sağlar. “Files” sekmesi ise projenizdeki dosyaları ve klasörleri görüntülemenize yardımcı olur.\nConsole: Alt sol köşede bulunan bu bölüm, R kodlarını anlık olarak çalıştırmanıza ve sonuçları görmesinize olanak tanır. R komutlarını doğrudan konsola yazabilir ve çalıştırabilirsiniz.\nDiğer Sekmeler : RStudio, çeşitli grafikler ve görselleştirmeler oluşturmanıza olanak tanır. R koduyla çizilen grafikler, “Plots” sekmesinde görüntülenir. Bunu yanısıra “Help” kısmında fonksiyonlar ile ilgili bilgi alınabilir,”Packages” kısmından ise paket yükleme vb. işler yapılabilir."
  },
  {
    "objectID": "R_intro.html",
    "href": "R_intro.html",
    "title": "R Programlamaya Giriş",
    "section": "",
    "text": "R kodunun çalıştırılması oldukça basittir ve R Studio gibi entegre geliştirme ortamları (IDE’ler) kullanırken daha da kolaylaşır. R kodunu çalıştırmak için temel adımlar:\n\nR Studio’yu Açın: İlk adım, R Studio veya başka bir R IDE’sini açmaktır.\nYeni Bir script uluşturun veya mevcut bir script kullanın:\n\nR Studio’da, sol üst köşede bulunan “File” (Dosya) menüsünden “New Script”seçeneği ile yeni bir R scripti oluşturabilirsiniz.\nMevcut bir scripte gitmek istiyorsanız, “File” menüsünden “Open Script” seçeneğini kullanabilirsiniz.\n\nR Kodunu Scripte Yazın: Oluşturduğunuz veya açtığınız R skriptinde, R kodlarını yazın veya yapıştırın. Örneğin, basit bir hesaplama yapmak için aşağıdaki kodu kullanabilirsiniz:\n\nx &lt;- 5\ny &lt;- 10\nz &lt;- x + y\nz\n\n[1] 15\n\n\nKodu Çalıştırma:\n\nÇalıştırmak istediğiniz kodu seçin veya imleci çalıştırmak istediğiniz satıra getirin.\nÇalıştırma işlemi için aşağıdaki yöntemlerden birini kullanabilirsiniz:\n\nKlavyede varsayılan olarak “Ctrl+Enter” (Windows/Linux) veya “Command+Enter” (Mac) tuş kombinasyonunu kullanabilirsiniz.\nR Studio’daki “Run” (Çalıştır) düğmesini veya “Run” (Çalıştır) menüsünü kullanabilirsiniz.\nÇalıştırmak istediğiniz kodu seçtikten sonra sağ tıklarsanız, “Run” (Çalıştır) seçeneğini göreceksiniz.\n\n\nSonuçları İnceleyin: Çalıştırılan kodun sonuçları konsol penceresinde veya çıktı bölümünde görüntülenir. Örneğin, yukarıdaki örnekte “z” değişkeninin değeri olan “15” sonucunu göreceksiniz.\n\n\n\n\n\n\n\nDikkat\n\n\n\nBir script üzerinden çalıştırılan R kodunun sonuçlarını sol alt kısımda yer alan Console bölümünde görebilirsiniz. Aynı şekilde kodu Console bölümüne yazıp Enter tuşuna bastığınızda yine sonuç alabilirsiniz. Ancak script içerisinde yazılan kodları bir .R uzantılı dosya olarak saklama ve daha sonradan bu dosyaya ulaşma şansınız varken, Console ile çalıştırılan kodları bir .R dosyası olarak saklama şansınız yoktur. Console tarafındaki sonuçlar geçici olarak ekranda kalır ve R Studio’yu kapatıp açtığınızda tekrar yazdığınız ve çalıştırdığınız kodlara ulaşamayabilirsiniz.\n\n\n\n\n\n\n\n\nİpucu\n\n\n\nConsole tarafına yansıyan kodların ve sonuçların farklı formatlarda saklama şansımız vardır. Bunun için sink fonksiyonunu araştırmanızı önerebilirim."
  },
  {
    "objectID": "basics.html#çalışma-dizini",
    "href": "basics.html#çalışma-dizini",
    "title": "1  Temel Fonksiyonlar",
    "section": "1.1 Çalışma Dizini",
    "text": "1.1 Çalışma Dizini\nÇalışma Dizini, üzerinde çalıştığınız veri kümeleri vb. gibi tüm gerekli dosya ve belgelerinizi içeren yerdir. Çalışma dizininizi ayarlamanın iki yolu vardır. İlk yol getwd ve setwd işlevlerini kullanmaktır. Diğer yol ise RStudio üzerinden Session&gt;Set Working Directory youluyla yapılabilir.\n\ngetwd()\n\n[1] \"D:/Akademi ve Veri Bilimi/Data Science/Github/r-book-tr\"\n\n\n\ndir veya list.files komutları ile dizinde yer alan dosyalar öğrenilebilir.\ndir.create komutu ile yeni bir klasör oluşturmak mümkündür.\nfile.exists kullanılarak klasörün var olup olmadığı sorgulanabilir."
  },
  {
    "objectID": "basics.html#yardımcı-bilgiler",
    "href": "basics.html#yardımcı-bilgiler",
    "title": "1  Temel Fonksiyonlar",
    "section": "1.2 Yardımcı Bilgiler",
    "text": "1.2 Yardımcı Bilgiler\nR komutlarında Büyük-küçük harf duyarlılığı (case sensitive) vardır.\n\na &lt;- 5  \nprint(a)  \n\n[1] 5\n\nA &lt;- 6  \nprint(A) \n\n[1] 6\n\n\nNoktalı virgül (;) işareti ile aynı satırda birden fazla kod çalıştırılabilir hale getirilir.\n\nx &lt;- 1 ; y &lt;- 2 ; z &lt;- 3  \nx; y; z\n\n[1] 1\n\n\n[1] 2\n\n\n[1] 3\n\n\nKomutlar arası açıklamaları ve yorumları #(hashtag) ile yazabiliriz. Hastagli satırlar, kod olarak algılanıp çalıştırılmaz. Bu kısımlara yazılan kodlar ile ilgili hatırlatıcı bilgiler (comment) yazılabilir.\n\n#6 ile başyalan ve  10 ile  biten tamsayıları c vektörüne atayalım  \nc &lt;- 6:10 \nc\n\n[1]  6  7  8  9 10\n\n\n\nls() çalışma alanındaki nesne ve fonksiyonları listeler.\nrm(a) çalışma alanından a nesnesini siler.\nrm(list=ls()) bütün çalışma alanını temizler.\nq() R’dan çıkış yapmayı sağlar.\ninstall.packages(\"package\") paket yüklemeyi sağlar.\nlibrary(\"package\") yüklü olan paketi getirir.\ninstalled.packages() yüklü olan paketleri listeler\noptions(digits=10) sayılarda ondalık kısmın basamak sayısını ifade eder.\nhelp() fonksiyonu ya da ? ile bir fonksiyon hakkında yardım alınabilir. Örneğin mean fonksiyonu ile ilgili yardım almak için scripte ?mean ya da help(mean) yazmanız ve çalıştırmanız yeterlidir. Bunun yanı sıra R Studio penceresinin sağ alt kısmındaki help alanını kullanabilirsiniz."
  },
  {
    "objectID": "basics.html#atama-operatörü",
    "href": "basics.html#atama-operatörü",
    "title": "1  Temel Fonksiyonlar",
    "section": "1.3 Atama Operatörü",
    "text": "1.3 Atama Operatörü\nBir değişkene, tabloya veya objeye değer atarken ‘&lt;-’ veya ‘=’ operatörü kullanılır. ‘&lt;-’ atama operatöründe ok hangi yöndeyse o tarafa atama yapılır. Genellikle ‘&lt;-’ operatörü kullanılmaktadır. Çünkü ‘=’ operatörü filtrelemelerde veya işlemlerdeki ‘==’ ile karıştırılabilmektedir. Ayrıca fonksiyonlar içinde de kullanılabildiği için kod karmaşasına sebebiyet verebilir. Her iki operatör de aynı işlevi görmektedir.\n\n# a'ya 20 değerini atayalım  \na &lt;- 20    \n# tabloyu ya da değeri görüntülemek için nesnenin kendisi de direkt yazılabilir.  \n# ya da print fonksiyonu kullanılabilir.   \nprint(a)    \n\n[1] 20\n\n# b'ye 12 değerini atayalım  \nb &lt;- 12  \nprint(b)   \n\n[1] 12\n\n# a ve b değerlerinden üretilen bir c değeri üretelim.   \nc &lt;- 2 * a + 3 * b  \nprint(c) \n\n[1] 76\n\n\nc() ile vektör oluştutulabilir. c “combine” (birleştirmek) kelimesinin ilk harfini ifade eder. Bir değişkene birden fazla değer atamak istediğimizde kullanılır.\n\n# d adında bir vektör oluşturalım ve değerler atayalım.   \nd &lt;- c(4,7,13)  \nd \n\n[1]  4  7 13\n\n\nBir metini değişkene atamak istersek de aşağıdaki gibi metin “” işareti içine yazılmalıdır.\n\nmetin &lt;- \"Merhaba Arkadaşlar\"  \nprint(metin)\n\n[1] \"Merhaba Arkadaşlar\""
  },
  {
    "objectID": "basics.html#matematiksel-operatörler",
    "href": "basics.html#matematiksel-operatörler",
    "title": "1  Temel Fonksiyonlar",
    "section": "1.4 Matematiksel Operatörler",
    "text": "1.4 Matematiksel Operatörler\nR ve R Studio, güçlü bir hesap makinesi olarak kabul edilebilir.\n\n3+5 \n\n[1] 8\n\n7*8 \n\n[1] 56\n\n88/2 \n\n[1] 44\n\n3*(12+(15/3-2)) \n\n[1] 45\n\n9^2 # karesini alır \n\n[1] 81\n\na &lt;-  3 \nb &lt;-  a^2 \nprint(b) \n\n[1] 9\n\nlog(15) #ln15 yani doğal logaritma \n\n[1] 2.70805\n\nlog10(1000) # 10 tabanına göre hesaplama \n\n[1] 3\n\nexp(12) #exponential power of the number. e (2.718) üzeri 12 \n\n[1] 162754.8\n\nfactorial(6) # faktöriyel hesaplama yapar \n\n[1] 720\n\nsqrt(81) # karekör alma \n\n[1] 9\n\nabs(-3) # mutlak değer \n\n[1] 3\n\nsign(-5) # işaret bulma \n\n[1] -1\n\nsin(45) # sinüs \n\n[1] 0.8509035\n\ncos(90) # cosinüs \n\n[1] -0.4480736\n\npi # pi sayısı \n\n[1] 3.141593\n\ntan(pi) # tanjant\n\n[1] -1.224647e-16"
  },
  {
    "objectID": "basics.html#mantıksal-operatörler",
    "href": "basics.html#mantıksal-operatörler",
    "title": "1  Temel Fonksiyonlar",
    "section": "1.5 Mantıksal Operatörler",
    "text": "1.5 Mantıksal Operatörler\nMantıksal sorgulamalar, koşullarda ve filtrelerde kullanılmaktadır. Verilen koşul veya filtre sağlandığında TRUE, sağlanmadığında ise FALSE değerleri elde edilmektedir. Bu mantıksal operatörler ayrıca komutlar içindeki özellikleri aktifleştirmek ve pasifleştirmek için de kullanılmaktadır.\nMantıksal operatörler aşağıdaki şekilde kullanılmaktadır:\n\neşittir : ==\neşit değildir : !=\nküçüktür : &lt;\nküçük eşittir : &lt;=\nbüyüktür : &gt;\nbüyük eşittir : &gt;=\nx değil : !x\nx ve y : x&y\nx veya y: x|y\n\n\n3 &gt; 5\n\n[1] FALSE\n\n# & (ve) operatörü\n# iki durumda TRUE ise sonuç TRUE döner.\n3 &lt; 5 & 8 &gt; 7\n\n[1] TRUE\n\n# bir durum FALSE diğer durum TRUE ise sonuç FALSE döner.\n3 &lt; 5 & 6 &gt; 7\n\n[1] FALSE\n\n# iki durumda FALSE ise sonuç FALSE döner.\n6 &lt; 5 & 6 &gt; 7\n\n[1] FALSE\n\n# | (veya) operatörü\n# Her iki durumdan birisi TRUE ise TRUE döner\n(5==4) | (3!=4)\n\n[1] TRUE"
  },
  {
    "objectID": "data_types.html#vektörler",
    "href": "data_types.html#vektörler",
    "title": "2  Veri Tipleri ve Yapıları",
    "section": "2.1 Vektörler",
    "text": "2.1 Vektörler\n\nR’daki en temel nesneler vektörlerdir.\nVektörler homojen yapıya sahiptir yani bütün elemanları aynı veri tipinde olmalıdır.\nVektörler tek boyutludur.\nBir vektör oluşturmak için kullanabilecek en temel fonksiyon c()’dir.\n\n\nv &lt;- c(1,4,7,2,5,8,3,6,9)\n\nv[1] # 1. elemanını seçer\n\n[1] 1\n\nv[3] # 3. elemanını seçer\n\n[1] 7\n\nv[c(3,7)] # 3. ve 7. elemani secer\n\n[1] 7 3\n\nv[1:6] # 1. elemandan 6. elemana kadar secer\n\n[1] 1 4 7 2 5 8\n\nv[-2] # 2. elemani haric tutarak secer\n\n[1] 1 7 2 5 8 3 6 9\n\nlength(v) # vektörün uzunluğunu gösterir\n\n[1] 9\n\nv2 &lt;- c(v,12) # vektöre eleman ekleme\nv2\n\n [1]  1  4  7  2  5  8  3  6  9 12\n\n# : ile başlangıç ve bitiş değerleri belli olan vektörler yaratılabilir.\n\nv3 &lt;- 1:10\nv3\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\nv4 &lt;- 11:20\nv4\n\n [1] 11 12 13 14 15 16 17 18 19 20\n\n# Vektörler ile matematiksel işlemler yapılabilir.\n\nv3 + v4\n\n [1] 12 14 16 18 20 22 24 26 28 30\n\nv3 / v4\n\n [1] 0.09090909 0.16666667 0.23076923 0.28571429 0.33333333 0.37500000\n [7] 0.41176471 0.44444444 0.47368421 0.50000000\n\n2 * v3 - v4\n\n [1] -9 -8 -7 -6 -5 -4 -3 -2 -1  0\n\n# Vektörler ile ilgili kullanılabilecek bazı fonksiyonlar\n\n# seq () \n#aritmetik bir diziden meydana gelen bir vektör oluşturmak için kullanılır. \nseq(from = 5, to = 50, by =5) # 5 ile başlayan 50 ile biten 5şer artan vektör\n\n [1]  5 10 15 20 25 30 35 40 45 50\n\nseq(from = 5, to = 50, length = 7) # 5 ile başlayan 50 ile 7 elemanlı vektör\n\n[1]  5.0 12.5 20.0 27.5 35.0 42.5 50.0\n\nseq(5,1,-1) # 5 ile baslayıp 1'e kadar 1'er azaltarak vektor olusturma\n\n[1] 5 4 3 2 1\n\n# rep() \n# tekrarlı sayılar içeren vektörler oluşturulur.\nrep(10,8) # 8 tane 10 değeri olan vektör\n\n[1] 10 10 10 10 10 10 10 10\n\nrep(c(1,2,3),4) # 1,2,3 vekrünün 4 defa tekrarlanması\n\n [1] 1 2 3 1 2 3 1 2 3 1 2 3\n\nrep(c(1,2,3), each = 4) # each argünmanı ile sıralı ve tekrarlı vektör\n\n [1] 1 1 1 1 2 2 2 2 3 3 3 3\n\n# rev()\nv5 &lt;- c(3,5,6,1,NA,12,NA,8,9) # R'da NA boş gözlemi ifade eder.\nrev(v5) # vektörü tersine çevirir\n\n[1]  9  8 NA 12 NA  1  6  5  3\n\n# rank()\nrank(v5) # elemanların sıra numarasını verir\n\n[1] 2 3 4 1 8 7 9 5 6\n\nrank(v5, na.last = TRUE) # NA leri son sıraya atar.\n\n[1] 2 3 4 1 8 7 9 5 6\n\nrank(v5, na.last = FALSE) # NA leri en başa koyar.\n\n[1] 4 5 6 3 1 9 2 7 8\n\nrank(v5,na.last = NA) # NA değerlere yer verilmez\n\n[1] 2 3 4 1 7 5 6\n\nrank(v5, na.last = \"keep\") # NA değerler oldukları gibi görünürler.\n\n[1]  2  3  4  1 NA  7 NA  5  6\n\n# all()\nall(v5&gt;5) # vektördeki tüm elemanların şartı sağlayıp sağlamadıkları test edilir.\n\n[1] FALSE\n\nall(v5&gt;0) # vektörde NA varsa sonuç NA döner\n\n[1] NA\n\nall(v5&gt;0, na.rm = TRUE) # NA gözlemler hariç tutularak sonuç üretir.\n\n[1] TRUE\n\n# any()\nany(v5&gt;6) # vektördeki en az bir elemanın şartı sağlayıp sağlamadığı test edilir.\n\n[1] TRUE\n\nany(v5==9) \n\n[1] TRUE\n\n# unique()\nv6 &lt;- rep(1:5,3)\nv6\n\n [1] 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5\n\nunique(v6) # tekrarlı gözlemler temizlenir\n\n[1] 1 2 3 4 5\n\n# duplicated()\nduplicated(v6) # tekrarlı gözlemlerin varlığını kontrol eder\n\n [1] FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n[13]  TRUE  TRUE  TRUE\n\nv6[duplicated(v6)] # tekrarlı gözlemleri listeler\n\n [1] 1 2 3 4 5 1 2 3 4 5\n\n# sort()\nsort(v5) # küçükten büyüğe sıralama yapar.\n\n[1]  1  3  5  6  8  9 12\n\nsort(v5,decreasing = TRUE) # azalan sırada sıralama yapar.\n\n[1] 12  9  8  6  5  3  1\n\n# diff()\ndiff(v5) # vektörde ardışık elemanlar arasındaki farkı bulur.\n\n[1]  2  1 -5 NA NA NA NA  1\n\ndiff(na.omit(v5)) # na.omit vektördeki NA gözlemleri temizler\n\n[1]  2  1 -5 11 -4  1\n\n# is.na()\nis.na(v5) # vektördeki elamanların NA olup olmadığını test eder.\n\n[1] FALSE FALSE FALSE FALSE  TRUE FALSE  TRUE FALSE FALSE\n\nis.nan(v5) # NaN aynı zamanda bir NA'dir.\n\n[1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n# which\nwhich(v5==12) # 6 sayısının posizyonunu gösterir\n\n[1] 6\n\nwhich.max(v5) # vektördeki maximum elemanın posizyonunu gösterir\n\n[1] 6\n\nwhich.min(v5) # vektördeki minimum elemanın posizyonunu gösterir\n\n[1] 4\n\nv5[which.min(v5)] # vektördeki minimum elemanı gösterir\n\n[1] 1\n\n# Temel İstatistiksel Fonksiyonlar\nmean(v5) # NA varsa sonuç NA döner\n\n[1] NA\n\nmean(v5, na.rm = TRUE) # aritmetik ortalama\n\n[1] 6.285714\n\nmedian(v5,na.rm = TRUE) # medyan (ortanca)\n\n[1] 6\n\nsum(v5,na.rm = TRUE) # vektör toplamını verir\n\n[1] 44\n\nmin(v5,na.rm = TRUE) # vektörün minimum değeri\n\n[1] 1\n\nmax(v5,na.rm = TRUE) # vektörün maximum değeri\n\n[1] 12\n\nsd(v5,na.rm = TRUE) # standart sapma\n\n[1] 3.728909\n\nvar(v5,na.rm = TRUE) # varyans\n\n[1] 13.90476"
  },
  {
    "objectID": "data_types.html#matrisler",
    "href": "data_types.html#matrisler",
    "title": "2  Veri Tipleri ve Yapıları",
    "section": "2.2 Matrisler",
    "text": "2.2 Matrisler\n\nMatrisler, iki boyutlu yani satır ve sütunları olan atomik vektörlerdir.\nmatrix() fonksiyonu ile tanımlanmaktadır.\nVektörlerin birleştirlmesi ile de matrisler oluşturulabilir. rbindsatır bazlı alt alta birleştirme, cbind ise sütun bazlı yanyana birleştirme yapar. Burada vektörlerin aynı boyutlarda olmasına dikkat edilmesi gerekir.\n\n\nv1 &lt;- c(3,4,6,8,5)\nv2 &lt;- c(4,8,4,7,1)\nv3 &lt;- c(2,2,5,4,6)\nv4 &lt;- c(4,7,5,2,5)\n\nmatris &lt;- cbind(v1, v2, v3, v4)\nmatris\n\n     v1 v2 v3 v4\n[1,]  3  4  2  4\n[2,]  4  8  2  7\n[3,]  6  4  5  5\n[4,]  8  7  4  2\n[5,]  5  1  6  5\n\nis.matrix(matris)\n\n[1] TRUE\n\ndim(matris)\n\n[1] 5 4\n\nmatrix(nrow = 3, ncol = 3, 1:9)\n\n     [,1] [,2] [,3]\n[1,]    1    4    7\n[2,]    2    5    8\n[3,]    3    6    9\n\nmatrix(1:9, nrow = 3, ncol = 3, byrow = TRUE) # byrow satırlara göre oluşturur.\n\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    4    5    6\n[3,]    7    8    9\n\nmat &lt;- seq(3, 21, by = 2)\nmat\n\n [1]  3  5  7  9 11 13 15 17 19 21\n\ndim(mat) &lt;- c(5,2)\nmat\n\n     [,1] [,2]\n[1,]    3   13\n[2,]    5   15\n[3,]    7   17\n[4,]    9   19\n[5,]   11   21\n\nmatrix(c(1,2,3,11,22,33), nrow = 2, ncol = 3, byrow = TRUE)\n\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]   11   22   33\n\n# normal dağılımdan 0 ortamalı, 1 standart sapmalı 16 sayı üret\nMA &lt;- rnorm(16, 0, 1)\nMA &lt;- matrix(MA, nrow = 4, ncol = 4)\n\n# normal dağılımdan 90 ortamalı, 10 standart sapmalı 16 sayı üret\nMB &lt;- rnorm(16, 90, 10)\nMB &lt;- matrix(MB, nrow = 4, ncol = 4)\n\nm &lt;- rbind(MA, MB)\nm\n\n            [,1]         [,2]       [,3]        [,4]\n[1,]  0.61141755 2.673076e-03  2.4856244   0.5484522\n[2,] -0.04562969 1.503635e-01 -0.7029397   0.5274279\n[3,]  1.31216569 9.357644e-01  0.8697519   1.5933113\n[4,]  0.55633215 7.894671e-01  2.7064542  -1.1933735\n[5,] 85.67847531 8.166642e+01 88.4070501  94.5204687\n[6,] 85.75127692 7.192704e+01 96.2822275 100.7037858\n[7,] 86.81037430 1.005771e+02 74.3723380  94.1795446\n[8,] 92.27892224 7.369867e+01 88.3854649  80.3937284\n\n# satır ve sütun isimlendirme\ncolnames(m) &lt;- LETTERS[1:4]\nrownames(m) &lt;- tail(LETTERS,8)\nm\n\n            A            B          C           D\nS  0.61141755 2.673076e-03  2.4856244   0.5484522\nT -0.04562969 1.503635e-01 -0.7029397   0.5274279\nU  1.31216569 9.357644e-01  0.8697519   1.5933113\nV  0.55633215 7.894671e-01  2.7064542  -1.1933735\nW 85.67847531 8.166642e+01 88.4070501  94.5204687\nX 85.75127692 7.192704e+01 96.2822275 100.7037858\nY 86.81037430 1.005771e+02 74.3723380  94.1795446\nZ 92.27892224 7.369867e+01 88.3854649  80.3937284\n\n#Matris Elemanlarina Erismek\nm[1,1] # 1. satır, 1.sütundak, eleman\n\n[1] 0.6114176\n\nm[4,2] # 4. satır, 2.sütundak, eleman\n\n[1] 0.7894671\n\nm[,2] # 2. sütun elemanları\n\n           S            T            U            V            W            X \n2.673076e-03 1.503635e-01 9.357644e-01 7.894671e-01 8.166642e+01 7.192704e+01 \n           Y            Z \n1.005771e+02 7.369867e+01 \n\nm[-3,] # 3. satır hariç tüm elemanlar\n\n            A            B          C           D\nS  0.61141755 2.673076e-03  2.4856244   0.5484522\nT -0.04562969 1.503635e-01 -0.7029397   0.5274279\nV  0.55633215 7.894671e-01  2.7064542  -1.1933735\nW 85.67847531 8.166642e+01 88.4070501  94.5204687\nX 85.75127692 7.192704e+01 96.2822275 100.7037858\nY 86.81037430 1.005771e+02 74.3723380  94.1795446\nZ 92.27892224 7.369867e+01 88.3854649  80.3937284\n\n# köşegen matris oluşturma\ndiag(2,nrow=3)\n\n     [,1] [,2] [,3]\n[1,]    2    0    0\n[2,]    0    2    0\n[3,]    0    0    2\n\ndiag(1,5) # 5*5 birim matris\n\n     [,1] [,2] [,3] [,4] [,5]\n[1,]    1    0    0    0    0\n[2,]    0    1    0    0    0\n[3,]    0    0    1    0    0\n[4,]    0    0    0    1    0\n[5,]    0    0    0    0    1\n\n# transpose\nt(m)\n\n            S           T         U          V        W         X         Y\nA 0.611417550 -0.04562969 1.3121657  0.5563322 85.67848  85.75128  86.81037\nB 0.002673076  0.15036350 0.9357644  0.7894671 81.66642  71.92704 100.57713\nC 2.485624379 -0.70293971 0.8697519  2.7064542 88.40705  96.28223  74.37234\nD 0.548452156  0.52742787 1.5933113 -1.1933735 94.52047 100.70379  94.17954\n         Z\nA 92.27892\nB 73.69867\nC 88.38546\nD 80.39373\n\n# matris ile işlemler\n\nm1 &lt;- matrix(1:4,nrow=2)\nm2 &lt;- matrix(5:8,nrow=2)\n\nm1;m2\n\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    4\n\n\n     [,1] [,2]\n[1,]    5    7\n[2,]    6    8\n\nm1 + m2 # matris elemanları birebir toplanır\n\n     [,1] [,2]\n[1,]    6   10\n[2,]    8   12\n\nm1 / m2 # matris elemanları birebir toplanır\n\n          [,1]      [,2]\n[1,] 0.2000000 0.4285714\n[2,] 0.3333333 0.5000000\n\nm1 * m2 # matris elemanları birebir çarpılır\n\n     [,1] [,2]\n[1,]    5   21\n[2,]   12   32\n\nm1 %*% m2 # matris çarpımı\n\n     [,1] [,2]\n[1,]   23   31\n[2,]   34   46\n\nsolve(m2) # matrisin tersi\n\n     [,1] [,2]\n[1,]   -4  3.5\n[2,]    3 -2.5\n\nrowSums(m1) # satır toplamları\n\n[1] 4 6\n\nrowMeans(m1) # satır ortalaması\n\n[1] 2 3\n\ncolSums(m1) # sütun toplamları\n\n[1] 3 7\n\ncolMeans(m1) # sütun ortalaması\n\n[1] 1.5 3.5"
  },
  {
    "objectID": "data_types.html#listeler",
    "href": "data_types.html#listeler",
    "title": "2  Veri Tipleri ve Yapıları",
    "section": "2.3 Listeler",
    "text": "2.3 Listeler\n\nListeler, birbirinden farklı veri tiplerine sahip vektörler, matrisler vb farklı objeleri birarada tutabilen yapılardır.\nlist() ile liste oluşturulur.\n\n\nx &lt;- c(3,5,7)\ny &lt;- letters[1:10]\nz &lt;- c(rep(TRUE,3),rep(FALSE,4))\n\nlist &lt;- list(x,y,z)\nlist\n\n[[1]]\n[1] 3 5 7\n\n[[2]]\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\"\n\n[[3]]\n[1]  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE\n\nclass(list) # listenin sınıfını verir\n\n[1] \"list\"\n\nstr(list) # listenin yapısını verir\n\nList of 3\n $ : num [1:3] 3 5 7\n $ : chr [1:10] \"a\" \"b\" \"c\" \"d\" ...\n $ : logi [1:7] TRUE TRUE TRUE FALSE FALSE FALSE ...\n\nnames(list) &lt;- c(\"numeric\",\"karakter\",\"mantıksal\") # liste isimlendirme\nlist\n\n$numeric\n[1] 3 5 7\n\n$karakter\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\"\n\n$mantıksal\n[1]  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE\n\nlist$numeric\n\n[1] 3 5 7\n\nlist$karakter\n\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\"\n\nlist$mantıksal\n\n[1]  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE\n\nlist[[2]]\n\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\"\n\nlist$numeric2 &lt;- c(4:10) # listeye eleman ekleme\nlist\n\n$numeric\n[1] 3 5 7\n\n$karakter\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\"\n\n$mantıksal\n[1]  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE\n\n$numeric2\n[1]  4  5  6  7  8  9 10\n\nlist$numeric &lt;- NULL # listeden eleman silme\nlist\n\n$karakter\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\"\n\n$mantıksal\n[1]  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE\n\n$numeric2\n[1]  4  5  6  7  8  9 10\n\nunlist(list) # listeyi vektöre çevirir.\n\n karakter1  karakter2  karakter3  karakter4  karakter5  karakter6  karakter7 \n       \"a\"        \"b\"        \"c\"        \"d\"        \"e\"        \"f\"        \"g\" \n karakter8  karakter9 karakter10 mantıksal1 mantıksal2 mantıksal3 mantıksal4 \n       \"h\"        \"i\"        \"j\"     \"TRUE\"     \"TRUE\"     \"TRUE\"    \"FALSE\" \nmantıksal5 mantıksal6 mantıksal7  numeric21  numeric22  numeric23  numeric24 \n   \"FALSE\"    \"FALSE\"    \"FALSE\"        \"4\"        \"5\"        \"6\"        \"7\" \n numeric25  numeric26  numeric27 \n       \"8\"        \"9\"       \"10\""
  },
  {
    "objectID": "data_types.html#dataframe",
    "href": "data_types.html#dataframe",
    "title": "2  Veri Tipleri ve Yapıları",
    "section": "2.4 dataframe",
    "text": "2.4 dataframe\nVeri çerçevesi (dataframe), her sütunun bir değişkenin değerlerini ve her satırın her sütundan bir değer kümesini içerdiği bir tablo veya iki boyutlu dizi benzeri bir yapıdır. Bir veri çerçevesinin özellikleri şunlardır:\n\nSütun adları boş olmamalıdır.\nSatır adları benzersiz olmalıdır.\nBir veri çerçevesinde saklanan veriler sayısal, faktör veya karakter tipinde olabilir.\nHer sütun aynı sayıda veri öğesi içermelidir.\n\ndata.frame() fonksiyonunu uygulayarak bir veri çerçevesi oluşturabiliriz.\n\n# data.frame oluşturma\nset.seed(12345)\n\ndata &lt;- data.frame(\n  row_num = 1:20,\n  col1 = rnorm(20),\n  col2 = runif(20), # uniform dağılımdam 20 gözlem üret\n  col3 = rbinom(20,size=5,prob = 0.5), # binom dağılımdam 20 gözlem üret\n  col4 = sample(c(\"TRUE\",\"FALSE\"),20,replace = TRUE),\n  col5 = sample(c(rep(c(\"E\",\"K\"),8),rep(NA,4))),\n  stringsAsFactors = TRUE # karakter olanlar faktör olarak değerlendirilsin\n)\n\nclass(data)\n\n[1] \"data.frame\"\n\nhead(data) # ilk 6 gözlemi gösterir\n\n  row_num       col1      col2 col3  col4 col5\n1       1  0.5855288 0.7821933    3 FALSE    E\n2       2  0.7094660 0.4291988    2  TRUE    E\n3       3 -0.1093033 0.9272740    5  TRUE    E\n4       4 -0.4534972 0.7732432    3 FALSE    K\n5       5  0.6058875 0.2596812    5  TRUE    E\n6       6 -1.8179560 0.3212247    2  TRUE &lt;NA&gt;\n\ntail(data) # son 6 gözlemi gösterir\n\n   row_num       col1       col2 col3  col4 col5\n15      15 -0.7505320 0.73249612    1 FALSE    K\n16      16  0.8168998 0.49924102    3 FALSE    K\n17      17 -0.8863575 0.72977197    4 FALSE    K\n18      18 -0.3315776 0.08033604    3  TRUE &lt;NA&gt;\n19      19  1.1207127 0.43553048    3 FALSE    K\n20      20  0.2987237 0.23658045    1 FALSE    E\n\ntail(data,10) # son 10 gözlemi gösterir\n\n   row_num       col1       col2 col3  col4 col5\n11      11 -0.1162478 0.96447029    3  TRUE    K\n12      12  1.8173120 0.82730287    3  TRUE    E\n13      13  0.3706279 0.31502824    2 FALSE &lt;NA&gt;\n14      14  0.5202165 0.21302545    2  TRUE    K\n15      15 -0.7505320 0.73249612    1 FALSE    K\n16      16  0.8168998 0.49924102    3 FALSE    K\n17      17 -0.8863575 0.72977197    4 FALSE    K\n18      18 -0.3315776 0.08033604    3  TRUE &lt;NA&gt;\n19      19  1.1207127 0.43553048    3 FALSE    K\n20      20  0.2987237 0.23658045    1 FALSE    E\n\nstr(data) # tablonun yapısını gösterir\n\n'data.frame':   20 obs. of  6 variables:\n $ row_num: int  1 2 3 4 5 6 7 8 9 10 ...\n $ col1   : num  0.586 0.709 -0.109 -0.453 0.606 ...\n $ col2   : num  0.782 0.429 0.927 0.773 0.26 ...\n $ col3   : int  3 2 5 3 5 2 4 1 3 4 ...\n $ col4   : Factor w/ 2 levels \"FALSE\",\"TRUE\": 1 2 2 1 2 2 2 1 2 2 ...\n $ col5   : Factor w/ 2 levels \"E\",\"K\": 1 1 1 2 1 NA 1 NA 2 1 ...\n\nsummary(data) # tablonun özet istatistiklerini gösterir\n\n    row_num           col1               col2              col3         col4   \n Min.   : 1.00   Min.   :-1.81796   Min.   :0.04346   Min.   :1.00   FALSE: 9  \n 1st Qu.: 5.75   1st Qu.:-0.36206   1st Qu.:0.23069   1st Qu.:2.00   TRUE :11  \n Median :10.50   Median : 0.09471   Median :0.43236   Median :3.00             \n Mean   :10.50   Mean   : 0.07652   Mean   :0.46554   Mean   :2.85             \n 3rd Qu.:15.25   3rd Qu.: 0.61194   3rd Qu.:0.74268   3rd Qu.:3.25             \n Max.   :20.00   Max.   : 1.81731   Max.   :0.96447   Max.   :5.00             \n   col5  \n E   :8  \n K   :8  \n NA's:4  \n         \n         \n         \n\n# veri çerçevesinden belirli sütun/ları seçmek için $ veya [] kullanılır.\nhead(data$col1)\n\n[1]  0.5855288  0.7094660 -0.1093033 -0.4534972  0.6058875 -1.8179560\n\nhead(data[,\"col1\"])\n\n[1]  0.5855288  0.7094660 -0.1093033 -0.4534972  0.6058875 -1.8179560\n\n# veri çerçevesinden belirli satır/ları seçmek için [] kullanılır.\ndata[1:2,] \n\n  row_num      col1      col2 col3  col4 col5\n1       1 0.5855288 0.7821933    3 FALSE    E\n2       2 0.7094660 0.4291988    2  TRUE    E\n\n# 3. and 5. satır ile 2. ve 4. kolon\ndata[c(3,5),c(2,4)]\n\n        col1 col3\n3 -0.1093033    5\n5  0.6058875    5\n\n# koşula göre veriler seçilebilir\ndata$row_num &gt; 12 # TRUE veya FALSE döner\n\n [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[13]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n\ndata[data$row_num &gt; 12,] # koşula göre tablonu değerleri döner\n\n   row_num       col1       col2 col3  col4 col5\n13      13  0.3706279 0.31502824    2 FALSE &lt;NA&gt;\n14      14  0.5202165 0.21302545    2  TRUE    K\n15      15 -0.7505320 0.73249612    1 FALSE    K\n16      16  0.8168998 0.49924102    3 FALSE    K\n17      17 -0.8863575 0.72977197    4 FALSE    K\n18      18 -0.3315776 0.08033604    3  TRUE &lt;NA&gt;\n19      19  1.1207127 0.43553048    3 FALSE    K\n20      20  0.2987237 0.23658045    1 FALSE    E\n\n# subset ile tablo filtrelenebilir.\nsubset(data, \n       row_num &gt;= 10 & col4 == 'TRUE',\n       select = c(row_num, col1, col2,col4))\n\n   row_num       col1       col2 col4\n10      10 -0.9193220 0.62554280 TRUE\n11      11 -0.1162478 0.96447029 TRUE\n12      12  1.8173120 0.82730287 TRUE\n14      14  0.5202165 0.21302545 TRUE\n18      18 -0.3315776 0.08033604 TRUE\n\n# names veya colnames ile sütun isimleri elde edilir.\nnames(data)\n\n[1] \"row_num\" \"col1\"    \"col2\"    \"col3\"    \"col4\"    \"col5\"   \n\ncolnames(data)\n\n[1] \"row_num\" \"col1\"    \"col2\"    \"col3\"    \"col4\"    \"col5\"   \n\n# vektör ile sütun seçimi\ncols &lt;- c(\"col1\",\"col2\",\"col5\")\nhead(data[cols])\n\n        col1      col2 col5\n1  0.5855288 0.7821933    E\n2  0.7094660 0.4291988    E\n3 -0.1093033 0.9272740    E\n4 -0.4534972 0.7732432    K\n5  0.6058875 0.2596812    E\n6 -1.8179560 0.3212247 &lt;NA&gt;\n\n# sütun silme\ndata$col1 &lt;- NULL\nhead(data)\n\n  row_num      col2 col3  col4 col5\n1       1 0.7821933    3 FALSE    E\n2       2 0.4291988    2  TRUE    E\n3       3 0.9272740    5  TRUE    E\n4       4 0.7732432    3 FALSE    K\n5       5 0.2596812    5  TRUE    E\n6       6 0.3212247    2  TRUE &lt;NA&gt;\n\n# sütun ekleme\ndata$col1 &lt;- rnorm(20)\nhead(data)\n\n  row_num      col2 col3  col4 col5       col1\n1       1 0.7821933    3 FALSE    E  0.4768080\n2       2 0.4291988    2  TRUE    E  0.8424486\n3       3 0.9272740    5  TRUE    E -0.8903234\n4       4 0.7732432    3 FALSE    K  0.7529609\n5       5 0.2596812    5  TRUE    E  0.4452159\n6       6 0.3212247    2  TRUE &lt;NA&gt;  0.4211062\n\n# sütunları sıralama\nhead(data[c(\"row_num\",\"col1\",\"col2\",\"col3\",\"col4\",\"col5\")])\n\n  row_num       col1      col2 col3  col4 col5\n1       1  0.4768080 0.7821933    3 FALSE    E\n2       2  0.8424486 0.4291988    2  TRUE    E\n3       3 -0.8903234 0.9272740    5  TRUE    E\n4       4  0.7529609 0.7732432    3 FALSE    K\n5       5  0.4452159 0.2596812    5  TRUE    E\n6       6  0.4211062 0.3212247    2  TRUE &lt;NA&gt;\n\n# sıralama\nhead(data[order(data$col3),]) # artan\n\n   row_num       col2 col3  col4 col5         col1\n8        8 0.04345645    1 FALSE &lt;NA&gt; -0.896320181\n15      15 0.73249612    1 FALSE    K  0.148543198\n20      20 0.23658045    1 FALSE    E  0.240173186\n2        2 0.42919882    2  TRUE    E  0.842448636\n6        6 0.32122467    2  TRUE &lt;NA&gt;  0.421106220\n13      13 0.31502824    2 FALSE &lt;NA&gt; -0.008925433\n\nhead(data[order(-data$row_num),]) # azalan\n\n   row_num       col2 col3  col4 col5       col1\n20      20 0.23658045    1 FALSE    E  0.2401732\n19      19 0.43553048    3 FALSE    K  0.2583817\n18      18 0.08033604    3  TRUE &lt;NA&gt; -0.1712566\n17      17 0.72977197    4 FALSE    K  0.7884411\n16      16 0.49924102    3 FALSE    K -0.3798679\n15      15 0.73249612    1 FALSE    K  0.1485432\n\nhead(data[order(data$col3,-data$row_num),])\n\n   row_num       col2 col3  col4 col5         col1\n20      20 0.23658045    1 FALSE    E  0.240173186\n15      15 0.73249612    1 FALSE    K  0.148543198\n8        8 0.04345645    1 FALSE &lt;NA&gt; -0.896320181\n14      14 0.21302545    2  TRUE    K -0.326216850\n13      13 0.31502824    2 FALSE &lt;NA&gt; -0.008925433\n6        6 0.32122467    2  TRUE &lt;NA&gt;  0.421106220\n\n# kayıp gözlemler (missing values)\ntail(is.na(data))\n\n      row_num  col2  col3  col4  col5  col1\n[15,]   FALSE FALSE FALSE FALSE FALSE FALSE\n[16,]   FALSE FALSE FALSE FALSE FALSE FALSE\n[17,]   FALSE FALSE FALSE FALSE FALSE FALSE\n[18,]   FALSE FALSE FALSE FALSE  TRUE FALSE\n[19,]   FALSE FALSE FALSE FALSE FALSE FALSE\n[20,]   FALSE FALSE FALSE FALSE FALSE FALSE\n\ntail(is.na(data$col5))\n\n[1] FALSE FALSE FALSE  TRUE FALSE FALSE\n\ndata[is.na(data$col5),]\n\n   row_num       col2 col3  col4 col5         col1\n6        6 0.32122467    2  TRUE &lt;NA&gt;  0.421106220\n8        8 0.04345645    1 FALSE &lt;NA&gt; -0.896320181\n13      13 0.31502824    2 FALSE &lt;NA&gt; -0.008925433\n18      18 0.08033604    3  TRUE &lt;NA&gt; -0.171256569\n\ndata[!is.na(data$col5),]\n\n   row_num       col2 col3  col4 col5       col1\n1        1 0.78219328    3 FALSE    E  0.4768080\n2        2 0.42919882    2  TRUE    E  0.8424486\n3        3 0.92727397    5  TRUE    E -0.8903234\n4        4 0.77324322    3 FALSE    K  0.7529609\n5        5 0.25968125    5  TRUE    E  0.4452159\n7        7 0.06019516    4  TRUE    E  1.1495922\n9        9 0.05505382    3  TRUE    K  0.8696714\n10      10 0.62554280    4  TRUE    E  0.5059117\n11      11 0.96447029    3  TRUE    K  0.3317020\n12      12 0.82730287    3  TRUE    E  1.7399997\n14      14 0.21302545    2  TRUE    K -0.3262169\n15      15 0.73249612    1 FALSE    K  0.1485432\n16      16 0.49924102    3 FALSE    K -0.3798679\n17      17 0.72977197    4 FALSE    K  0.7884411\n19      19 0.43553048    3 FALSE    K  0.2583817\n20      20 0.23658045    1 FALSE    E  0.2401732\n\nrowSums(is.na(data)) # satılardaki toplam kayıp gözlem sayısı\n\n [1] 0 0 0 0 0 1 0 1 0 0 0 0 1 0 0 0 0 1 0 0\n\ncolSums(is.na(data)) # sütunlardaki toplam kayıp gözlem sayısı\n\nrow_num    col2    col3    col4    col5    col1 \n      0       0       0       0       4       0 \n\nsum(is.na(data)) # tablodaki toplam kayıp gözlem sayısı\n\n[1] 4\n\ncomplete.cases(data) # satırlarda eksik gözlemlerin durumu\n\n [1]  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE\n[13] FALSE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE\n\ndata[complete.cases(data),]\n\n   row_num       col2 col3  col4 col5       col1\n1        1 0.78219328    3 FALSE    E  0.4768080\n2        2 0.42919882    2  TRUE    E  0.8424486\n3        3 0.92727397    5  TRUE    E -0.8903234\n4        4 0.77324322    3 FALSE    K  0.7529609\n5        5 0.25968125    5  TRUE    E  0.4452159\n7        7 0.06019516    4  TRUE    E  1.1495922\n9        9 0.05505382    3  TRUE    K  0.8696714\n10      10 0.62554280    4  TRUE    E  0.5059117\n11      11 0.96447029    3  TRUE    K  0.3317020\n12      12 0.82730287    3  TRUE    E  1.7399997\n14      14 0.21302545    2  TRUE    K -0.3262169\n15      15 0.73249612    1 FALSE    K  0.1485432\n16      16 0.49924102    3 FALSE    K -0.3798679\n17      17 0.72977197    4 FALSE    K  0.7884411\n19      19 0.43553048    3 FALSE    K  0.2583817\n20      20 0.23658045    1 FALSE    E  0.2401732\n\ndata[!complete.cases(data),]\n\n   row_num       col2 col3  col4 col5         col1\n6        6 0.32122467    2  TRUE &lt;NA&gt;  0.421106220\n8        8 0.04345645    1 FALSE &lt;NA&gt; -0.896320181\n13      13 0.31502824    2 FALSE &lt;NA&gt; -0.008925433\n18      18 0.08033604    3  TRUE &lt;NA&gt; -0.171256569\n\nna.omit(data) # NA olan satırları siler.\n\n   row_num       col2 col3  col4 col5       col1\n1        1 0.78219328    3 FALSE    E  0.4768080\n2        2 0.42919882    2  TRUE    E  0.8424486\n3        3 0.92727397    5  TRUE    E -0.8903234\n4        4 0.77324322    3 FALSE    K  0.7529609\n5        5 0.25968125    5  TRUE    E  0.4452159\n7        7 0.06019516    4  TRUE    E  1.1495922\n9        9 0.05505382    3  TRUE    K  0.8696714\n10      10 0.62554280    4  TRUE    E  0.5059117\n11      11 0.96447029    3  TRUE    K  0.3317020\n12      12 0.82730287    3  TRUE    E  1.7399997\n14      14 0.21302545    2  TRUE    K -0.3262169\n15      15 0.73249612    1 FALSE    K  0.1485432\n16      16 0.49924102    3 FALSE    K -0.3798679\n17      17 0.72977197    4 FALSE    K  0.7884411\n19      19 0.43553048    3 FALSE    K  0.2583817\n20      20 0.23658045    1 FALSE    E  0.2401732"
  },
  {
    "objectID": "data_types.html#tibble",
    "href": "data_types.html#tibble",
    "title": "2  Veri Tipleri ve Yapıları",
    "section": "2.5 tibble",
    "text": "2.5 tibble\ntibble, Hadley Wickham tarafından geliştirilen ve dplyr paketi ile sıkça kullanılan bir veri yapısıdır. tibble, data.frame’e benzerdir, ancak bazı önemli farklar vardır. tibble, daha düzenli ve okunabilir bir çıktı üretir ve bazı varsayılan davranışları data.frame’den farklıdır. Modern data.frame olarak tanımlanmaktadır.\n\n# tibble örneği\nlibrary(tibble)\n\nogrenciler_tibble &lt;- tribble(\n  ~Ad,     ~Yas, ~Cinsiyet,\n  \"Ali\",   20,   \"Erkek\",\n  \"Ayşe\",  22,   \"Kadın\",\n  \"Mehmet\", 21,  \"Erkek\",\n  \"Zeynep\", 23,  \"Kadın\"\n)\n\n# tibble'ı görüntüleme\nprint(ogrenciler_tibble)\n\n# A tibble: 4 × 3\n  Ad       Yas Cinsiyet\n  &lt;chr&gt;  &lt;dbl&gt; &lt;chr&gt;   \n1 Ali       20 Erkek   \n2 Ayşe      22 Kadın   \n3 Mehmet    21 Erkek   \n4 Zeynep    23 Kadın   \n\n\nYukarıdaki örnekte, “ogrenciler_tibble” adında bir tibble oluşturuldu. tibble, sütun adlarını ve içeriği daha okunabilir bir şekilde görüntüler ve sütunların başlık ve veri tipi (~Ad, ~Yas, ~Cinsiyet) gibi özelliklerini korur.\n\n\n\n\n\n\nNot\n\n\n\nHem dataframe hem de tibble veri analizi ve işleme işlemlerinde kullanışlıdır. Hangi veri yapısını kullanacağınız, projenizin gereksinimlerine ve kişisel tercihinize bağlıdır. Özellikle veri analizi için dplyr gibi paketlerle çalışırken tibble tercih edilir."
  },
  {
    "objectID": "data_types.html#faktörler",
    "href": "data_types.html#faktörler",
    "title": "2  Veri Tipleri ve Yapıları",
    "section": "2.6 Faktörler",
    "text": "2.6 Faktörler\n\nFaktörler, verileri kategorilere ayırmak ve düzeyler halinde depolamak için kullanılan veri nesneleridir. Hem karakter hem de tam sayıları depolayabilirler.\n“Erkek,”Kadın” ve Doğru, Yanlış vb. gibi istatistiksel modelleme için veri analizinde faydalıdırlar.\nFaktörler, girdi olarak bir vektör alınarak factor() işlevi kullanılarak oluşturulur.\n\n\ndata &lt;- c(rep(\"erkek\",5),rep(\"kadın\",7))\nprint(data)\n\n [1] \"erkek\" \"erkek\" \"erkek\" \"erkek\" \"erkek\" \"kadın\" \"kadın\" \"kadın\" \"kadın\"\n[10] \"kadın\" \"kadın\" \"kadın\"\n\nis.factor(data)\n\n[1] FALSE\n\n# veriyi faktöre çevirme\nfactor_data &lt;- factor(data)\n\nprint(factor_data)\n\n [1] erkek erkek erkek erkek erkek kadın kadın kadın kadın kadın kadın kadın\nLevels: erkek kadın\n\nprint(is.factor(factor_data))\n\n[1] TRUE\n\nas.numeric(factor_data)\n\n [1] 1 1 1 1 1 2 2 2 2 2 2 2\n\n# data frame için vektörler oluşturalım\nboy &lt;- c(132,151,162,139,166,147,122)\nkilo &lt;- c(48,49,66,53,67,52,40)\ncinsiyet &lt;- c(\"erkek\",\"erkek\",\"kadın\",\"kadın\",\"erkek\",\"kadın\",\"erkek\")\n\n# data frame\ndf &lt;- data.frame(boy,kilo,cinsiyet)\nstr(df)\n\n'data.frame':   7 obs. of  3 variables:\n $ boy     : num  132 151 162 139 166 147 122\n $ kilo    : num  48 49 66 53 67 52 40\n $ cinsiyet: chr  \"erkek\" \"erkek\" \"kadın\" \"kadın\" ...\n\ndf$cinsiyet &lt;- factor(cinsiyet)\nstr(df)\n\n'data.frame':   7 obs. of  3 variables:\n $ boy     : num  132 151 162 139 166 147 122\n $ kilo    : num  48 49 66 53 67 52 40\n $ cinsiyet: Factor w/ 2 levels \"erkek\",\"kadın\": 1 1 2 2 1 2 1\n\nprint(is.factor(df$cinsiyet))\n\n[1] TRUE\n\n# cinsiyet kolononun seviyeleri\nprint(df$cinsiyet)\n\n[1] erkek erkek kadın kadın erkek kadın erkek\nLevels: erkek kadın\n\n# seviyelerin sırası değiştirilebilir.\n\ndf2 &lt;- c(rep(\"düşük\",4),rep(\"orta\",5),rep(\"yüksek\",2))\n\nfactor_df2 &lt;- factor(df2)\nprint(factor_df2)\n\n [1] düşük  düşük  düşük  düşük  orta   orta   orta   orta   orta   yüksek\n[11] yüksek\nLevels: düşük orta yüksek\n\norder_df2 &lt;- factor(factor_df2,levels = c(\"yüksek\",\"orta\",\"düşük\"))\nprint(order_df2)\n\n [1] düşük  düşük  düşük  düşük  orta   orta   orta   orta   orta   yüksek\n[11] yüksek\nLevels: yüksek orta düşük\n\n# ordered=TRUE ile seviyelerin sıralı olduğu ifade edilir\norder_df2 &lt;- factor(factor_df2,levels = c(\"yüksek\",\"orta\",\"düşük\"),ordered = TRUE)\nprint(order_df2)\n\n [1] düşük  düşük  düşük  düşük  orta   orta   orta   orta   orta   yüksek\n[11] yüksek\nLevels: yüksek &lt; orta &lt; düşük\n\n# Faktör seviyesi üretme\n\n# gl() fonksiyonunu kullanarak faktör seviyeleri üretebiliriz. \n# Girdi olarak kaç seviye ve her seviyeden kaç tane sayı oalcağı belirtilir.\n\nfaktor &lt;- gl(n=3, k=4, labels = c(\"level1\", \"level2\",\"level3\"),ordered = TRUE)\nprint(faktor)\n\n [1] level1 level1 level1 level1 level2 level2 level2 level2 level3 level3\n[11] level3 level3\nLevels: level1 &lt; level2 &lt; level3"
  },
  {
    "objectID": "functions.html",
    "href": "functions.html",
    "title": "3  Fonksiyonlar",
    "section": "",
    "text": "Fonksiyonlar çoğu programlama dillerinin çok önemli bir özelliğidir. Yalnızca mevcut fonksiyonları kullanmak yerine, belirli işleri yapmak için kendimize ait fonksiyonlar yazabiliriz. Ama neden fonksiyon yazmalıyız?\n\nTekrarlardan kaçınmanızı sağlar.\nYeniden kullanımı kolaylaştırır.\nKarmaşık komut dosyalarından kaçınmanıza yardımcı olur.\nHata ayıklamayı kolaylaştırır.\n\nBir fonksiyonun temel kod yapısı aşağıdak gibidir:\nfunction_name &lt;- function(arg_1, arg_2, ...) {    Function body }\n\n# kare alma fonksiyonu\nf_kare &lt;- function(x) {\n   x^2\n }\n\nf_kare(15)\n\n[1] 225\n\nf_kare(x=20)\n\n[1] 400\n\n# standart sapma fonksiyonu\n\n# Standart sapmanın hesaplanması\n# sqrt(sum((x - mean(x))^2) / (length(x) - 1))\n\nset.seed(123) # Pseudo-randomization\nx1 &lt;- rnorm(1000, 0, 1.0)\nx2 &lt;- rnorm(1000, 0, 1.5)\nx3 &lt;- rnorm(1000, 0, 5.0)\n\n# her serinin ayrı ayrı standart sapmasının hesaplanması\nsd1 &lt;- sqrt(sum((x1 - mean(x1))^2) / (length(x1) - 1))\nsd2 &lt;- sqrt(sum((x2 - mean(x2))^2) / (length(x2) - 1))\nsd3 &lt;- sqrt(sum((x3 - mean(x1))^2) / (length(x3) - 1))\nc(sd1 = sd1, sd2 = sd2, sd3 = sd3)\n\n     sd1      sd2      sd3 \n0.991695 1.514511 4.893180 \n\n# fonksiyonu oluşturalım\nf_sd &lt;- function(x) {\n  result &lt;- sqrt(sum((x - mean(x))^2) / (length(x) - 1))\n  return(result)\n}\n\nsd1 &lt;- f_sd(x1)\nsd2 &lt;- f_sd(x2)\nsd3 &lt;- f_sd(x3)\nc(sd1 = sd1, sd2 = sd2, sd3 = sd3)\n\n     sd1      sd2      sd3 \n0.991695 1.514511 4.891787 \n\n# standartlaştırma fonksiyonu\nf_std &lt;- function(x) {\nm &lt;- mean(x)\ns &lt;- sd(x)\n(x - m) / s\n}\n\nx4 &lt;- rnorm(10,5,10)\nx4\n\n [1]  3.496925  1.722429 -9.481653 -1.972846 30.984902  4.625850 14.134919\n [8]  3.154735 11.098243  4.472732\n\nf_std(x4)\n\n [1] -0.2517201 -0.4155359 -1.4498610 -0.7566719  2.2858821 -0.1475014\n [7]  0.7303455 -0.2833100  0.4500093 -0.1616367"
  },
  {
    "objectID": "if_else_for.html#if-else",
    "href": "if_else_for.html#if-else",
    "title": "4  Kontrol İfadeleri",
    "section": "4.1 if-else",
    "text": "4.1 if-else\nBu kombinasyon R’de en sık kullanılan kontrol yapılarındandır. Bu yapıda, bir koşulu test edebilir ve doğru veya yanlış olmasına bağlı olarak ona göre hareket edebilirsiniz. if-else kombinasyonlarında aşağıdaki yapılar kullanılmaktadır.\nif (condition){\n#do something if condition is true\n}\n\n\nif (condition){\n#do something if condition is true\n}\nelse{\n#do someting if condition is not true\n}\n\nif (condition){\n\n#do something if condition is true\n\n} else if (condition2) {\n\n#do someting if condition2 is true\n\n} else {\n\n#do something if neither condition 1 nor condition 2 is true\n\n}\n\nx &lt;- 8\n\nif (x &lt; 10) {\n    print(\"x 10'dan küçüktür\")\n} else {\n    print(\"x 10'dan büyüktür ya da 10'a eşittir\")\n}\n\n[1] \"x 10'dan küçüktür\"\n\n# ifelse \n# ifelse(condition, do_if_true, do_if_false)\ndf &lt;- data.frame(value = 1:9)\ndf$group &lt;- ifelse(df$value &lt;= 3,1,ifelse(df$value &gt; 3 & df$value &lt;= 6,2,3))\ndf\n\n  value group\n1     1     1\n2     2     1\n3     3     1\n4     4     2\n5     5     2\n6     6     2\n7     7     3\n8     8     3\n9     9     3"
  },
  {
    "objectID": "if_else_for.html#döngüler",
    "href": "if_else_for.html#döngüler",
    "title": "4  Kontrol İfadeleri",
    "section": "4.2 Döngüler",
    "text": "4.2 Döngüler\n\nfor döngüleri bir tekrarlayıcı değişken alır ve ona bir diziden veya vektörden ardışık değerler atar. En yaygın olarak bir nesnenin öğeleri üzerinde tekrarlayan işlem yapmak için kullanılır.\nwhile döngüleri bir şartı test ederek başlar. Eğer denenecek şart doğru ise istenilen komutlar yerine getirilir. Döngü şartın doğru olmadığı ana kadar devam eder.\nrepeat sonsuz bir döngü oluşturur. Döngüden çıkmak için break kullanılır.\nnext ifadesi ile bir döngüdeki belirli tekrarlar atlanabilir.\n\n\nfor (i in 1:5) {\n    print(i)\n}\n\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n\nv &lt;- LETTERS[1:4]\nfor ( i in v) {\n   print(i)\n}\n\n[1] \"A\"\n[1] \"B\"\n[1] \"C\"\n[1] \"D\"\n\n# dataframe içerisinde for\nfor (i in 1:nrow(df)){\n  \n  df[i,\"multiply\"] &lt;- df[i,\"value\"] * df[i,\"group\"]\n}\n\n# i yerine farklı ifade de kullanılabilir\n(x &lt;- data.frame(age=c(28, 35, 13, 13),\n                height=c(1.62, 1.53, 1.83, 1.71),\n                weight=c(65, 59, 72, 83)))\n\n  age height weight\n1  28   1.62     65\n2  35   1.53     59\n3  13   1.83     72\n4  13   1.71     83\n\nfor (var in colnames(x)) {\n    m &lt;- mean(x[, var])\n    print(paste(\"Average\", var, \"is\", m))\n}\n\n[1] \"Average age is 22.25\"\n[1] \"Average height is 1.6725\"\n[1] \"Average weight is 69.75\"\n\n# while\n\nx &lt;- 0\n\nwhile (x^2 &lt; 20) {\n  print(x)      # Print x\n  x &lt;- x + 1    # x'i bir artır\n}\n\n[1] 0\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n\n# repeat\n\nx &lt;- 0\n\nrepeat {\n    if (x^2 &gt; 20) break     # bu koşul sağlandığında döngüyü bitir\n    print(x)               \n    x &lt;- x + 1              # x'i bir artır\n}\n\n[1] 0\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n\n# next\n\nfor(i in 1:7) {\nif (i==4) next # i=4 olduğunda atla\nprint(1:i)\n}\n\n[1] 1\n[1] 1 2\n[1] 1 2 3\n[1] 1 2 3 4 5\n[1] 1 2 3 4 5 6\n[1] 1 2 3 4 5 6 7\n\n(s &lt;- seq(1,10,1))\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\nfor (i in s) {\n    if (i%%2 == 1) { # mod\n        next\n    } else {\n        print(i)\n    }\n}\n\n[1] 2\n[1] 4\n[1] 6\n[1] 8\n[1] 10\n\n# döngü içinde döngü\n\n(mat &lt;- matrix(nrow=4, ncol=4))\n\n     [,1] [,2] [,3] [,4]\n[1,]   NA   NA   NA   NA\n[2,]   NA   NA   NA   NA\n[3,]   NA   NA   NA   NA\n[4,]   NA   NA   NA   NA\n\nnr &lt;-  nrow(mat)\nnc &lt;-  ncol(mat)\n\n# matrisin içini dolduralım\nfor(i in 1:nr) {\n  for (j in 1:nc) {\n    mat[i, j] = i * j\n  }\n}\n\nmat\n\n     [,1] [,2] [,3] [,4]\n[1,]    1    2    3    4\n[2,]    2    4    6    8\n[3,]    3    6    9   12\n[4,]    4    8   12   16"
  },
  {
    "objectID": "date_time.html",
    "href": "date_time.html",
    "title": "5  Tarih ve Zaman İşlemleri",
    "section": "",
    "text": "Tarihler, Date sınıfı tarafından temsil edilir ve as.Date() işlevi kullanılarak bir karakter dizesinden oluşturulabilir. Bu, R’de bir Date nesnesi elde etmenin yaygın bir yoludur. Date sınıfı varsayılan olarak tarihleri 1 Ocak 1970’den bu yana geçen günlerin sayısı olarak temsil eder. as.Date() işlevinin kullanılması bir karakter dizesinden Date nesneleri oluşturmamıza olanak tanır. Varsayılan biçim “YYYY/m/d” veya “YYYY-m-d” şeklindedir.\n\nSys.Date()\n\n[1] \"2023-12-25\"\n\nclass(Sys.Date())\n\n[1] \"Date\"\n\nmyDate &lt;- as.Date(\"2022-01-04\")\n\nclass(myDate)\n\n[1] \"Date\"\n\n# format argümanı ile tarih formatı tanımlanabilir\nas.Date(\"12/31/2021\", format = \"%m/%d/%Y\")\n\n[1] \"2021-12-31\"\n\n# year\nformat(myDate, \"%Y\")\n\n[1] \"2022\"\n\nas.numeric(format(myDate, \"%Y\"))\n\n[1] 2022\n\n# weekday\nweekdays(myDate)\n\n[1] \"Salı\"\n\n# month\nmonths(myDate)\n\n[1] \"Ocak\"\n\n# quarters\nquarters(myDate)\n\n[1] \"Q1\"\n\n# create date sequence \ndate_week &lt;- seq(from = as.Date(\"2021-10-1\"), \n    to = as.Date(\"2021/12/31\"), \n    by = \"1 week\")\n\ndate_week\n\n [1] \"2021-10-01\" \"2021-10-08\" \"2021-10-15\" \"2021-10-22\" \"2021-10-29\"\n [6] \"2021-11-05\" \"2021-11-12\" \"2021-11-19\" \"2021-11-26\" \"2021-12-03\"\n[11] \"2021-12-10\" \"2021-12-17\" \"2021-12-24\" \"2021-12-31\"\n\ndate_day &lt;- seq(from = as.Date(\"2021-12-15\"), \n    to = as.Date(\"2021/12/31\"), \n    by = \"day\")\n\ndate_day\n\n [1] \"2021-12-15\" \"2021-12-16\" \"2021-12-17\" \"2021-12-18\" \"2021-12-19\"\n [6] \"2021-12-20\" \"2021-12-21\" \"2021-12-22\" \"2021-12-23\" \"2021-12-24\"\n[11] \"2021-12-25\" \"2021-12-26\" \"2021-12-27\" \"2021-12-28\" \"2021-12-29\"\n[16] \"2021-12-30\" \"2021-12-31\"\n\ndate_month &lt;- seq(from = as.Date(\"2021-1-15\"), \n    to = as.Date(\"2021/12/31\"), \n    by = \"month\")\n\ndate_month\n\n [1] \"2021-01-15\" \"2021-02-15\" \"2021-03-15\" \"2021-04-15\" \"2021-05-15\"\n [6] \"2021-06-15\" \"2021-07-15\" \"2021-08-15\" \"2021-09-15\" \"2021-10-15\"\n[11] \"2021-11-15\" \"2021-12-15\"\n\n\nTemel R POSIXt sınıfları, saat dilimlerini kontrol ederek tarih ve saatlere izin verir. R’de kullanılabilen iki POSIXt alt sınıfı vardır: POSIXct ve POSIXlt. POSIXct sınıfı, GMT (UTC – evrensel saat, koordineli) 1970-01-01 gece yarısından bu yana işaretli saniye sayısı olarak tarih-saat değerlerini temsil eder. POSIXlt sınıfı, tarih-saat değerlerini, saniye (sn), dakika (dk), saat (saat), ayın günü (mday), ay (mon), yıl (yıl), gün için öğeleri içeren adlandırılmış bir liste olarak temsil eder.\nTarih-saatleri temsil eden en yaygın format kodları seti, strptime() işlevinin yardım dosyasında listelenmiştir (konsolunuza help(strptime) yazın).\n\nSys.time()\n\n[1] \"2023-12-25 17:33:14 +03\"\n\nclass(Sys.time())\n\n[1] \"POSIXct\" \"POSIXt\" \n\nmyDateTime &lt;- \"2021-12-11 22:10:35\"\nmyDateTime\n\n[1] \"2021-12-11 22:10:35\"\n\nclass(myDateTime)\n\n[1] \"character\"\n\nas.POSIXct(myDateTime)\n\n[1] \"2021-12-11 22:10:35 +03\"\n\nclass(as.POSIXct(myDateTime))\n\n[1] \"POSIXct\" \"POSIXt\" \n\nSys.timezone()\n\n[1] \"Europe/Istanbul\"\n\nas.POSIXct(\"30-12-2021 23:25\", format = \"%d-%m-%Y %H:%M\")\n\n[1] \"2021-12-30 23:25:00 +03\"\n\nmyDateTime.POSIXlt &lt;- as.POSIXlt(myDateTime)\n\n# seconds\nmyDateTime.POSIXlt$sec\n\n[1] 35\n\n# minutes\nmyDateTime.POSIXlt$min\n\n[1] 10\n\n# hours\nmyDateTime.POSIXlt$hour\n\n[1] 22\n\n# POSIXt nesneleri tarih formatına dönüştürülebilir.\nas.Date(myDateTime.POSIXlt)\n\n[1] \"2021-12-11\"\n\n\nlubridate paketi, R’de tarih ve saatlerle çalışmayı kolaylaştıran çeşitli işlevler sağlar. Lubridate paketi, ymd(), ymd_hms(),dmy(), dmy_hms(),mdy()gibi işlevler sağlayarak tarih-zamanların ayrıştırılmasını kolay ve hızlı hale getirir.\n\nlibrary(lubridate)\n\n\nAttaching package: 'lubridate'\n\n\nThe following objects are masked from 'package:base':\n\n    date, intersect, setdiff, union\n\n# convert a number into a data object\nymd(20211215) # year-month-date\n\n[1] \"2021-12-15\"\n\nymd_hm(202112121533) # year-month-date-hour-minute\n\n[1] \"2021-12-12 15:33:00 UTC\"\n\nmdy(\"Aralık 13, 2021\") # month date year\n\n[1] \"2021-12-13\"\n\nmdy(\"12 18, 2021\") # month date year\n\n[1] \"2021-12-18\"\n\ndmy(241221) # day-month-year\n\n[1] \"2021-12-24\"\n\ndmy(24122021) # day-month-year\n\n[1] \"2021-12-24\"\n\ntoday &lt;- Sys.time()\ntoday\n\n[1] \"2023-12-25 17:33:14 +03\"\n\nyear(today) # year\n\n[1] 2023\n\nmonth(today) # month\n\n[1] 12\n\nmonth(today, label = TRUE) # labeled month\n\n[1] Ara\n12 Levels: Oca &lt; Şub &lt; Mar &lt; Nis &lt; May &lt; Haz &lt; Tem &lt; Ağu &lt; Eyl &lt; ... &lt; Ara\n\nmonth(today,label = TRUE, abbr = FALSE) # labeled month\n\n[1] Aralık\n12 Levels: Ocak &lt; Şubat &lt; Mart &lt; Nisan &lt; Mayıs &lt; Haziran &lt; ... &lt; Aralık\n\nweek(today) # week\n\n[1] 52\n\nmday(today) # day\n\n[1] 25\n\nwday(today) # weekday\n\n[1] 2\n\nwday(today, label = TRUE) # labeled weekday\n\n[1] Pzt\nLevels: Paz &lt; Pzt &lt; Sal &lt; Çar &lt; Per &lt; Cum &lt; Cmt\n\nwday(today, label = TRUE, abbr = FALSE) # labeled weekday\n\n[1] Pazartesi\n7 Levels: Pazar &lt; Pazartesi &lt; Salı &lt; Çarşamba &lt; Perşembe &lt; ... &lt; Cumartesi\n\nyday(today) # day of the year\n\n[1] 359\n\nhour(today) # hour\n\n[1] 17\n\nminute(today) # minute\n\n[1] 33\n\nsecond(today) # second\n\n[1] 14.57964\n\n\nYukarıda listelenen çeşitli işlevlere ek olarak, zoo paketindeki as.yearmon() ve as.yearqtr() işlevleri, düzenli aralıklarla aylık ve üç aylık verilerle çalışırken uygundur.\n\nlibrary(zoo)\n\n\nAttaching package: 'zoo'\n\n\nThe following objects are masked from 'package:base':\n\n    as.Date, as.Date.numeric\n\nas.yearmon(today)\n\n[1] \"Ara 2023\"\n\nformat(as.yearmon(today), \"%B %Y\")\n\n[1] \"Aralık 2023\"\n\nformat(as.yearmon(today), \"%Y-%m\")\n\n[1] \"2023-12\"\n\nas.yearqtr(today)\n\n[1] \"2023 Q4\"\n\n# dataframe içerisinde tarih kullanmak\ndf &lt;-\n  data.frame(date = c(\n    \"2010-02-01\",\n    \"20110522\",\n    \"2009/04/30\",\n    \"2012 11 05\",\n    \"11-9-2015\"\n  ))\n\ndf$date2 &lt;- as.Date(parse_date_time(df$date, c(\"ymd\", \"mdy\")))            \ndf\n\n        date      date2\n1 2010-02-01 2010-02-01\n2   20110522 2011-05-22\n3 2009/04/30 2009-04-30\n4 2012 11 05 2012-11-05\n5  11-9-2015 2015-11-09"
  },
  {
    "objectID": "strings.html",
    "href": "strings.html",
    "title": "6  Metin İşlemleri",
    "section": "",
    "text": "R’de bir çift tek tırnak veya çift tırnak içine yazılan herhangi bir değer, bir karakter olarak kabul edilir. Karakter yapısına sahip olan verilerin analizi özellikle metin madenciliği konusunda kullanışlıdır. Karakter nesneleri üzerinde çalışmak için kullanılabilecek birçok fonksiyon vardır.\n\n# as.character\nas.character(3.14)\n\n[1] \"3.14\"\n\nclass(as.character(3.14))\n\n[1] \"character\"\n\n# paste and paste0 karakter verilerini birleştirir\n\nfirst &lt;- \"Fatih\"\nlast &lt;- \"Tüzen\"\npaste(first,last) # default olarak arada boşluk bırakır\n\n[1] \"Fatih Tüzen\"\n\npaste0(first,last) # default olarak arada boşluk yoktur\n\n[1] \"FatihTüzen\"\n\npaste(\"R\",\"Python\",\"SPSS\",sep = \"-\")\n\n[1] \"R-Python-SPSS\"\n\n# grep fonksiyonu metin vektörünün içinde belirli bir deseni arar\n\nx &lt;- c(\"R programı\",\"program\",\"istatistik\",\"programlama dili\",\"bilgisayar\",\"matematik\")\ngrep(\"program\",x)\n\n[1] 1 2 4\n\ngrep(\"^ist\",x) # ist ile başlayan ifdelerin olduğu yerler\n\n[1] 3\n\ngrep(\"tik$\",x) # tik ile biten ifdelerin olduğu yerler\n\n[1] 3 6\n\n# grepl TRUE-FALSE olarak sonuç döndürür\ngrepl(\"tik$\",x) # tik ile biten ifdelerin olduğu yerler\n\n[1] FALSE FALSE  TRUE FALSE FALSE  TRUE\n\nx[grep(\"tik$\",x)] # tik ile biten ifdelerin olduğu yerler\n\n[1] \"istatistik\" \"matematik\" \n\nx[grepl(\"tik$\",x)] # tik ile biten ifdelerin olduğu yerler\n\n[1] \"istatistik\" \"matematik\" \n\n# nchar karakter uzunluğunu verir\nnchar(x)\n\n[1] 10  7 10 16 10  9\n\nnchar(\"R Programlama\") # boşluklar da sayılır!\n\n[1] 13\n\n# tolower ve toupper \ntoupper(\"program\") # karakteri büyük harf yapar\n\n[1] \"PROGRAM\"\n\ntolower(c(\"SPSS\",\"R\",\"PYTHON\")) # karakteri küçük harf yapar\n\n[1] \"spss\"   \"r\"      \"python\"\n\n# substr ve substring ile karakter parçalama yapılır\nsubstr(\"123456789\",start = 3, stop = 6)\n\n[1] \"3456\"\n\nsubstring(\"123456789\", first =3, last = 6)\n\n[1] \"3456\"\n\nx &lt;- \"R Programlama\"\nsubstr(x,nchar(x)-3,nchar(x)) # son 4 karakteri getir\n\n[1] \"lama\"\n\n# strsplit karakteri bölme işini yapar\nstrsplit(\"Ankara;İstanbul;İzmir\",split = \";\")\n\n[[1]]\n[1] \"Ankara\"   \"İstanbul\" \"İzmir\""
  },
  {
    "objectID": "apply.html",
    "href": "apply.html",
    "title": "7  Apply Ailesi",
    "section": "",
    "text": "Apply() ailesi, matrislerden, dizilerden, listelerden ve veri çerçevelerinden tekrarlayan bir şekilde veri dilimlerini işlemek için fonksiyonlarla doldurulur. Bu fonksiyonlar sayesinde döngü yapılarının kullanılmasından kaçınır. Bir girdi listesi, matris veya dizi üzerinde hareket ederler ve bir veya birkaç isteğe bağlı argümanla adlandırılmış bir fonksiyon uygularlar.\n\napply(): bir dizinin ya da matrisin satır ya da sütunlarına fonksiyon uygular.\nlapply(): liste üzerindeki her elemana fonksiyon uygular.\nsapply(): lapply fonksiyonu ile aynıdır ancak çıktısı matris ya da veri çerçevesidir.\nmapply(): lapply fonksiyonunun çoklu versiyonudur.\ntapply(): faktör ya da grup düzeyinde fonksiyon uygular.\n\n\n# apply\nx &lt;-matrix(rnorm(30), nrow=5, ncol=6)\nx\n\n            [,1]       [,2]       [,3]        [,4]        [,5]        [,6]\n[1,]  1.54178048 -1.2553941 -0.0430977  0.66328561  1.81008320  1.57259243\n[2,] -0.55285265 -1.0146670  0.7151234  0.99030096 -2.15232916 -0.01369859\n[3,] -0.07672848  0.1212627  0.2202373 -0.10889414 -0.01026106  0.20570793\n[4,]  0.46350164  2.2498898  0.2799281 -0.09882526  0.55351167 -0.89300984\n[5,]  0.85138979 -1.5953682  0.1556793 -0.70765418 -2.36116088  0.87421455\n\napply(x, 2 ,sum) # sütunlar üzerinde işlem yapar\n\n[1]  2.227091 -1.494277  1.327870  0.738213 -2.160156  1.745806\n\napply(x, 1 ,sum) # satırlar üzerinde işlem yapar\n\n[1]  4.2892499 -2.0281231  0.3513242  2.5549962 -2.7828996\n\napply(x, 2 ,sd)\n\n[1] 0.8118393 1.5637215 0.2791555 0.6771357 1.7928489 0.9310881\n\napply(x, 1 ,mean)\n\n[1]  0.71487499 -0.33802051  0.05855404  0.42583269 -0.46381659\n\nmat &lt;- matrix(c(1:12),nrow=4)\nmat\n\n     [,1] [,2] [,3]\n[1,]    1    5    9\n[2,]    2    6   10\n[3,]    3    7   11\n[4,]    4    8   12\n\napply(mat,2,function(x) x^2) # gözlemlerin karesi alınır\n\n     [,1] [,2] [,3]\n[1,]    1   25   81\n[2,]    4   36  100\n[3,]    9   49  121\n[4,]   16   64  144\n\napply(mat,2, quantile,probs=c(0.25,0.5,0.75)) # extra argüman eklenebilir\n\n    [,1] [,2]  [,3]\n25% 1.75 5.75  9.75\n50% 2.50 6.50 10.50\n75% 3.25 7.25 11.25\n\n# lapply\n\na &lt;-matrix(1:9, 3,3)\nb &lt;-matrix(4:15, 4,3)\nc &lt;-matrix(8:10, 3,2)\nmylist&lt;-list(a,b,c)\nmylist\n\n[[1]]\n     [,1] [,2] [,3]\n[1,]    1    4    7\n[2,]    2    5    8\n[3,]    3    6    9\n\n[[2]]\n     [,1] [,2] [,3]\n[1,]    4    8   12\n[2,]    5    9   13\n[3,]    6   10   14\n[4,]    7   11   15\n\n[[3]]\n     [,1] [,2]\n[1,]    8    8\n[2,]    9    9\n[3,]   10   10\n\nlapply(mylist,mean)\n\n[[1]]\n[1] 5\n\n[[2]]\n[1] 9.5\n\n[[3]]\n[1] 9\n\nlapply(mylist,sum)\n\n[[1]]\n[1] 45\n\n[[2]]\n[1] 114\n\n[[3]]\n[1] 54\n\nlapply(mylist, function(x) x[,1]) # listedeki her matrisin ilk kolonunu çıkar\n\n[[1]]\n[1] 1 2 3\n\n[[2]]\n[1] 4 5 6 7\n\n[[3]]\n[1]  8  9 10\n\nmylist2 &lt;- list(a = 1:4, b = rnorm(10), c = rnorm(20, 1), d = rnorm(100, 5))\nmylist2\n\n$a\n[1] 1 2 3 4\n\n$b\n [1]  0.4007991  0.9783349 -0.6081947 -1.6488578  0.1513088 -0.1205840\n [7] -2.6415948  0.8053038  0.3105759 -0.1633856\n\n$c\n [1]  2.82112190  2.95713984  1.46508272  0.89722659  1.79513800  0.73038262\n [7]  1.34031569  1.41849786  1.58829539  1.93871233  1.10221103 -1.40903805\n[13]  0.75361127  3.19457721  0.18147389 -0.09294708  0.15504004 -1.33809517\n[19] -1.18412679  0.64050270\n\n$d\n  [1] 4.860458 6.161845 4.506900 5.208844 4.915755 6.983826 3.607385 4.952451\n  [9] 5.013009 5.518577 5.077401 3.863265 5.399911 5.336360 4.412505 5.678274\n [17] 4.037082 4.893050 4.861506 3.405639 4.470505 5.242635 7.183677 4.712322\n [25] 4.315016 5.108567 3.718048 4.819479 5.708572 3.435481 5.501764 4.703601\n [33] 3.522524 4.455906 5.403657 5.347450 4.251129 5.486193 6.247104 4.439129\n [41] 5.270417 4.038951 4.843934 4.535087 4.480054 6.564626 6.193436 5.798476\n [49] 4.740845 6.724017 4.442865 4.503328 4.211895 6.098337 3.657813 5.126161\n [57] 4.407112 4.336956 6.220488 4.550205 4.484225 6.210415 4.560441 5.492047\n [65] 5.883476 3.198779 5.133494 7.030563 4.945829 4.913630 4.164592 3.473206\n [73] 4.016882 4.697150 6.105781 4.554085 3.650549 4.503644 5.534759 4.526271\n [81] 3.401756 5.997468 4.978518 5.629489 6.151685 4.869917 4.688891 6.378675\n [89] 4.260911 3.713767 3.845430 5.284655 6.471970 4.714088 4.731074 4.103953\n [97] 5.341377 4.906292 5.853517 6.062187\n\nlapply(mylist2, mean)\n\n$a\n[1] 2.5\n\n$b\n[1] -0.2536294\n\n$c\n[1] 0.9477561\n\n$d\n[1] 4.959772\n\n# sapply\n\nhead(cars)\n\n  speed dist\n1     4    2\n2     4   10\n3     7    4\n4     7   22\n5     8   16\n6     9   10\n\nlapply(cars,sum)\n\n$speed\n[1] 770\n\n$dist\n[1] 2149\n\nsapply(cars,sum)\n\nspeed  dist \n  770  2149 \n\nsapply(cars,median)\n\nspeed  dist \n   15    36 \n\nsapply(cars,mean)\n\nspeed  dist \n15.40 42.98 \n\n# mapply\n\nl1 &lt;- list(a=c(1:5),b=c(6:10))\nl2 &lt;- list(c=c(11:15),d=c(16:20))\n\nmapply(sum,l1$a,l1$b,l2$c,l2$d) # gözlemlerin toplamı\n\n[1] 34 38 42 46 50\n\nmapply(prod,l1$a,l1$b,l2$c,l2$d) # gözlemlerin çarpımı\n\n[1]  1056  2856  5616  9576 15000\n\n# tapply\n\ndf &lt;- data.frame(x =round(runif(15,min=1,max=10)),\n                 group=sample(c(1:3),15,replace = TRUE))\ndf\n\n   x group\n1  7     3\n2  3     3\n3  6     2\n4  5     1\n5  8     1\n6  6     1\n7  5     3\n8  6     2\n9  8     3\n10 2     1\n11 5     1\n12 8     2\n13 2     3\n14 6     1\n15 4     3\n\ntapply(df$x,df$group, FUN = mean)\n\n       1        2        3 \n5.333333 6.666667 4.833333 \n\ntapply(df$x,df$group, FUN = sum)\n\n 1  2  3 \n32 20 29 \n\ntapply(df$x,df$group, FUN = length)\n\n1 2 3 \n6 3 6 \n\ntapply(df$x,df$group, FUN = range)\n\n$`1`\n[1] 2 8\n\n$`2`\n[1] 6 8\n\n$`3`\n[1] 2 8"
  },
  {
    "objectID": "import_export.html",
    "href": "import_export.html",
    "title": "8  Verilerin İçe ve Dışa Aktarılması",
    "section": "",
    "text": "Temel anlamda R içerisinde excel ortamından (virgül ya da noktalı virgül ile ayrılmış) veri aktarımı (import) için read.table, read.csv, read.csv2 fonksiyonları kullanılmaktadır. Excel’den veri aktarımı için readxl veya openxlsxpaketi kullanılabilir. Verilerin dışa aktarılması için ise write.csv, write.table fonksiyonları kullanılabilir.\n\n# delimiter/separator , ise\nmtcars_csv &lt;- read.csv(\"datasets/mtcars_csv.csv\")\nstr(mtcars_csv)\n\n'data.frame':   32 obs. of  12 variables:\n $ car : chr  \"Mazda RX4\" \"Mazda RX4 Wag\" \"Datsun 710\" \"Hornet 4 Drive\" ...\n $ mpg : num  21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ...\n $ cyl : int  6 6 4 6 8 6 8 4 4 6 ...\n $ disp: num  160 160 108 258 360 ...\n $ hp  : int  110 110 93 110 175 105 245 62 95 123 ...\n $ drat: num  3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ...\n $ wt  : num  2.62 2.88 2.32 3.21 3.44 ...\n $ qsec: num  16.5 17 18.6 19.4 17 ...\n $ vs  : int  0 0 1 1 0 1 0 1 1 1 ...\n $ am  : int  1 1 1 0 0 0 0 0 0 0 ...\n $ gear: int  4 4 4 3 3 3 3 4 4 4 ...\n $ carb: int  4 4 1 1 2 1 4 2 2 4 ...\n\n# stringsAsFactors karakter kolonları faktöre çevirir\nmtcars_csv &lt;- read.csv(\"datasets/mtcars_csv.csv\",\n                       stringsAsFactors = TRUE)\nstr(mtcars_csv)\n\n'data.frame':   32 obs. of  12 variables:\n $ car : Factor w/ 32 levels \"AMC Javelin\",..: 18 19 5 13 14 31 7 21 20 22 ...\n $ mpg : num  21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ...\n $ cyl : int  6 6 4 6 8 6 8 4 4 6 ...\n $ disp: num  160 160 108 258 360 ...\n $ hp  : int  110 110 93 110 175 105 245 62 95 123 ...\n $ drat: num  3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ...\n $ wt  : num  2.62 2.88 2.32 3.21 3.44 ...\n $ qsec: num  16.5 17 18.6 19.4 17 ...\n $ vs  : int  0 0 1 1 0 1 0 1 1 1 ...\n $ am  : int  1 1 1 0 0 0 0 0 0 0 ...\n $ gear: int  4 4 4 3 3 3 3 4 4 4 ...\n $ carb: int  4 4 1 1 2 1 4 2 2 4 ...\n\n# delimiter/separator ; ise\n\nmtcars_csv2 &lt;- read.csv2(\"datasets/mtcars_csv2.csv\")\nstr(mtcars_csv2)\n\n'data.frame':   32 obs. of  12 variables:\n $ car : chr  \"Mazda RX4\" \"Mazda RX4 Wag\" \"Datsun 710\" \"Hornet 4 Drive\" ...\n $ mpg : chr  \"21\" \"21\" \"22.8\" \"21.4\" ...\n $ cyl : int  6 6 4 6 8 6 8 4 4 6 ...\n $ disp: chr  \"160\" \"160\" \"108\" \"258\" ...\n $ hp  : int  110 110 93 110 175 105 245 62 95 123 ...\n $ drat: chr  \"3.9\" \"3.9\" \"3.85\" \"3.08\" ...\n $ wt  : chr  \"2.62\" \"2.875\" \"2.32\" \"3.215\" ...\n $ qsec: chr  \"16.46\" \"17.02\" \"18.61\" \"19.44\" ...\n $ vs  : int  0 0 1 1 0 1 0 1 1 1 ...\n $ am  : int  1 1 1 0 0 0 0 0 0 0 ...\n $ gear: int  4 4 4 3 3 3 3 4 4 4 ...\n $ carb: int  4 4 1 1 2 1 4 2 2 4 ...\n\n# read.table\n\nmtcars_csv &lt;- read.table(\"datasets/mtcars_csv.csv\",\n                         sep = \",\",\n                         header = TRUE)\n\nmtcars_csv2 &lt;- read.table(\"datasets/mtcars_csv2.csv\",\n                          sep = \";\",\n                          header = TRUE)\n\n# txt uzantılı dosyalar\n\nmtcars_txt &lt;- read.table(\"datasets/mtcars_txt.txt\",\n                          sep = \";\",\n                          header = TRUE)\n\n# excel dosyaları için\nlibrary(readxl)\nmtcars_excel &lt;- read_excel(\"datasets/mtcars_excel.xlsx\",\n                           sheet = \"mtcars\")\nstr(mtcars_excel)\n\ntibble [32 × 12] (S3: tbl_df/tbl/data.frame)\n $ car : chr [1:32] \"Mazda RX4\" \"Mazda RX4 Wag\" \"Datsun 710\" \"Hornet 4 Drive\" ...\n $ mpg : num [1:32] 21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ...\n $ cyl : num [1:32] 6 6 4 6 8 6 8 4 4 6 ...\n $ disp: num [1:32] 160 160 108 258 360 ...\n $ hp  : num [1:32] 110 110 93 110 175 105 245 62 95 123 ...\n $ drat: num [1:32] 3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ...\n $ wt  : num [1:32] 2.62 2.88 2.32 3.21 3.44 ...\n $ qsec: num [1:32] 16.5 17 18.6 19.4 17 ...\n $ vs  : num [1:32] 0 0 1 1 0 1 0 1 1 1 ...\n $ am  : num [1:32] 1 1 1 0 0 0 0 0 0 0 ...\n $ gear: num [1:32] 4 4 4 3 3 3 3 4 4 4 ...\n $ carb: num [1:32] 4 4 1 1 2 1 4 2 2 4 ...\n\nmtcars_excel2 &lt;- read_excel(\"datasets/mtcars_excel.xlsx\",\n                            sheet = \"mtcars2\")\n\nNew names:\n• `` -&gt; `...2`\n• `` -&gt; `...3`\n• `` -&gt; `...4`\n• `` -&gt; `...5`\n\nstr(mtcars_excel2) # tablo 2. satırdan başlıyor o yüzden tablo başlıkları hatalı\n\ntibble [33 × 5] (S3: tbl_df/tbl/data.frame)\n $ mtcars verisi: chr [1:33] \"car\" \"Mazda RX4\" \"Mazda RX4 Wag\" \"Datsun 710\" ...\n $ ...2         : chr [1:33] \"mpg\" \"21\" \"21\" \"22.8\" ...\n $ ...3         : chr [1:33] \"cyl\" \"6\" \"6\" \"4\" ...\n $ ...4         : chr [1:33] \"disp\" \"160\" \"160\" \"108\" ...\n $ ...5         : chr [1:33] \"hp\" \"110\" \"110\" \"93\" ...\n\n# istenilen satırı atlayarak istenilen sheet adı için,\nmtcars_excel2 &lt;- read_excel(\"datasets/mtcars_excel.xlsx\",\n                            sheet = \"mtcars2\",\n                            skip = 1)\nstr(mtcars_excel2)\n\ntibble [32 × 5] (S3: tbl_df/tbl/data.frame)\n $ car : chr [1:32] \"Mazda RX4\" \"Mazda RX4 Wag\" \"Datsun 710\" \"Hornet 4 Drive\" ...\n $ mpg : num [1:32] 21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ...\n $ cyl : num [1:32] 6 6 4 6 8 6 8 4 4 6 ...\n $ disp: num [1:32] 160 160 108 258 360 ...\n $ hp  : num [1:32] 110 110 93 110 175 105 245 62 95 123 ...\n\n\n\n# export\n\nwrite.csv(mtcars_csv,\"write_mtcars.csv\",\n          row.names = FALSE)\n\nwrite.table(mtcars_csv,\"write_mtcars.csv\",\n            row.names = FALSE,\n            sep = \";\")\n\nopenxlsx::write.xlsx(mtcars_csv,\"write_mtcars.xlsx\")"
  },
  {
    "objectID": "data_manipulation.html#select",
    "href": "data_manipulation.html#select",
    "title": "Veri Manipulasyonu",
    "section": "select",
    "text": "select\nTabloyu (veri çerçevesi) seçmek ve dönüştürmek için R’da dplyr paketinde bulunan select() fonksiyonu oldukça kullanışlıdır. Bu fonksiyon, belirli sütunları seçmek veya sütun adlarını değiştirmek için kullanılır. select() fonksiyonunu kullanarak veri çerçevesinde sütunları seçme ve dönüştürme işlemlerinin nasıl yapıldığına dair aşağıda örnekler mevcuttur.\n\n\n\n\n\n\nNot\n\n\n\nselect() fonksiyonu ayrıca sütunları seçerken veya döndürürken bazı özel işlevler de kullanmanıza olanak tanır. Örneğin, starts_with(), ends_with(), contains() gibi işlevleri kullanarak sütun adlarının belirli bir örüntüyü karşılayanları seçebilirsiniz. Bu fonksiyon, veri manipülasyonu işlemlerinde oldukça kullanışlıdır ve veri çerçevelerini istediğiniz şekilde özelleştirmenize yardımcı olur.\n\n\n\n# belirli sütunları seçmek\ncounties %&gt;%\nselect(state, county, population, unemployment)\n\n# A tibble: 3,138 × 4\n   state   county   population unemployment\n   &lt;chr&gt;   &lt;chr&gt;         &lt;dbl&gt;        &lt;dbl&gt;\n 1 Alabama Autauga       55221          7.6\n 2 Alabama Baldwin      195121          7.5\n 3 Alabama Barbour       26932         17.6\n 4 Alabama Bibb          22604          8.3\n 5 Alabama Blount        57710          7.7\n 6 Alabama Bullock       10678         18  \n 7 Alabama Butler        20354         10.9\n 8 Alabama Calhoun      116648         12.3\n 9 Alabama Chambers      34079          8.9\n10 Alabama Cherokee      26008          7.9\n# ℹ 3,128 more rows\n\n# belli aralıkta bütün sütunların seçilmesi\ncounties %&gt;%\nselect(state, county, drive:work_at_home)\n\n# A tibble: 3,138 × 8\n   state   county   drive carpool transit  walk other_transp work_at_home\n   &lt;chr&gt;   &lt;chr&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;        &lt;dbl&gt;\n 1 Alabama Autauga   87.5     8.8     0.1   0.5          1.3          1.8\n 2 Alabama Baldwin   84.7     8.8     0.1   1            1.4          3.9\n 3 Alabama Barbour   83.8    10.9     0.4   1.8          1.5          1.6\n 4 Alabama Bibb      83.2    13.5     0.5   0.6          1.5          0.7\n 5 Alabama Blount    84.9    11.2     0.4   0.9          0.4          2.3\n 6 Alabama Bullock   74.9    14.9     0.7   5            1.7          2.8\n 7 Alabama Butler    84.5    12.4     0     0.8          0.6          1.7\n 8 Alabama Calhoun   85.3     9.4     0.2   1.2          1.2          2.7\n 9 Alabama Chambers  85.1    11.9     0.2   0.3          0.4          2.1\n10 Alabama Cherokee  83.9    12.1     0.2   0.6          0.7          2.5\n# ℹ 3,128 more rows\n\n# belirli bir ifadeyi içeren sütunları seçmek\ncounties %&gt;%\nselect(state, county, contains(\"employed\"))\n\n# A tibble: 3,138 × 4\n   state   county   employed self_employed\n   &lt;chr&gt;   &lt;chr&gt;       &lt;dbl&gt;         &lt;dbl&gt;\n 1 Alabama Autauga     23986           5.5\n 2 Alabama Baldwin     85953           5.8\n 3 Alabama Barbour      8597           7.3\n 4 Alabama Bibb         8294           6.7\n 5 Alabama Blount      22189           4.2\n 6 Alabama Bullock      3865           5.4\n 7 Alabama Butler       7813           6.2\n 8 Alabama Calhoun     47401           5  \n 9 Alabama Chambers    13689           2.8\n10 Alabama Cherokee    10155           7.9\n# ℹ 3,128 more rows\n\n# belirli bir ifade ile başyalan sütunları seçmek\ncounties %&gt;%\nselect(state, county, starts_with(\"income\"))\n\n# A tibble: 3,138 × 6\n   state   county   income income_err income_per_cap income_per_cap_err\n   &lt;chr&gt;   &lt;chr&gt;     &lt;dbl&gt;      &lt;dbl&gt;          &lt;dbl&gt;              &lt;dbl&gt;\n 1 Alabama Autauga   51281       2391          24974               1080\n 2 Alabama Baldwin   50254       1263          27317                711\n 3 Alabama Barbour   32964       2973          16824                798\n 4 Alabama Bibb      38678       3995          18431               1618\n 5 Alabama Blount    45813       3141          20532                708\n 6 Alabama Bullock   31938       5884          17580               2055\n 7 Alabama Butler    32229       1793          18390                714\n 8 Alabama Calhoun   41703        925          21374                489\n 9 Alabama Chambers  34177       2949          21071               1366\n10 Alabama Cherokee  36296       1710          21811               1556\n# ℹ 3,128 more rows\n\n# belirli bir ifade ile biten sütunları seçmek\ncounties %&gt;%\nselect(state, county, ends_with(\"work\"))\n\n# A tibble: 3,138 × 5\n   state   county   private_work public_work family_work\n   &lt;chr&gt;   &lt;chr&gt;           &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;\n 1 Alabama Autauga          73.6        20.9         0  \n 2 Alabama Baldwin          81.5        12.3         0.4\n 3 Alabama Barbour          71.8        20.8         0.1\n 4 Alabama Bibb             76.8        16.1         0.4\n 5 Alabama Blount           82          13.5         0.4\n 6 Alabama Bullock          79.5        15.1         0  \n 7 Alabama Butler           77.4        16.2         0.2\n 8 Alabama Calhoun          74.1        20.8         0.1\n 9 Alabama Chambers         85.1        12.1         0  \n10 Alabama Cherokee         73.1        18.5         0.5\n# ℹ 3,128 more rows\n\n# belirli sütunları hariç tutarak seçmek\ncounties %&gt;%\nselect(census_id:population,-c(men:land_area))\n\n# A tibble: 3,138 × 6\n   census_id state   county   region metro    population\n   &lt;chr&gt;     &lt;chr&gt;   &lt;chr&gt;    &lt;chr&gt;  &lt;chr&gt;         &lt;dbl&gt;\n 1 1001      Alabama Autauga  South  Metro         55221\n 2 1003      Alabama Baldwin  South  Metro        195121\n 3 1005      Alabama Barbour  South  Nonmetro      26932\n 4 1007      Alabama Bibb     South  Metro         22604\n 5 1009      Alabama Blount   South  Metro         57710\n 6 1011      Alabama Bullock  South  Nonmetro      10678\n 7 1013      Alabama Butler   South  Nonmetro      20354\n 8 1015      Alabama Calhoun  South  Metro        116648\n 9 1017      Alabama Chambers South  Nonmetro      34079\n10 1019      Alabama Cherokee South  Nonmetro      26008\n# ℹ 3,128 more rows\n\n# belirli veri tipindeki sütunları seçmek\ncounties %&gt;%\nselect(where(is.character))\n\n# A tibble: 3,138 × 5\n   census_id state   county   region metro   \n   &lt;chr&gt;     &lt;chr&gt;   &lt;chr&gt;    &lt;chr&gt;  &lt;chr&gt;   \n 1 1001      Alabama Autauga  South  Metro   \n 2 1003      Alabama Baldwin  South  Metro   \n 3 1005      Alabama Barbour  South  Nonmetro\n 4 1007      Alabama Bibb     South  Metro   \n 5 1009      Alabama Blount   South  Metro   \n 6 1011      Alabama Bullock  South  Nonmetro\n 7 1013      Alabama Butler   South  Nonmetro\n 8 1015      Alabama Calhoun  South  Metro   \n 9 1017      Alabama Chambers South  Nonmetro\n10 1019      Alabama Cherokee South  Nonmetro\n# ℹ 3,128 more rows\n\n# select ile kolon adı değiştirmek\ncounties %&gt;%\nselect(census_id,pop = population)\n\n# A tibble: 3,138 × 2\n   census_id    pop\n   &lt;chr&gt;      &lt;dbl&gt;\n 1 1001       55221\n 2 1003      195121\n 3 1005       26932\n 4 1007       22604\n 5 1009       57710\n 6 1011       10678\n 7 1013       20354\n 8 1015      116648\n 9 1017       34079\n10 1019       26008\n# ℹ 3,128 more rows"
  },
  {
    "objectID": "data_manipulation.html#arrange",
    "href": "data_manipulation.html#arrange",
    "title": "Veri Manipulasyonu",
    "section": "arrange",
    "text": "arrange\ndplyr paketinde bulunan arrange() fonksiyonu, veri çerçevesindeki satırları belirli bir sıraya göre düzenlemek için kullanılır. Bu sıralama işlemi, bir veya daha fazla sütunun değerlerine göre yapılabilir. arrange() fonksiyonu, veri analizi ve veri keşfi sırasında verilerinizi anlamak ve analiz etmek için önemli bir araçtır.\n\ncounties_selected &lt;- counties %&gt;%\nselect(state, county, population, unemployment)\n\n# artan sıralama (ascending)\ncounties_selected %&gt;%\narrange(population)\n\n# A tibble: 3,138 × 4\n   state      county    population unemployment\n   &lt;chr&gt;      &lt;chr&gt;          &lt;dbl&gt;        &lt;dbl&gt;\n 1 Hawaii     Kalawao           85          0  \n 2 Texas      King             267          5.1\n 3 Nebraska   McPherson        433          0.9\n 4 Montana    Petroleum        443          6.6\n 5 Nebraska   Arthur           448          4  \n 6 Nebraska   Loup             548          0.7\n 7 Nebraska   Blaine           551          0.7\n 8 New Mexico Harding          565          6  \n 9 Texas      Kenedy           565          0  \n10 Colorado   San Juan         606         13.8\n# ℹ 3,128 more rows\n\n# azalan sıralama (descending)\ncounties_selected %&gt;%\narrange(desc(population))\n\n# A tibble: 3,138 × 4\n   state      county      population unemployment\n   &lt;chr&gt;      &lt;chr&gt;            &lt;dbl&gt;        &lt;dbl&gt;\n 1 California Los Angeles   10038388         10  \n 2 Illinois   Cook           5236393         10.7\n 3 Texas      Harris         4356362          7.5\n 4 Arizona    Maricopa       4018143          7.7\n 5 California San Diego      3223096          8.7\n 6 California Orange         3116069          7.6\n 7 Florida    Miami-Dade     2639042         10  \n 8 New York   Kings          2595259         10  \n 9 Texas      Dallas         2485003          7.6\n10 New York   Queens         2301139          8.6\n# ℹ 3,128 more rows\n\n# birden fazla sütun seçerek sıralama\ncounties_selected %&gt;%\narrange(state,desc(population))\n\n# A tibble: 3,138 × 4\n   state   county     population unemployment\n   &lt;chr&gt;   &lt;chr&gt;           &lt;dbl&gt;        &lt;dbl&gt;\n 1 Alabama Jefferson      659026          9.1\n 2 Alabama Mobile         414251          9.8\n 3 Alabama Madison        346438          8.5\n 4 Alabama Montgomery     228138          8.8\n 5 Alabama Shelby         203530          5.5\n 6 Alabama Tuscaloosa     200458          7.6\n 7 Alabama Baldwin        195121          7.5\n 8 Alabama Lee            150982          7.3\n 9 Alabama Morgan         119786          9.9\n10 Alabama Calhoun        116648         12.3\n# ℹ 3,128 more rows"
  },
  {
    "objectID": "data_manipulation.html#filter",
    "href": "data_manipulation.html#filter",
    "title": "Veri Manipulasyonu",
    "section": "filter",
    "text": "filter\ndplyr paketindeki filter() fonksiyonu, veri çerçevesinde belirli bir koşulu karşılayan satırları seçmek için kullanılır. Bu fonksiyon, veri analizi sırasında verilerinizi filtrelemek ve istediğiniz verileri elde etmek için oldukça kullanışlıdır. filter() fonksiyonu, veri çerçevesindeki satırları seçerken belirli sütunlardaki değerlere dayalı koşulları uygulamanıza olanak tanır.\n\n# sadece New York'u filtrele\ncounties_selected %&gt;%\narrange(desc(population)) %&gt;%\nfilter(state == \"New York\")\n\n# A tibble: 62 × 4\n   state    county      population unemployment\n   &lt;chr&gt;    &lt;chr&gt;            &lt;dbl&gt;        &lt;dbl&gt;\n 1 New York Kings          2595259         10  \n 2 New York Queens         2301139          8.6\n 3 New York New York       1629507          7.5\n 4 New York Suffolk        1501373          6.4\n 5 New York Bronx          1428357         14  \n 6 New York Nassau         1354612          6.4\n 7 New York Westchester     967315          7.6\n 8 New York Erie            921584          7  \n 9 New York Monroe          749356          7.7\n10 New York Richmond        472481          6.9\n# ℹ 52 more rows\n\n# işsizlik oranı 6'dan küçük olanları filtrele\ncounties_selected %&gt;%\narrange(desc(population)) %&gt;%\nfilter(unemployment &lt; 6)\n\n# A tibble: 949 × 4\n   state    county       population unemployment\n   &lt;chr&gt;    &lt;chr&gt;             &lt;dbl&gt;        &lt;dbl&gt;\n 1 Virginia Fairfax         1128722          4.9\n 2 Utah     Salt Lake       1078958          5.8\n 3 Hawaii   Honolulu         984178          5.6\n 4 Texas    Collin           862215          4.9\n 5 Texas    Denton           731851          5.7\n 6 Texas    Fort Bend        658331          5.1\n 7 Kansas   Johnson          566814          4.5\n 8 Maryland Anne Arundel     555280          5.9\n 9 Colorado Jefferson        552344          5.9\n10 Utah     Utah             551957          5.5\n# ℹ 939 more rows\n\n# birden fazla koşul\ncounties_selected %&gt;%\narrange(desc(population)) %&gt;%\nfilter(state == \"New York\",unemployment &lt; 6)\n\n# A tibble: 5 × 4\n  state    county     population unemployment\n  &lt;chr&gt;    &lt;chr&gt;           &lt;dbl&gt;        &lt;dbl&gt;\n1 New York Tompkins       103855          5.9\n2 New York Chemung         88267          5.4\n3 New York Madison         72427          5.1\n4 New York Livingston      64801          5.4\n5 New York Seneca          35144          5.5\n\n# veya kullanımı\ncounties_selected %&gt;%\narrange(desc(population)) %&gt;%\nfilter(state == \"New York\"| unemployment &lt; 6)\n\n# A tibble: 1,006 × 4\n   state    county      population unemployment\n   &lt;chr&gt;    &lt;chr&gt;            &lt;dbl&gt;        &lt;dbl&gt;\n 1 New York Kings          2595259         10  \n 2 New York Queens         2301139          8.6\n 3 New York New York       1629507          7.5\n 4 New York Suffolk        1501373          6.4\n 5 New York Bronx          1428357         14  \n 6 New York Nassau         1354612          6.4\n 7 Virginia Fairfax        1128722          4.9\n 8 Utah     Salt Lake      1078958          5.8\n 9 Hawaii   Honolulu        984178          5.6\n10 New York Westchester     967315          7.6\n# ℹ 996 more rows"
  },
  {
    "objectID": "data_manipulation.html#mutate",
    "href": "data_manipulation.html#mutate",
    "title": "Veri Manipulasyonu",
    "section": "mutate",
    "text": "mutate\ndplyr paketindeki mutate() fonksiyonu, bir veri çerçevesinde yeni sütunlar oluşturmak veya mevcut sütunları dönüştürmek için kullanılır. Bu fonksiyon, veri çerçevesindeki herhangi bir sütunu işleyerek yeni bilgiler eklemenize veya mevcut sütunları değiştirmenize olanak tanır. mutate() fonksiyonu, veri analizi sırasında verilerinizi özelleştirmek için oldukça kullanışlıdır.\n\n# işsiz nüfus sayısına ilişkin değişken üretme\ncounties_selected %&gt;%\nmutate(unemployed_population = population * unemployment / 100)\n\n# A tibble: 3,138 × 5\n   state   county   population unemployment unemployed_population\n   &lt;chr&gt;   &lt;chr&gt;         &lt;dbl&gt;        &lt;dbl&gt;                 &lt;dbl&gt;\n 1 Alabama Autauga       55221          7.6                 4197.\n 2 Alabama Baldwin      195121          7.5                14634.\n 3 Alabama Barbour       26932         17.6                 4740.\n 4 Alabama Bibb          22604          8.3                 1876.\n 5 Alabama Blount        57710          7.7                 4444.\n 6 Alabama Bullock       10678         18                   1922.\n 7 Alabama Butler        20354         10.9                 2219.\n 8 Alabama Calhoun      116648         12.3                14348.\n 9 Alabama Chambers      34079          8.9                 3033.\n10 Alabama Cherokee      26008          7.9                 2055.\n# ℹ 3,128 more rows\n\n# yeni sütun ekle\ncounties_selected %&gt;%\nmutate(unemployed_population = population * unemployment / 100) %&gt;%\narrange(desc(unemployed_population))\n\n# A tibble: 3,138 × 5\n   state      county         population unemployment unemployed_population\n   &lt;chr&gt;      &lt;chr&gt;               &lt;dbl&gt;        &lt;dbl&gt;                 &lt;dbl&gt;\n 1 California Los Angeles      10038388         10                1003839.\n 2 Illinois   Cook              5236393         10.7               560294.\n 3 Texas      Harris            4356362          7.5               326727.\n 4 Arizona    Maricopa          4018143          7.7               309397.\n 5 California Riverside         2298032         12.9               296446.\n 6 California San Diego         3223096          8.7               280409.\n 7 Michigan   Wayne             1778969         14.9               265066.\n 8 California San Bernardino    2094769         12.6               263941.\n 9 Florida    Miami-Dade        2639042         10                 263904.\n10 New York   Kings             2595259         10                 259526.\n# ℹ 3,128 more rows\n\n# var olan sütunu güncelle\ncounties %&gt;%\n  select(state, county, population, men,women) %&gt;% \nmutate(population = men + women)\n\n# A tibble: 3,138 × 5\n   state   county   population   men women\n   &lt;chr&gt;   &lt;chr&gt;         &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1 Alabama Autauga       55221 26745 28476\n 2 Alabama Baldwin      195121 95314 99807\n 3 Alabama Barbour       26932 14497 12435\n 4 Alabama Bibb          22604 12073 10531\n 5 Alabama Blount        57710 28512 29198\n 6 Alabama Bullock       10678  5660  5018\n 7 Alabama Butler        20354  9502 10852\n 8 Alabama Calhoun      116648 56274 60374\n 9 Alabama Chambers      34079 16258 17821\n10 Alabama Cherokee      26008 12975 13033\n# ℹ 3,128 more rows\n\n# birden fazla yeni değişken üretme\ncounties %&gt;%\n  select(state, county, population, men,women) %&gt;% \nmutate(men_ratio = men/population*100,\n       women_ratio = women/population*100)\n\n# A tibble: 3,138 × 7\n   state   county   population   men women men_ratio women_ratio\n   &lt;chr&gt;   &lt;chr&gt;         &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt;       &lt;dbl&gt;\n 1 Alabama Autauga       55221 26745 28476      48.4        51.6\n 2 Alabama Baldwin      195121 95314 99807      48.8        51.2\n 3 Alabama Barbour       26932 14497 12435      53.8        46.2\n 4 Alabama Bibb          22604 12073 10531      53.4        46.6\n 5 Alabama Blount        57710 28512 29198      49.4        50.6\n 6 Alabama Bullock       10678  5660  5018      53.0        47.0\n 7 Alabama Butler        20354  9502 10852      46.7        53.3\n 8 Alabama Calhoun      116648 56274 60374      48.2        51.8\n 9 Alabama Chambers      34079 16258 17821      47.7        52.3\n10 Alabama Cherokee      26008 12975 13033      49.9        50.1\n# ℹ 3,128 more rows\n\n# transmute sadece yeni eklenen değişkenleri gösterir\n\ncounties %&gt;%\n  select(state, county, population, men,women) %&gt;% \ntransmute(men_ratio = men/population*100,\n       women_ratio = women/population*100)\n\n# A tibble: 3,138 × 2\n   men_ratio women_ratio\n       &lt;dbl&gt;       &lt;dbl&gt;\n 1      48.4        51.6\n 2      48.8        51.2\n 3      53.8        46.2\n 4      53.4        46.6\n 5      49.4        50.6\n 6      53.0        47.0\n 7      46.7        53.3\n 8      48.2        51.8\n 9      47.7        52.3\n10      49.9        50.1\n# ℹ 3,128 more rows\n\n# mutate_at ile koşula göre birden fazla değişkene aynı fonksiyon uygulanabilir.\nscale2 &lt;- function(x, na.rm = FALSE) (x - mean(x, na.rm = na.rm)) / sd(x, na.rm)\n\ncounties_selected %&gt;% \n  mutate_at(c(\"population\",\"unemployment\"),scale2)\n\n# A tibble: 3,138 × 4\n   state   county   population unemployment\n   &lt;chr&gt;   &lt;chr&gt;         &lt;dbl&gt;        &lt;dbl&gt;\n 1 Alabama Autauga     -0.141       -0.0563\n 2 Alabama Baldwin      0.292       -0.0846\n 3 Alabama Barbour     -0.228        2.78  \n 4 Alabama Bibb        -0.242        0.142 \n 5 Alabama Blount      -0.133       -0.0279\n 6 Alabama Bullock     -0.278        2.89  \n 7 Alabama Butler      -0.249        0.880 \n 8 Alabama Calhoun      0.0495       1.28  \n 9 Alabama Chambers    -0.206        0.313 \n10 Alabama Cherokee    -0.231        0.0288\n# ℹ 3,128 more rows\n\ncounties_selected %&gt;% # birden fazla argüman kullanımı\n  mutate_at(c(\"population\",\"unemployment\"),scale2,na.rm = TRUE)\n\n# A tibble: 3,138 × 4\n   state   county   population unemployment\n   &lt;chr&gt;   &lt;chr&gt;         &lt;dbl&gt;        &lt;dbl&gt;\n 1 Alabama Autauga     -0.141       -0.0563\n 2 Alabama Baldwin      0.292       -0.0846\n 3 Alabama Barbour     -0.228        2.78  \n 4 Alabama Bibb        -0.242        0.142 \n 5 Alabama Blount      -0.133       -0.0279\n 6 Alabama Bullock     -0.278        2.89  \n 7 Alabama Butler      -0.249        0.880 \n 8 Alabama Calhoun      0.0495       1.28  \n 9 Alabama Chambers    -0.206        0.313 \n10 Alabama Cherokee    -0.231        0.0288\n# ℹ 3,128 more rows\n\n# mutate_if ile koşula göre birden fazla değişkende değişiklik yapılabilir.\nstr(counties_selected)\n\nspc_tbl_ [3,138 × 4] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ state       : chr [1:3138] \"Alabama\" \"Alabama\" \"Alabama\" \"Alabama\" ...\n $ county      : chr [1:3138] \"Autauga\" \"Baldwin\" \"Barbour\" \"Bibb\" ...\n $ population  : num [1:3138] 55221 195121 26932 22604 57710 ...\n $ unemployment: num [1:3138] 7.6 7.5 17.6 8.3 7.7 18 10.9 12.3 8.9 7.9 ...\n\ncounties_selected &lt;- counties_selected %&gt;% \n  mutate_if(is.character,as.factor)\n\nstr(counties_selected)\n\nspc_tbl_ [3,138 × 4] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ state       : Factor w/ 50 levels \"Alabama\",\"Alaska\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ county      : Factor w/ 1847 levels \"Abbeville\",\"Acadia\",..: 82 89 100 149 164 225 235 246 293 315 ...\n $ population  : num [1:3138] 55221 195121 26932 22604 57710 ...\n $ unemployment: num [1:3138] 7.6 7.5 17.6 8.3 7.7 18 10.9 12.3 8.9 7.9 ...\n\ncounties_selected %&gt;% \n  mutate_if(is.numeric, scale2, na.rm = TRUE)\n\n# A tibble: 3,138 × 4\n   state   county   population unemployment\n   &lt;fct&gt;   &lt;fct&gt;         &lt;dbl&gt;        &lt;dbl&gt;\n 1 Alabama Autauga     -0.141       -0.0563\n 2 Alabama Baldwin      0.292       -0.0846\n 3 Alabama Barbour     -0.228        2.78  \n 4 Alabama Bibb        -0.242        0.142 \n 5 Alabama Blount      -0.133       -0.0279\n 6 Alabama Bullock     -0.278        2.89  \n 7 Alabama Butler      -0.249        0.880 \n 8 Alabama Calhoun      0.0495       1.28  \n 9 Alabama Chambers    -0.206        0.313 \n10 Alabama Cherokee    -0.231        0.0288\n# ℹ 3,128 more rows\n\n\n\n\n\n\n\n\nDikkat\n\n\n\nmutate() ve transmute() fonksiyonları, dplyr paketinde veri çerçevelerini işlerken kullanılan iki farklı fonksiyondur. Her ikisi de yeni sütunlar oluşturmanıza veya mevcut sütunları dönüştürmenize olanak tanır, ancak aralarındaki temel fark işlevlerinin dönüş değerleridir. Ancak kullanırken aşağıda belirtilen hususlara dikkat etmek gerekir:\n\nmutate(), veri çerçevesine yeni sütunlar eklerken, orijinal veri çerçevesini değiştirmez. Yani, yeni sütunlar eklerken orijinal veri çerçevesinin boyutu artar. mutate() fonksiyonu, orijinal veri çerçevesini döndürürken eklenen sütunlarla birlikte veriyi içeren yeni bir veri çerçevesi döndürür.\ntransmute(), yeni sütunlar oluştururken orijinal veri çerçevesini değiştirmez. Ancak, transmute() fonksiyonu yalnızca belirtilen sütunları ve yeni sütunları içeren bir veri çerçevesi döndürür. Diğer orijinal sütunlar bu yeni veri çerçevesinde yer almaz. Bu, veri çerçevesini daha küçük ve özgünleştirilmiş bir hale getirir."
  },
  {
    "objectID": "data_manipulation.html#rename",
    "href": "data_manipulation.html#rename",
    "title": "Veri Manipulasyonu",
    "section": "rename",
    "text": "rename\nrename() fonksiyonu, R programlama dilinde veri çerçevesi içindeki sütunların adlarını değiştirmek için kullanılır. Veri çerçevesi sütunlarının daha açıklayıcı veya kullanıcı dostu adlara sahip olmasını sağlar. Bu, veri analizi ve raporlama süreçlerini daha anlaşılır ve düzenli hale getirmenize yardımcı olabilir.\n\n# yeniden isimlendirmede eşitliği sol tarafı yeni isim olmalı\ncounties_selected %&gt;%\nrename(unemployment_rate = unemployment)\n\n# A tibble: 3,138 × 4\n   state   county   population unemployment_rate\n   &lt;fct&gt;   &lt;fct&gt;         &lt;dbl&gt;             &lt;dbl&gt;\n 1 Alabama Autauga       55221               7.6\n 2 Alabama Baldwin      195121               7.5\n 3 Alabama Barbour       26932              17.6\n 4 Alabama Bibb          22604               8.3\n 5 Alabama Blount        57710               7.7\n 6 Alabama Bullock       10678              18  \n 7 Alabama Butler        20354              10.9\n 8 Alabama Calhoun      116648              12.3\n 9 Alabama Chambers      34079               8.9\n10 Alabama Cherokee      26008               7.9\n# ℹ 3,128 more rows\n\n# select ile beraber de yeniden isimlendirme yapılabilir\ncounties_selected %&gt;%\nselect(state, county, population, unemployment_rate = unemployment)\n\n# A tibble: 3,138 × 4\n   state   county   population unemployment_rate\n   &lt;fct&gt;   &lt;fct&gt;         &lt;dbl&gt;             &lt;dbl&gt;\n 1 Alabama Autauga       55221               7.6\n 2 Alabama Baldwin      195121               7.5\n 3 Alabama Barbour       26932              17.6\n 4 Alabama Bibb          22604               8.3\n 5 Alabama Blount        57710               7.7\n 6 Alabama Bullock       10678              18  \n 7 Alabama Butler        20354              10.9\n 8 Alabama Calhoun      116648              12.3\n 9 Alabama Chambers      34079               8.9\n10 Alabama Cherokee      26008               7.9\n# ℹ 3,128 more rows\n\n\n\n\n\n\n\n\nDikkat\n\n\n\nrename fonksiyonunda eşitliğin sol tarafına yeni isim, sağ tarafına ise önceki isim yazılır."
  },
  {
    "objectID": "data_manipulation.html#count",
    "href": "data_manipulation.html#count",
    "title": "Veri Manipulasyonu",
    "section": "count",
    "text": "count\ncount() fonksiyonu, R programlama dilindeki dplyr paketinde bulunan ve belirli bir sütuna göre veri çerçevesindeki gözlemlerin sayısını hesaplamak için kullanılan bir fonksiyondur. Bu fonksiyon, veri çerçevesindeki belirli bir kategorik değişkenin benzersiz değerlerini ve her bir değer için kaç gözlemin olduğunu hesaplamak için oldukça kullanışlıdır.\ncount() fonksiyonu, veri analizi sürecinde veri özeti oluşturmak ve belirli bir değişkenin frekansını görmek için sıkça kullanılır. Ayrıca, veri çerçevesindeki her bir kategorik değeri ve bu değerlere ait gözlem sayılarını içeren yeni bir veri çerçevesi döndürür.\n\n# count ile veri setinde sayma işlemleri yapılır\ncounties %&gt;%\ncount()\n\n# A tibble: 1 × 1\n      n\n  &lt;int&gt;\n1  3138\n\n# state dağılımını elde etmek\ncounties %&gt;%\ncount(state)\n\n# A tibble: 50 × 2\n   state           n\n   &lt;chr&gt;       &lt;int&gt;\n 1 Alabama        67\n 2 Alaska         28\n 3 Arizona        15\n 4 Arkansas       75\n 5 California     58\n 6 Colorado       64\n 7 Connecticut     8\n 8 Delaware        3\n 9 Florida        67\n10 Georgia       159\n# ℹ 40 more rows\n\n# sort = TRUE ile büyükten küçüge sıralama yapılabilir\ncounties %&gt;%\ncount(state, sort = TRUE)\n\n# A tibble: 50 × 2\n   state              n\n   &lt;chr&gt;          &lt;int&gt;\n 1 Texas            253\n 2 Georgia          159\n 3 Virginia         133\n 4 Kentucky         120\n 5 Missouri         115\n 6 Kansas           105\n 7 Illinois         102\n 8 North Carolina   100\n 9 Iowa              99\n10 Tennessee         95\n# ℹ 40 more rows\n\n# wt argümanı ile değişken toplamları hesaplanabilir\ncounties %&gt;%\ncount(state, wt = population, sort = TRUE)\n\n# A tibble: 50 × 2\n   state                 n\n   &lt;chr&gt;             &lt;dbl&gt;\n 1 California     38421464\n 2 Texas          26538497\n 3 New York       19673174\n 4 Florida        19645772\n 5 Illinois       12873761\n 6 Pennsylvania   12779559\n 7 Ohio           11575977\n 8 Georgia        10006693\n 9 Michigan        9900571\n10 North Carolina  9845333\n# ℹ 40 more rows"
  },
  {
    "objectID": "data_manipulation.html#group_by-ve-summarize",
    "href": "data_manipulation.html#group_by-ve-summarize",
    "title": "Veri Manipulasyonu",
    "section": "group_by ve summarize",
    "text": "group_by ve summarize\ngroup_by() ve summarize() fonksiyonları, R programlama dilinde veri çerçevesi üzerinde gruplama ve özetleme işlemleri yapmak için kullanılan önemli dplyr fonksiyonlarıdır. Bu fonksiyonlar, veri analizi sürecinde verilerinizi daha iyi anlamak ve özetlemek için oldukça güçlü araçlardır.\ngroup_by() fonksiyonu, veri çerçevesindeki verileri belirli bir sütuna veya birden fazla sütuna göre gruplamak için kullanılır. Bu gruplandırma işlemi, veriyi belirli bir kategoriye veya sınıfa göre ayırmak için kullanılır.\nsummarize() fonksiyonu, gruplanmış veri üzerinde istatistiksel veya özetleyici işlemler yapmak için kullanılır. Bu fonksiyon, belirli bir grup için özet bilgileri hesaplamak için kullanılır.\n\ncounties %&gt;%\nsummarize(total_population = sum(population))\n\n# A tibble: 1 × 1\n  total_population\n             &lt;dbl&gt;\n1        315845353\n\ncounties %&gt;%\nsummarize(total_population = sum(population),\naverage_unemployment = mean(unemployment))\n\n# A tibble: 1 × 2\n  total_population average_unemployment\n             &lt;dbl&gt;                &lt;dbl&gt;\n1        315845353                 7.80\n\n# istenilen düzeye göre hesaplamalar group_by ile yapılır\ncounties %&gt;%\ngroup_by(state) %&gt;%\nsummarize(total_pop = sum(population),\naverage_unemployment = sum(unemployment))\n\n# A tibble: 50 × 3\n   state       total_pop average_unemployment\n   &lt;chr&gt;           &lt;dbl&gt;                &lt;dbl&gt;\n 1 Alabama       4830620                758. \n 2 Alaska         725461                257. \n 3 Arizona       6641928                180. \n 4 Arkansas      2958208                674. \n 5 California   38421464                626. \n 6 Colorado      5278906                477. \n 7 Connecticut   3593222                 65.3\n 8 Delaware       926454                 23.8\n 9 Florida      19645772                696. \n10 Georgia      10006693               1586. \n# ℹ 40 more rows\n\ncounties %&gt;%\ngroup_by(state) %&gt;%\nsummarize(total_pop = sum(population),\naverage_unemployment = mean(unemployment)) %&gt;%\narrange(desc(average_unemployment))\n\n# A tibble: 50 × 3\n   state          total_pop average_unemployment\n   &lt;chr&gt;              &lt;dbl&gt;                &lt;dbl&gt;\n 1 Mississippi      2988081                12.0 \n 2 Arizona          6641928                12.0 \n 3 South Carolina   4777576                11.3 \n 4 Alabama          4830620                11.3 \n 5 California      38421464                10.8 \n 6 Nevada           2798636                10.5 \n 7 North Carolina   9845333                10.5 \n 8 Florida         19645772                10.4 \n 9 Georgia         10006693                 9.97\n10 Michigan         9900571                 9.96\n# ℹ 40 more rows\n\n# birden fazla değişken düzeyinde gruplama\ncounties %&gt;%\ngroup_by(state, metro) %&gt;%\nsummarize(total_pop = sum(population))\n\n`summarise()` has grouped output by 'state'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 97 × 3\n# Groups:   state [50]\n   state      metro    total_pop\n   &lt;chr&gt;      &lt;chr&gt;        &lt;dbl&gt;\n 1 Alabama    Metro      3671377\n 2 Alabama    Nonmetro   1159243\n 3 Alaska     Metro       494990\n 4 Alaska     Nonmetro    230471\n 5 Arizona    Metro      6295145\n 6 Arizona    Nonmetro    346783\n 7 Arkansas   Metro      1806867\n 8 Arkansas   Nonmetro   1151341\n 9 California Metro     37587429\n10 California Nonmetro    834035\n# ℹ 87 more rows\n\n# elde edilen veri üzerinden devam edilecekse ungroup kullanılmalı.\n# ungroup kullanılmazsa sonradan yapılan işlemler group_by değişkenleri düzeyinde\n# devam eder\n\ncounties %&gt;%\ngroup_by(state, metro) %&gt;%\nsummarize(total_pop = sum(population)) %&gt;%\nungroup()\n\n`summarise()` has grouped output by 'state'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 97 × 3\n   state      metro    total_pop\n   &lt;chr&gt;      &lt;chr&gt;        &lt;dbl&gt;\n 1 Alabama    Metro      3671377\n 2 Alabama    Nonmetro   1159243\n 3 Alaska     Metro       494990\n 4 Alaska     Nonmetro    230471\n 5 Arizona    Metro      6295145\n 6 Arizona    Nonmetro    346783\n 7 Arkansas   Metro      1806867\n 8 Arkansas   Nonmetro   1151341\n 9 California Metro     37587429\n10 California Nonmetro    834035\n# ℹ 87 more rows\n\n# top_n en yüksek ya da en düşük sonuçları listeleme\ncounties_selected %&gt;%\ngroup_by(state) %&gt;%\ntop_n(1, population) # her eyaletteki en yüksek nüfuslu yer\n\n# A tibble: 50 × 4\n# Groups:   state [50]\n   state       county                 population unemployment\n   &lt;fct&gt;       &lt;fct&gt;                       &lt;dbl&gt;        &lt;dbl&gt;\n 1 Alabama     Jefferson                  659026          9.1\n 2 Alaska      Anchorage Municipality     299107          6.7\n 3 Arizona     Maricopa                  4018143          7.7\n 4 Arkansas    Pulaski                    390463          7.5\n 5 California  Los Angeles              10038388         10  \n 6 Colorado    El Paso                    655024          8.4\n 7 Connecticut Fairfield                  939983          9  \n 8 Delaware    New Castle                 549643          7.4\n 9 Florida     Miami-Dade                2639042         10  \n10 Georgia     Fulton                     983903          9.9\n# ℹ 40 more rows\n\ncounties_selected %&gt;%\ngroup_by(state) %&gt;%\ntop_n(-1, population) # her eyaletteki en düşük nüfuslu yer\n\n# A tibble: 50 × 4\n# Groups:   state [50]\n   state       county                   population unemployment\n   &lt;fct&gt;       &lt;fct&gt;                         &lt;dbl&gt;        &lt;dbl&gt;\n 1 Alabama     Greene                         8697         20.4\n 2 Alaska      Yakutat City and Borough        643          7.9\n 3 Arizona     Greenlee                       9023         10  \n 4 Arkansas    Calhoun                        5245          7.2\n 5 California  Alpine                         1131         10.7\n 6 Colorado    San Juan                        606         13.8\n 7 Connecticut Windham                      117470          9.3\n 8 Delaware    Kent                         169509          8.4\n 9 Florida     Liberty                        8295         10.2\n10 Georgia     Taliaferro                     1721         12.1\n# ℹ 40 more rows\n\ncounties_selected %&gt;%\ngroup_by(state) %&gt;%\ntop_n(2, population) # her eyaletteki en yüksek nüfuslu 2 yer\n\n# A tibble: 100 × 4\n# Groups:   state [50]\n   state      county                       population unemployment\n   &lt;fct&gt;      &lt;fct&gt;                             &lt;dbl&gt;        &lt;dbl&gt;\n 1 Alabama    Jefferson                        659026          9.1\n 2 Alabama    Mobile                           414251          9.8\n 3 Alaska     Anchorage Municipality           299107          6.7\n 4 Alaska     Fairbanks North Star Borough      99705          7.9\n 5 Arizona    Maricopa                        4018143          7.7\n 6 Arizona    Pima                             998537         10  \n 7 Arkansas   Benton                           238198          4.2\n 8 Arkansas   Pulaski                          390463          7.5\n 9 California Los Angeles                    10038388         10  \n10 California San Diego                       3223096          8.7\n# ℹ 90 more rows\n\n# summarise_all bütün değişkenler için özetleme yapar\ncounties_selected %&gt;% summarise_all(nlevels)\n\n# A tibble: 1 × 4\n  state county population unemployment\n  &lt;int&gt;  &lt;int&gt;      &lt;int&gt;        &lt;int&gt;\n1    50   1847          0            0\n\ncounties_selected %&gt;% \n  select(-county) %&gt;% \n  group_by(state) %&gt;% \n  summarise_all(mean)\n\n# A tibble: 50 × 3\n   state       population unemployment\n   &lt;fct&gt;            &lt;dbl&gt;        &lt;dbl&gt;\n 1 Alabama         72099.        11.3 \n 2 Alaska          25909.         9.19\n 3 Arizona        442795.        12.0 \n 4 Arkansas        39443.         8.98\n 5 California     662439.        10.8 \n 6 Colorado        82483.         7.46\n 7 Connecticut    449153.         8.16\n 8 Delaware       308818          7.93\n 9 Florida        293220.        10.4 \n10 Georgia         62935.         9.97\n# ℹ 40 more rows\n\n# summarise_at belli değişkenler için özetleme yapar\ncounties_selected %&gt;% \n  select(-county) %&gt;% \n  group_by(state) %&gt;% \n  summarise_at(\"population\",mean)\n\n# A tibble: 50 × 2\n   state       population\n   &lt;fct&gt;            &lt;dbl&gt;\n 1 Alabama         72099.\n 2 Alaska          25909.\n 3 Arizona        442795.\n 4 Arkansas        39443.\n 5 California     662439.\n 6 Colorado        82483.\n 7 Connecticut    449153.\n 8 Delaware       308818 \n 9 Florida        293220.\n10 Georgia         62935.\n# ℹ 40 more rows\n\n# summarise_if ile koşula göre özetleme yapar\ncounties_selected %&gt;% \n  summarize_if(is.numeric, mean, na.rm = TRUE)\n\n# A tibble: 1 × 2\n  population unemployment\n       &lt;dbl&gt;        &lt;dbl&gt;\n1    100652.         7.80\n\n\n\n\n\n\n\n\nDikkat\n\n\n\nungroup() fonksiyonu, dplyr paketinde kullanılan bir işlevdir ve bir veri çerçevesini veya gruplanmış bir veri çerçevesini gruplardan çıkarmak için kullanılır. group_by() fonksiyonu ile gruplanmış bir veri çerçevesini oluşturduğunuzda, veri çerçevesi belirli sütunlar üzerinde gruplama yapar ve her grup için ayrı işlemler yapmanıza olanak tanır. Ancak bazen gruplamadan çıkmak ve orijinal veri çerçevesini elde etmek isteyebilirsiniz.\n\n\n\n# Örnek bir veri çerçevesi oluşturalım\nveri &lt;- data.frame(\n  Sehir = c(\"İstanbul\", \"Ankara\", \"İstanbul\", \"Ankara\", \"İzmir\"),\n  Cinsiyet = c(\"Erkek\", \"Kadın\", \"Erkek\", \"Kadın\", \"Erkek\"),\n  Yas = c(28, 32, 22, 24, 30),\n  Puan = c(90, 85, 78, 92, 88)\n)\n\n# Şehir sütununa göre veriyi grupla\ngruplu_veri &lt;- group_by(veri, Sehir)\ngruplu_veri |&gt; summarise(mean(Puan))\n\n# A tibble: 3 × 2\n  Sehir    `mean(Puan)`\n  &lt;chr&gt;           &lt;dbl&gt;\n1 Ankara           88.5\n2 İstanbul         84  \n3 İzmir            88  \n\n# Grubu çıkarma\ngruplu_veri &lt;- ungroup(gruplu_veri)\ngruplu_veri |&gt; summarise(mean(Puan))\n\n# A tibble: 1 × 1\n  `mean(Puan)`\n         &lt;dbl&gt;\n1         86.6\n\n\nAynı veri setinde farklı sonuçlar elde edildiğine dikkat edelim. Eğer group_by ile oluşturulan veri setinde başka işlemler yapacaksanız öncesinde ungroup() yapmayı ihmal etmeyin.\n\n\n\n\n\n\nNot\n\n\n\ngroup_by sadece summarize fonksiyonu ile değil mutate, transmute gibi diğer fonksiyonlar ile birlikte de kullanılabilir."
  },
  {
    "objectID": "data_manipulation.html#case-when",
    "href": "data_manipulation.html#case-when",
    "title": "Veri Manipulasyonu",
    "section": "case when",
    "text": "case when\ncase_when() fonksiyonu, R programlama dilinde dplyr paketi içinde bulunan ve çoklu koşullara dayalı olarak yeni bir sütun oluşturmak veya mevcut bir sütunu dönüştürmek için kullanılan bir fonksiyondur. Bu fonksiyon, özellikle veri çerçevelerinde veya veri tablolarında, belirli koşullara dayalı olarak işlem yapmanız gerektiğinde oldukça kullanışlıdır. case_when() fonksiyonu, birden fazla koşulu kontrol ederek her bir koşula uygun bir değer veya işlem döndürmenizi sağlar. case_when() fonksiyonu, bir veya daha fazla koşul ifadesi ve bu koşullara karşılık gelecek değerler içeren çiftlerin bir listesini alır. Bu çiftler, ~ operatörü ile ayrılır.\n\n# Örnek bir veri çerçevesi oluşturalım\nveri &lt;- data.frame(\n  Ogrenci_Ad = c(\"Ali\", \"Esra\", \"Erkan\", \"Derya\"),\n  Puan = c(90, 75, 60, 80)\n)\n\n# Yeni bir sütun oluşturma: Puan kategorisi\nveri &lt;- veri %&gt;%\n  mutate(Puan_Kategorisi = case_when(\n    Puan &gt;= 90 ~ \"AA\",\n    Puan &gt;= 80 ~ \"BA\",\n    Puan &gt;= 70 ~ \"BB\",\n    Puan &gt;= 60 ~ \"CB\",\n    TRUE ~ \"FF\"  # Tüm diğer durumlar için\n  ))\n\nprint(veri)\n\n  Ogrenci_Ad Puan Puan_Kategorisi\n1        Ali   90              AA\n2       Esra   75              BB\n3      Erkan   60              CB\n4      Derya   80              BA\n\n\ncase_when() fonksiyonunu birden fazla koşul ile kullanabilirsiniz. Koşullar yukarıdan aşağıya sırayla kontrol edilir ve ilk koşulu sağlayan değer kullanılır.\n\nveri &lt;- veri %&gt;%\n  mutate(Not_Durumu = case_when(\n    Puan &gt;= 90 ~ \"Geçti\",\n    Puan &gt;= 60 & Puan &lt; 70 ~ \"Şartlı Geçti\",\n    Puan &lt; 60 ~ \"Kaldı\",\n    TRUE ~ \"Bilinmiyor\"  # Tüm diğer durumlar için\n  ))\n\nveri\n\n  Ogrenci_Ad Puan Puan_Kategorisi   Not_Durumu\n1        Ali   90              AA        Geçti\n2       Esra   75              BB   Bilinmiyor\n3      Erkan   60              CB Şartlı Geçti\n4      Derya   80              BA   Bilinmiyor"
  },
  {
    "objectID": "data_manipulation.html#reshaping",
    "href": "data_manipulation.html#reshaping",
    "title": "Veri Manipulasyonu",
    "section": "reshaping",
    "text": "reshaping\n\n\n\n\n\nR programlama dilinde tidyr paketinin içinde bulunan gather(), spread(), unite(), ve separate() gibi fonksiyonlar, veri manipülasyonu ve veri dönüşümü işlemlerinde kullanılır. Bu fonksiyonlar, veri çerçevesi içindeki verileri yeniden düzenlemek, sütunları birleştirmek veya bölmek, veriyi daha uygun bir yapıya getirmek için kullanılır.\ngather() fonksiyonu, geniş formatlı (wide format) veriyi uzun formatlı (long format) bir yapıya dönüştürmek için kullanılır. Genellikle sütun adlarını bir “anahtar” sütununda toplamak için kullanılır.\n\nlibrary(tidyr)\n\nveri &lt;- data.frame(\n  isim = c(\"Ali\", \"Esra\"),\n  Matematik = c(90, 85),\n  Fizik = c(88, 76)\n)\n\nuzun_format_veri &lt;- gather(veri, Ders, Not, -isim)\n\nprint(uzun_format_veri)\n\n  isim      Ders Not\n1  Ali Matematik  90\n2 Esra Matematik  85\n3  Ali     Fizik  88\n4 Esra     Fizik  76\n\n\nBu kod, Matematik ve Fizik sütunlarını toplar ve bir “Ders” sütunu oluşturur.\nspread() fonksiyonu, uzun formatlı veriyi geniş formatlı bir yapıya dönüştürmek için kullanılır. Genellikle “anahtar” sütunu içindeki değerleri sütun adları olarak kullanmak için kullanılır.\n\ngenis_format_veri &lt;- spread(uzun_format_veri, Ders, Not)\n\nprint(genis_format_veri)\n\n  isim Fizik Matematik\n1  Ali    88        90\n2 Esra    76        85\n\n\nBu kod, “Ders” sütunundaki değerleri sütun adlarına dönüştürür.\nunite() fonksiyonu, iki veya daha fazla sütunu birleştirerek yeni bir sütun oluşturmak için kullanılır.\n\nveri &lt;- data.frame(\n  Ad = c(\"Ali\", \"Esra\"),\n  Soyad = c(\"Yılmaz\", \"Mutlu\")\n)\n\nveri &lt;- unite(veri, AdSoyad, Ad, Soyad, sep = \" \")\n\nprint(veri)\n\n     AdSoyad\n1 Ali Yılmaz\n2 Esra Mutlu\n\n\nBu kod, “Ad” ve “Soyad” sütunlarını birleştirerek “AdSoyad” sütununu oluşturur.\nseparate() fonksiyonu, bir sütunu belirli bir ayırıcı karakterle bölmek için kullanılır. Bölen değerleri yeni sütunlarda saklar.\n\nveri &lt;- data.frame(\n  AdSoyad = c(\"Ali Yılmaz\", \"Esra Mutlu\")\n)\n\nveri &lt;- separate(veri, AdSoyad, c(\"Ad\", \"Soyad\"), sep = \" \")\n\nprint(veri)\n\n    Ad  Soyad\n1  Ali Yılmaz\n2 Esra  Mutlu\n\n\nBu kod, “AdSoyad” sütununu boşluk karakterine göre böler ve “Ad” ve “Soyad” sütunlarını oluşturur.\n\n\n\n\n\n\nTavsiye\n\n\n\nBu fonksiyonlar, veri çerçevesi içindeki verileri dönüştürmek ve düzenlemek için oldukça kullanışlıdır. Veri analizi sürecinde veri çerçevesini istediğiniz formata getirmek ve veriyi daha iyi anlamak için bu fonksiyonları kullanabilirsiniz. Daha ileri seviyede kullanmak için fonksiyonların argümanlarının nasıl kullanıldığını help kısmından ya da internetten araştırmanızı tavsiye ederim.\nAyrıca gather ve spread fonksiyonları yerine bunların daha kullanışlı bir karşılığı olan pivot_longer ve pivot_wider fonksiyonlarını da tercih edebilirsiniz. Bu konudaki örnekleri incelemenizi tavisye ederim. Belki bunları daha çok sevebilirsiniz."
  },
  {
    "objectID": "data_manipulation.html#join",
    "href": "data_manipulation.html#join",
    "title": "Veri Manipulasyonu",
    "section": "join",
    "text": "join\n\n\n\n\n\nR programlama dilinde dplyr paketinde bulunan left_join(), right_join(), inner_join(), ve full_join() gibi fonksiyonlar, veri çerçeveleri veya veri tabloları arasında birleştirme (join) işlemleri yapmak için kullanılır. Bu fonksiyonlar, farklı veri kaynaklarını birleştirmenizi veya ilişkilendirmenizi sağlar.\nleft_join() fonksiyonu, sol veri çerçevesi ile sağ veri çerçevesi arasında birleştirme işlemi yapar ve sol veri çerçevesindeki tüm gözlemleri korur. Eğer sağ veri çerçevesinde eşleşen gözlem yoksa, NA değerleri ile doldurulur.\n\nveri1 &lt;- data.frame(\n  Oğrenci = c(\"Ali\", \"Esra\", \"Osman\"),\n  Puan1 = c(90, 85, 78)\n)\n\nveri2 &lt;- data.frame(\n  Oğrenci = c(\"Ali\", \"Derya\", \"Merve\"),\n  Puan2 = c(88, 92, 85)\n)\n\nbirlesik_veri &lt;- left_join(veri1, veri2, by = \"Oğrenci\")\n\nprint(birlesik_veri)\n\n  Oğrenci Puan1 Puan2\n1     Ali    90    88\n2    Esra    85    NA\n3   Osman    78    NA\n\n\nBu kod, “Öğrenci” sütununa göre iki veri çerçevesini birleştirir. Sol veri çerçevesi (veri1) tüm gözlemleri içerir ve sağ veri çerçevesinde (veri2) eşleşen değerler varsa birleştirir.\nright_join() fonksiyonu, left_join() ile benzerdir, ancak sağ veri çerçevesindeki tüm gözlemleri korur. Eğer sol veri çerçevesinde eşleşen gözlem yoksa, NA değerleri ile doldurulur.\n\nbirlesik_veri &lt;- right_join(veri1, veri2, by = \"Oğrenci\")\n\nprint(birlesik_veri)\n\n  Oğrenci Puan1 Puan2\n1     Ali    90    88\n2   Derya    NA    92\n3   Merve    NA    85\n\n\nBu kod, sağ veri çerçevesi (veri2) tüm gözlemleri içerir ve sol veri çerçevesinde (veri1) eşleşen değerler varsa birleştirir.\ninner_join() fonksiyonu, sol ve sağ veri çerçeveleri arasında iç birleştirme yapar ve yalnızca ortak gözlemleri korur. Ortak gözlemleri içermeyen diğer gözlemleri atar.\n\nbirlesik_veri &lt;- inner_join(veri1, veri2, by = \"Oğrenci\")\n\nprint(birlesik_veri)\n\n  Oğrenci Puan1 Puan2\n1     Ali    90    88\n\n\nBu kod, sadece sol ve sağ veri çerçevelerinde (veri1 ve veri2) ortak olan gözlemleri korur.\nfull_join() fonksiyonu, sol ve sağ veri çerçeveleri arasında tam birleştirme yapar ve tüm gözlemleri korur. Ortak olmayan değerler NA ile doldurulur.\n\nbirlesik_veri &lt;- full_join(veri1, veri2, by = \"Oğrenci\")\n\nprint(birlesik_veri)\n\n  Oğrenci Puan1 Puan2\n1     Ali    90    88\n2    Esra    85    NA\n3   Osman    78    NA\n4   Derya    NA    92\n5   Merve    NA    85\n\n\nBu kod, sol ve sağ veri çerçevelerini (veri1 ve veri2) tamamen birleştirir ve tüm gözlemleri içerir.\n\n\n\n\n\n\nNot\n\n\n\nBu dört join fonksiyonu, farklı veri kaynaklarını birleştirme işlemlerinde kullanılır ve veri analizi sürecinde verileri daha kapsamlı bir şekilde incelemek için oldukça kullanışlıdır. Hangi join işleminin kullanılacağı, veri yapısına ve ihtiyaca bağlı olarak değişebilir."
  },
  {
    "objectID": "data_analysis.html#veri-ile-tanışma",
    "href": "data_analysis.html#veri-ile-tanışma",
    "title": "Keşifçi Veri Analizi",
    "section": "Veri ile Tanışma",
    "text": "Veri ile Tanışma\nVeri analizinin başlangıç aşamasında, verinin yapısına, ne tür değişkenler içerdiğine, çeşitli özet istatistiklerine bakmak ve gerekli ise ne tür dönüşümler yapmak gerektiğini bilmek önemlidir. Bu süreçler daha derin analizlere daha kolay devam edebilmek için de önemlidir. Bunları gerçekleştirmek için hem özet tablolar hem de grafikler yardımıyla verileri tanımak gerekmektedir.\nTek ve iki değişkenli olarak sayısal ve kategorik veri analizi mpg verisi kullanılarak yapılacaktır. Bu veri setinde 38 farklı aracın yakıt verileri bulunmaktadır.\n\n# mpg verisi ggplot2 paketinde olduğundan paketi çağırıyoruz\nlibrary(ggplot2)\n\nhead(mpg)\n\n# A tibble: 6 × 11\n  manufacturer model displ  year   cyl trans      drv     cty   hwy fl    class \n  &lt;chr&gt;        &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt;      &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; \n1 audi         a4      1.8  1999     4 auto(l5)   f        18    29 p     compa…\n2 audi         a4      1.8  1999     4 manual(m5) f        21    29 p     compa…\n3 audi         a4      2    2008     4 manual(m6) f        20    31 p     compa…\n4 audi         a4      2    2008     4 auto(av)   f        21    30 p     compa…\n5 audi         a4      2.8  1999     6 auto(l5)   f        16    26 p     compa…\n6 audi         a4      2.8  1999     6 manual(m5) f        18    26 p     compa…\n\nnrow(mpg)\n\n[1] 234\n\nncol(mpg)\n\n[1] 11\n\nstr(mpg)\n\ntibble [234 × 11] (S3: tbl_df/tbl/data.frame)\n $ manufacturer: chr [1:234] \"audi\" \"audi\" \"audi\" \"audi\" ...\n $ model       : chr [1:234] \"a4\" \"a4\" \"a4\" \"a4\" ...\n $ displ       : num [1:234] 1.8 1.8 2 2 2.8 2.8 3.1 1.8 1.8 2 ...\n $ year        : int [1:234] 1999 1999 2008 2008 1999 1999 2008 1999 1999 2008 ...\n $ cyl         : int [1:234] 4 4 4 4 6 6 6 4 4 4 ...\n $ trans       : chr [1:234] \"auto(l5)\" \"manual(m5)\" \"manual(m6)\" \"auto(av)\" ...\n $ drv         : chr [1:234] \"f\" \"f\" \"f\" \"f\" ...\n $ cty         : int [1:234] 18 21 20 21 16 18 18 18 16 20 ...\n $ hwy         : int [1:234] 29 29 31 30 26 26 27 26 25 28 ...\n $ fl          : chr [1:234] \"p\" \"p\" \"p\" \"p\" ...\n $ class       : chr [1:234] \"compact\" \"compact\" \"compact\" \"compact\" ...\n\ncolnames(mpg)\n\n [1] \"manufacturer\" \"model\"        \"displ\"        \"year\"         \"cyl\"         \n [6] \"trans\"        \"drv\"          \"cty\"          \"hwy\"          \"fl\"          \n[11] \"class\"       \n\nsummary(mpg)\n\n manufacturer          model               displ            year     \n Length:234         Length:234         Min.   :1.600   Min.   :1999  \n Class :character   Class :character   1st Qu.:2.400   1st Qu.:1999  \n Mode  :character   Mode  :character   Median :3.300   Median :2004  \n                                       Mean   :3.472   Mean   :2004  \n                                       3rd Qu.:4.600   3rd Qu.:2008  \n                                       Max.   :7.000   Max.   :2008  \n      cyl           trans               drv                 cty       \n Min.   :4.000   Length:234         Length:234         Min.   : 9.00  \n 1st Qu.:4.000   Class :character   Class :character   1st Qu.:14.00  \n Median :6.000   Mode  :character   Mode  :character   Median :17.00  \n Mean   :5.889                                         Mean   :16.86  \n 3rd Qu.:8.000                                         3rd Qu.:19.00  \n Max.   :8.000                                         Max.   :35.00  \n      hwy             fl               class          \n Min.   :12.00   Length:234         Length:234        \n 1st Qu.:18.00   Class :character   Class :character  \n Median :24.00   Mode  :character   Mode  :character  \n Mean   :23.44                                        \n 3rd Qu.:27.00                                        \n Max.   :44.00                                        \n\ndf &lt;- mpg\n\n# class değişkenini faktöre çevirip, kategorilerine bakalım\ndf$class &lt;- factor(df$class)\nlevels(df$class)\n\n[1] \"2seater\"    \"compact\"    \"midsize\"    \"minivan\"    \"pickup\"    \n[6] \"subcompact\" \"suv\"       \n\ndplyr::glimpse(df)\n\nRows: 234\nColumns: 11\n$ manufacturer &lt;chr&gt; \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"…\n$ model        &lt;chr&gt; \"a4\", \"a4\", \"a4\", \"a4\", \"a4\", \"a4\", \"a4\", \"a4 quattro\", \"…\n$ displ        &lt;dbl&gt; 1.8, 1.8, 2.0, 2.0, 2.8, 2.8, 3.1, 1.8, 1.8, 2.0, 2.0, 2.…\n$ year         &lt;int&gt; 1999, 1999, 2008, 2008, 1999, 1999, 2008, 1999, 1999, 200…\n$ cyl          &lt;int&gt; 4, 4, 4, 4, 6, 6, 6, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6, 8, 8, …\n$ trans        &lt;chr&gt; \"auto(l5)\", \"manual(m5)\", \"manual(m6)\", \"auto(av)\", \"auto…\n$ drv          &lt;chr&gt; \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"4\", \"4\", \"4\", \"4\", \"4…\n$ cty          &lt;int&gt; 18, 21, 20, 21, 16, 18, 18, 18, 16, 20, 19, 15, 17, 17, 1…\n$ hwy          &lt;int&gt; 29, 29, 31, 30, 26, 26, 27, 26, 25, 28, 27, 25, 25, 25, 2…\n$ fl           &lt;chr&gt; \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p…\n$ class        &lt;fct&gt; compact, compact, compact, compact, compact, compact, com…\n\n\n\n\n\n\n\n\nTavsiye\n\n\n\nVeri analizi için skimr paketi de kullanılabilir. skimr, R programlama dilinde veri setlerinin hızlı bir şekilde özetlenmesini sağlayan bir pakettir. Veri setlerinin yapısını, özelliklerini ve bazı istatistiksel özetlerini görsel ve açıklayıcı bir şekilde sunar. Bu paket, veri keşfi aşamasında veri setinin genel özelliklerini anlamak için kullanılır.\nskimr paketi, veri setinizdeki değişkenlerin türlerine göre istatistiksel özetler sunar. Örneğin, sayısal değişkenler için merkezi eğilim ölçüleri (ortalama, medyan), dağılım (standart sapma, min-max değerleri), faktör değişkenleri için sınıf sayısı, en sık rastlanan sınıf ve eksik veri durumları gibi bilgileri sunar.\nBu paket, veri setinin yapısını hızlıca anlamak ve önemli özelliklerini keşfetmek için kullanılır. Özellikle veri setlerinin keşfedilmesi, temizlenmesi ve analiz edilmesi aşamalarında oldukça faydalıdır. Bu, veri analiz sürecinde veriye daha derinlemesine bakmayı ve hangi analiz tekniklerinin kullanılacağına dair daha iyi bir anlayış geliştirmeyi sağlar."
  },
  {
    "objectID": "data_analysis.html#sürekli-değişkenler",
    "href": "data_analysis.html#sürekli-değişkenler",
    "title": "Keşifçi Veri Analizi",
    "section": "Sürekli Değişkenler",
    "text": "Sürekli Değişkenler\nVeri analizi, birçok farklı değişken türünün incelenmesini gerektirir. Bu değişkenler arasında sürekli değişkenler özellikle önemlidir. Sürekli değişkenler, belirli bir aralıktaki değerleri alabilen ve sonsuz sayıda mümkün değer içeren değişkenlerdir. Örnek olarak, yaş, gelir, sıcaklık gibi değerler sürekli değişkenlere örnektir. Sürekli değişkenlerin analizi, verileri anlamak ve içindeki örüntüleri keşfetmek için kullanılır. Bu analiz, genellikle aşağıdaki adımları içerir:\n\nVeri Görselleştirme:Sürekli değişkenlerin analizine başlamak için verilerinizi görselleştirmek önemlidir. Histogramlar, kutu grafikleri, yoğunluk grafikleri ve saçılım grafikleri gibi grafikler, veri dağılımını ve örüntülerini görsel olarak incelemenize yardımcı olur. Bu grafikler, veri setinizin merkezi eğilimini (ortalama veya medyan), yayılımını ve aykırı değerleri hızla görmeye yardımcı olur.\nMerkezi Eğilim ve Dağılım Ölçüleri: Sürekli değişkenlerin merkezi eğilimini ve dağılımını hesaplamak verileri özetlemenin önemli bir yoludur. Bu ölçümler, veri setinin merkezi noktasını ve veri noktalarının nasıl dağıldığını anlamamıza yardımcı olur. Örnek olarak, ortalama (mean), medyan (median), standart sapma (standard deviation) ve varyans (variance) gibi ölçümler bu aşamada kullanılır.\nKorelasyon Analizi: Eğer birden fazla sürekli değişken arasındaki ilişkiyi anlamak istiyorsanız, korelasyon analizi yapabilirsiniz. Korelasyon, iki değişken arasındaki ilişkinin gücünü ve yönünü ölçer. Korelasyon katsayısı, bu ilişkiyi değerlendirmek için kullanılır. Pozitif bir korelasyon, iki değişkenin aynı yönde değiştiğini, negatif bir korelasyon ise iki değişkenin ters yönde değiştiğini gösterir.\nHipotez Testleri: Sürekli değişkenler arasındaki farklılıkları değerlendirmek için hipotez testleri kullanılabilir. Örneğin, iki grup arasındaki ortalama değerlerin istatistiksel olarak anlamlı bir farklılık gösterip göstermediğini belirlemek için t-testleri veya ANOVA analizi kullanılabilir.\nGüven Aralıkları: Sürekli değişkenlerin analizi sırasında, belirli bir parametre (örneğin, ortalama) hakkında güven aralıkları hesaplanabilir. Bu güven aralıkları, parametrenin belirli bir güven düzeyinde bulunduğu aralığı gösterir. Bu, parametrenin tahmini kesinliğini değerlendirmek için kullanışlıdır.\n\nSürekli değişkenlerin analizi, verileri anlama ve kararlarınızı destekleme sürecinin önemli bir parçasıdır. İyi bir analiz, veri setinizdeki örüntüleri ve ilişkileri açığa çıkarmanıza yardımcı olur ve bilinçli kararlar almanıza yardımcı olur. Bu nedenle, sürekli değişkenlerin analizi yaparken yukarıda belirtilen adımları takip etmek önemlidir.\n\n# cty ve hwy değişkenlerini inceleyelim. \n# cty şehiriçi, hwy şehirarasını ifade ediyor.\n\nsummary(df$cty)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   9.00   14.00   17.00   16.86   19.00   35.00 \n\nvar(df$cty)\n\n[1] 18.11307\n\nmean(df$cty)\n\n[1] 16.85897\n\nsummary(df$hwy)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  12.00   18.00   24.00   23.44   27.00   44.00 \n\nvar(df$hwy)\n\n[1] 35.45778\n\nmean(df$hwy)\n\n[1] 23.44017\n\n# 1 mile= 1.609 km\n# 1 galon = 3.79 lt\n\n# litre başına km hesaplama\ngalonmil_to_ltkm &lt;- function(x){\n  \n  km &lt;- x * 1.609/3.79\n  return(km)\n}\n\ndf$cty_ltkm &lt;- galonmil_to_ltkm(df$cty)\ndf$hwy_ltkm &lt;- galonmil_to_ltkm(df$hwy)\nquantile(df$cty_ltkm) \n\n       0%       25%       50%       75%      100% \n 3.820844  5.943536  7.217150  8.066227 14.858839 \n\n# şehiriçi araçların % 75'i 1 lt ile 8.06 km den az yol alıyor.\nquantile(df$hwy_ltkm)\n\n       0%       25%       50%       75%      100% \n 5.094459  7.641689 10.188918 11.462533 18.679683 \n\n# şehirlerarası araçların % 75'i 1 lt ile 11.46 km den az yol alıyor.\n\n\n# değişken dağılımı için histogram grafiği kullanılabilir.\nhist(df$cty_ltkm,freq = FALSE,col = \"red\",border = \"blue\")\nlines(density(df$cty_ltkm), col = \"black\", lwd = 2,)\n\n\n\nhist(df$hwy_ltkm,xlim = c(4,20), ylim = c(0,60), breaks = 10)\n\n\n\n# Boxplot\nboxplot(df$cty_ltkm, main = \"Boxplot cty\")\n\n\n\nfivenum(df$cty_ltkm) # minimum, Q1, median, Q3, maximum\n\n[1]  3.820844  5.943536  7.217150  8.066227 14.858839\n\n# outliers \nboxplot(df$cty_ltkm)$out\n\n\n\n\n[1] 11.88707 11.88707 14.00976 14.85884 12.31161\n\n# outliers hangi sıralarda\nwhich(df$cty_ltkm %in% boxplot(df$cty_ltkm)$out)\n\n[1] 100 197 213 222 223\n\nboxplot(df$hwy_ltkm, main = \"Boxplot cty\")\n\n\n\nfivenum(df$hwy_ltkm) # minimum, Q1, median, Q3, maximum\n\n[1]  5.094459  7.641689 10.188918 11.462533 18.679683\n\nboxplot(hwy_ltkm ~ cyl, data = df, xlab = \"Silindir Sayısı\",\n   ylab = \"Litre Başına KM\", main = \"Mileage Data\")\n\n\n\nboxplot(hwy_ltkm ~ cyl, data = df, \n   xlab = \"Silindir Sayısı\",\n   ylab = \"Litre Başına KM\", \n   main = \"Mileage Data\",\n   notch = TRUE, \n   varwidth = TRUE, \n   col = c(\"green\",\"yellow\",\"purple\",\"blue\"),\n   names = c(\"2 Silindir\",\"4 Silindir\",\"6 Silindir\",\"8 Silindir\")\n)\n\nWarning in (function (z, notch = FALSE, width = NULL, varwidth = FALSE, : some\nnotches went outside hinges ('box'): maybe set notch=FALSE\n\n\n\n\n# Sürekli iki değişken incelemek istersek;\n\n# displ ve cty_ltkm değişkenlerini inceleyelim\n# displ motor hacmini ifade ediyor\n\nsummary(df$displ)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  1.600   2.400   3.300   3.472   4.600   7.000 \n\nwith(df,cor(displ,cty_ltkm))\n\n[1] -0.798524\n\n# motor hacmi ile lt başına km ters ilişkili\n\nplot(df$displ,df$cty_ltkm, \n     main = \"Motor Hacmi- Yakıt Tüketimi Saçılım Grafiği\",\n     col=\"red\",\n     xlab = \"Motor Hacmi\",\n     ylab = \"Yakıt Tüketimi\")\n\n\n\n# birden fazla değişkenin saçılım grafiği\npairs(~hwy_ltkm+cty_ltkm+displ+cyl,data = df,main = \"Scatterplot Matrix\")"
  },
  {
    "objectID": "data_analysis.html#kategorik-değişkenler",
    "href": "data_analysis.html#kategorik-değişkenler",
    "title": "Keşifçi Veri Analizi",
    "section": "Kategorik Değişkenler",
    "text": "Kategorik Değişkenler\nVeri analizi sürecinde, kategorik değişkenler (veya gruplar) genellikle çok önemli bir rol oynar. Kategorik değişkenler, belirli bir sınıfı veya kategoriyi temsil eden değişkenlerdir ve tipik olarak metin veya sembollerle ifade edilirler. Örnek olarak, cinsiyet, eğitim seviyesi, ürün kategorileri gibi değişkenler kategorik değişkenlere örnektir. Kategorik değişkenlerin analizi, bu değişkenlerin içindeki örüntüleri, dağılımları ve ilişkileri anlamamıza yardımcı olur. Aşağıda, kategorik değişkenlerin analizi için izlenebilecek temel adımları bulabilirsiniz:\n\nFrekans Tabloları ve Görselleştirme: Kategorik değişkenlerin frekans tablolarını ve grafiklerini oluşturarak, her kategori veya sınıfın veri setinde ne kadar sık görüldüğünü anlayabilirsiniz. Örneğin, bar grafikleri, pasta grafikleri veya çubuk grafikleri kullanarak kategori frekanslarını görselleştirebilirsiniz. summary() ve table() gibi R fonksiyonları ile bu verileri inceleyebilirsiniz.\nİlişkileri İnceleme: Kategorik değişkenler arasındaki ilişkileri anlamak önemlidir. İki kategorik değişken arasındaki ilişkiyi değerlendirmek için çapraz tablolar (cross-tabulation) ve ki-kare (chi-squared) istatistiksel testleri kullanabilirsiniz. Bu testler, iki değişken arasındaki bağımlılığı değerlendirmek için kullanılır.\nİstatistiksel Testler: Kategorik değişkenlerin analizi sırasında, gruplar arasındaki farkları değerlendirmek için hipotez testleri kullanabilirsiniz. İki kategorik değişken arasındaki ilişkinin istatistiksel olarak anlamlı olup olmadığını belirlemek için ki-kare testi veya Fisher’in kesin testi gibi testler kullanabilirsiniz. Ayrıca ANOVA gibi testler, bir kategorik değişkenin birden fazla grup üzerindeki etkisini değerlendirmek için kullanılabilir.\nVeri Görselleştirme: Kategorik değişkenlerin analizinde, gruplar arasındaki farkları daha iyi anlamak için grafikler kullanabilirsiniz. Bar grafikleri, grupların frekanslarını görselleştirmek için sıklıkla kullanılırken, gruplar arasındaki ilişkiyi anlamak için mozaik grafikleri veya heatmap’leri de kullanabilirsiniz.\n\nKategorik değişkenlerin analizi, veri setinizin içindeki desenleri ve ilişkileri anlamanıza yardımcı olur. Bu analiz, kararlarınızı desteklemek ve veriyi daha iyi anlamak için önemlidir. R programlama dili, kategorik değişkenlerin analizi için bir dizi kullanışlı fonksiyon ve paket sunar. Bu adımları takip ederek, veri analiz projelerinizde kategorik değişkenleri etkili bir şekilde analiz edebilirsiniz.\n\n# class ve trans değişkenlerine bakalım\n# class araç sınıfı, trans ise vites türünü ifade ediyor.\n\nsummary(df$class)\n\n   2seater    compact    midsize    minivan     pickup subcompact        suv \n         5         47         41         11         33         35         62 \n\ntable(df$class)\n\n\n   2seater    compact    midsize    minivan     pickup subcompact        suv \n         5         47         41         11         33         35         62 \n\nxtabs(~class,data=df)\n\nclass\n   2seater    compact    midsize    minivan     pickup subcompact        suv \n         5         47         41         11         33         35         62 \n\ntable(df$trans)\n\n\n  auto(av)   auto(l3)   auto(l4)   auto(l5)   auto(l6)   auto(s4)   auto(s5) \n         5          2         83         39          6          3          3 \n  auto(s6) manual(m5) manual(m6) \n        16         58         19 \n\nprop.table(table(df$class))\n\n\n   2seater    compact    midsize    minivan     pickup subcompact        suv \n0.02136752 0.20085470 0.17521368 0.04700855 0.14102564 0.14957265 0.26495726 \n\ntab &lt;- table(df$class)\nbarplot(tab,col=\"blue\",border=\"red\")\n\n\n\npie(tab)\n\n\n\npar(mfrow = c(1, 2))\nbarplot(tab)\npie(tab)\n\n\n\n# Kategorik iki değişken incelemek istersek;\n\nxtabs(~trans+class,data=df)\n\n            class\ntrans        2seater compact midsize minivan pickup subcompact suv\n  auto(av)         0       2       3       0      0          0   0\n  auto(l3)         0       1       0       1      0          0   0\n  auto(l4)         1       8      14       8     12         11  29\n  auto(l5)         0       4       5       0      8          4  18\n  auto(l6)         0       0       0       2      0          0   4\n  auto(s4)         0       2       1       0      0          0   0\n  auto(s5)         0       2       0       0      0          0   1\n  auto(s6)         1       5       6       0      0          1   3\n  manual(m5)       0      18       9       0      8         16   7\n  manual(m6)       3       5       3       0      5          3   0\n\nprop.table(table(df$year,df$class),1) # satır toplamları 1' eşittir\n\n      \n          2seater    compact    midsize    minivan     pickup subcompact\n  1999 0.01709402 0.21367521 0.17094017 0.05128205 0.13675214 0.16239316\n  2008 0.02564103 0.18803419 0.17948718 0.04273504 0.14529915 0.13675214\n      \n              suv\n  1999 0.24786325\n  2008 0.28205128\n\nprop.table(table(df$year,df$class),2) # sütun toplamları 1' eşittir\n\n      \n         2seater   compact   midsize   minivan    pickup subcompact       suv\n  1999 0.4000000 0.5319149 0.4878049 0.5454545 0.4848485  0.5428571 0.4677419\n  2008 0.6000000 0.4680851 0.5121951 0.4545455 0.5151515  0.4571429 0.5322581\n\nproportions(xtabs(~ manufacturer + year, data = df), 1)\n\n            year\nmanufacturer      1999      2008\n  audi       0.5000000 0.5000000\n  chevrolet  0.3684211 0.6315789\n  dodge      0.4324324 0.5675676\n  ford       0.6000000 0.4000000\n  honda      0.5555556 0.4444444\n  hyundai    0.4285714 0.5714286\n  jeep       0.2500000 0.7500000\n  land rover 0.5000000 0.5000000\n  lincoln    0.6666667 0.3333333\n  mercury    0.5000000 0.5000000\n  nissan     0.4615385 0.5384615\n  pontiac    0.6000000 0.4000000\n  subaru     0.4285714 0.5714286\n  toyota     0.5882353 0.4117647\n  volkswagen 0.5925926 0.4074074\n\n# araç sınıfı ile drv değişkenine birlikte bakalım\n# f = front-wheel drive (önden çekiş), \n# r = rear wheel drive (arkadan çekiş), \n# 4 = 4wd (4 çeker)\n\nplot(class ~ factor(drv), data = df)\n\n\n\n\nEğer hem sürekli hem de kategorik değişkenleri incelemek istersek, benzer şekilde görselleştirme ve kategoriler arasında merkezi eğilim ölçüleri hesaplanabilir. Bunlar dışında uygun istatistiksel testler de gerçekleştirilebilir.\n\n# Silindir düzeyinde yakıt tüketimi \ntapply(df$cty_ltkm, df$cyl, mean)\n\n       4        5        6        8 \n8.920545 8.703034 6.883968 5.337052 \n\n# Same using aggregate()\naggregate(cty_ltkm ~ cyl, data = df, FUN = mean)\n\n  cyl cty_ltkm\n1   4 8.920545\n2   5 8.703034\n3   6 6.883968\n4   8 5.337052\n\nboxplot(cty_ltkm ~ cyl, data = df)"
  },
  {
    "objectID": "data_analysis.html#zaman-serileri",
    "href": "data_analysis.html#zaman-serileri",
    "title": "Keşifçi Veri Analizi",
    "section": "Zaman Serileri",
    "text": "Zaman Serileri\nR programlama dili, zaman serileri analizi için kapsamlı bir dizi fonksiyon ve paket sunar. Zaman serileri analizi, zaman içindeki veri noktalarının örüntülerini ve trendlerini incelemeyi amaçlar. R’de zaman serileri ile çalışmak için ts (time series) nesnesi kullanılır. Bu nesne, zaman serisi verilerini zaman dilimleri (örneğin aylar, yıllar) veya tarihler ile ilişkilendirerek işlem yapmanıza olanak tanır.\n\nAirPassengers\n\n     Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec\n1949 112 118 132 129 121 135 148 148 136 119 104 118\n1950 115 126 141 135 125 149 170 170 158 133 114 140\n1951 145 150 178 163 172 178 199 199 184 162 146 166\n1952 171 180 193 181 183 218 230 242 209 191 172 194\n1953 196 196 236 235 229 243 264 272 237 211 180 201\n1954 204 188 235 227 234 264 302 293 259 229 203 229\n1955 242 233 267 269 270 315 364 347 312 274 237 278\n1956 284 277 317 313 318 374 413 405 355 306 271 306\n1957 315 301 356 348 355 422 465 467 404 347 305 336\n1958 340 318 362 348 363 435 491 505 404 359 310 337\n1959 360 342 406 396 420 472 548 559 463 407 362 405\n1960 417 391 419 461 472 535 622 606 508 461 390 432\n\nclass(AirPassengers)\n\n[1] \"ts\"\n\ndiff(AirPassengers) # fark alma\n\n      Jan  Feb  Mar  Apr  May  Jun  Jul  Aug  Sep  Oct  Nov  Dec\n1949         6   14   -3   -8   14   13    0  -12  -17  -15   14\n1950   -3   11   15   -6  -10   24   21    0  -12  -25  -19   26\n1951    5    5   28  -15    9    6   21    0  -15  -22  -16   20\n1952    5    9   13  -12    2   35   12   12  -33  -18  -19   22\n1953    2    0   40   -1   -6   14   21    8  -35  -26  -31   21\n1954    3  -16   47   -8    7   30   38   -9  -34  -30  -26   26\n1955   13   -9   34    2    1   45   49  -17  -35  -38  -37   41\n1956    6   -7   40   -4    5   56   39   -8  -50  -49  -35   35\n1957    9  -14   55   -8    7   67   43    2  -63  -57  -42   31\n1958    4  -22   44  -14   15   72   56   14 -101  -45  -49   27\n1959   23  -18   64  -10   24   52   76   11  -96  -56  -45   43\n1960   12  -26   28   42   11   63   87  -16  -98  -47  -71   42\n\nstats::lag(AirPassengers,-1) # 1. gecikmesini alma\n\n     Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec\n1949     112 118 132 129 121 135 148 148 136 119 104\n1950 118 115 126 141 135 125 149 170 170 158 133 114\n1951 140 145 150 178 163 172 178 199 199 184 162 146\n1952 166 171 180 193 181 183 218 230 242 209 191 172\n1953 194 196 196 236 235 229 243 264 272 237 211 180\n1954 201 204 188 235 227 234 264 302 293 259 229 203\n1955 229 242 233 267 269 270 315 364 347 312 274 237\n1956 278 284 277 317 313 318 374 413 405 355 306 271\n1957 306 315 301 356 348 355 422 465 467 404 347 305\n1958 336 340 318 362 348 363 435 491 505 404 359 310\n1959 337 360 342 406 396 420 472 548 559 463 407 362\n1960 405 417 391 419 461 472 535 622 606 508 461 390\n1961 432                                            \n\nplot(AirPassengers,type = \"p\", col = \"red\") # points\n\n\n\nplot(AirPassengers,type = \"l\", col = \"red\") # line\n\n\n\nplot(AirPassengers,type = \"o\", col = \"red\") # points and line\n\n\n\nplot(log(AirPassengers),type = \"l\", col = \"red\") # line\n\n\n\nplot(diff(AirPassengers),type = \"l\", col = \"red\") # line\n\n\n\nplot(diff(log(AirPassengers)),type = \"l\", col = \"red\") # line\n\n\n\n# çoklu zaman serisi\nts &lt;- ts(rnorm(length(AirPassengers),250,100),start = c(1949,1),frequency=12)\nts\n\n            Jan        Feb        Mar        Apr        May        Jun\n1949 376.498615 186.753688 271.463774 474.689056 167.207887 353.925234\n1950 288.049047 239.333583 403.446428 158.750777 107.444623  75.804022\n1951 433.607614 287.987443 394.152261 372.712672 122.931779 283.117593\n1952 242.273721 105.807185 238.555250 194.169151 255.260297 174.947952\n1953 301.976031 275.357342 244.681351 255.408940 166.449895 333.605687\n1954 394.228081 391.921867 319.212140 193.971452  74.632484 389.396427\n1955 351.081008 342.524050 250.489758 237.041515 149.698967 492.967357\n1956 343.697730 363.420709 159.022493 297.533458 308.304854 298.051489\n1957 197.606237 112.829555 257.726686 367.947595 268.552530 316.808345\n1958 325.563080  94.042345 249.218288 269.966931 221.343552 291.454357\n1959 379.642281 313.457375 422.972605  93.081585 345.124585 201.657043\n1960 154.412890  62.087108 119.515370 327.263773 486.490064 106.199523\n            Jul        Aug        Sep        Oct        Nov        Dec\n1949 322.034003 178.846965 188.474839 375.795221 123.573789 289.860738\n1950 196.237914 400.464515 299.730021 182.659336 170.343976 330.385857\n1951 188.769037 298.390496 239.142598 227.611367 270.708968 311.085712\n1952 261.158703 418.068577 308.887461 274.961755 124.278671 145.721584\n1953 287.903331 456.227124 315.535486 332.691686 323.350552  87.707936\n1954 373.877416 419.233161 281.481431 299.854531 232.537807 339.485954\n1955 428.243196 230.418680 231.283674 331.041306 316.104861 253.477267\n1956  -8.233359 246.588324 372.670390 337.711596 284.534487 316.524346\n1957 412.053636 296.248369 351.816027 211.577866 445.105478 284.122038\n1958 323.782090 390.114941 254.725902 246.612739 284.531577 291.275514\n1959 138.922083 148.894862 311.356761 475.989355  89.525239 108.035064\n1960 260.849802 164.586806 196.108745 205.952795 302.919467 229.767288\n\nplot(AirPassengers,type = \"l\",col = \"red\")\nlines(ts, type = \"l\", col = \"blue\")\n\n\n\n# yüzde değişim\ngrowth &lt;- AirPassengers/stats::lag(AirPassengers,-1)*100-100\ngrowth\n\n             Jan         Feb         Mar         Apr         May         Jun\n1949               5.3571429  11.8644068  -2.2727273  -6.2015504  11.5702479\n1950  -2.5423729   9.5652174  11.9047619  -4.2553191  -7.4074074  19.2000000\n1951   3.5714286   3.4482759  18.6666667  -8.4269663   5.5214724   3.4883721\n1952   3.0120482   5.2631579   7.2222222  -6.2176166   1.1049724  19.1256831\n1953   1.0309278   0.0000000  20.4081633  -0.4237288  -2.5531915   6.1135371\n1954   1.4925373  -7.8431373  25.0000000  -3.4042553   3.0837004  12.8205128\n1955   5.6768559  -3.7190083  14.5922747   0.7490637   0.3717472  16.6666667\n1956   2.1582734  -2.4647887  14.4404332  -1.2618297   1.5974441  17.6100629\n1957   2.9411765  -4.4444444  18.2724252  -2.2471910   2.0114943  18.8732394\n1958   1.1904762  -6.4705882  13.8364780  -3.8674033   4.3103448  19.8347107\n1959   6.8249258  -5.0000000  18.7134503  -2.4630542   6.0606061  12.3809524\n1960   2.9629630  -6.2350120   7.1611253  10.0238663   2.3861171  13.3474576\n             Jul         Aug         Sep         Oct         Nov         Dec\n1949   9.6296296   0.0000000  -8.1081081 -12.5000000 -12.6050420  13.4615385\n1950  14.0939597   0.0000000  -7.0588235 -15.8227848 -14.2857143  22.8070175\n1951  11.7977528   0.0000000  -7.5376884 -11.9565217  -9.8765432  13.6986301\n1952   5.5045872   5.2173913 -13.6363636  -8.6124402  -9.9476440  12.7906977\n1953   8.6419753   3.0303030 -12.8676471 -10.9704641 -14.6919431  11.6666667\n1954  14.3939394  -2.9801325 -11.6040956 -11.5830116 -11.3537118  12.8078818\n1955  15.5555556  -4.6703297 -10.0864553 -12.1794872 -13.5036496  17.2995781\n1956  10.4278075  -1.9370460 -12.3456790 -13.8028169 -11.4379085  12.9151292\n1957  10.1895735   0.4301075 -13.4903640 -14.1089109 -12.1037464  10.1639344\n1958  12.8735632   2.8513238 -20.0000000 -11.1386139 -13.6490251   8.7096774\n1959  16.1016949   2.0072993 -17.1735242 -12.0950324 -11.0565111  11.8784530\n1960  16.2616822  -2.5723473 -16.1716172  -9.2519685 -15.4013015  10.7692308\n\nplot(growth,type = \"l\", col = \"red\")"
  },
  {
    "objectID": "ggplot2.html#saçılım-grafikleri",
    "href": "ggplot2.html#saçılım-grafikleri",
    "title": "ggplot2 ile Veri Görselleştirme",
    "section": "Saçılım Grafikleri",
    "text": "Saçılım Grafikleri\nSaçılım grafiği, genellikle fizik ve istatistik gibi bilimlerde kullanılan bir grafik türüdür. Saçılım grafiği, iki değişken arasındaki ilişkiyi görsel olarak göstermek için kullanılır. Bir eksende bir değişkenin değerleri, diğer eksende ise diğer değişkenin değerleri yer alır, ve her veri noktası bu iki değişkenin birleşimini temsil eder. Saçılım grafiği, veri noktalarının dağılımını, yoğunluklarını, odaklanma noktalarını ve olası eğilimleri anlamak için kullanılır. Bu grafik, veri setindeki aykırı değerleri tespit etmek, iki değişken arasındaki ilişkiyi değerlendirmek ve korelasyonu görsel olarak incelemek için oldukça kullanışlıdır.\nSaçılım grafiği kullanarak, iki değişken arasındaki ilişkinin doğası hakkında bilgi edinebilirsiniz. Örneğin, pozitif bir korelasyon varsa, veri noktaları genellikle yukarı doğru bir eğilim gösterirken, negatif bir korelasyon varsa, veri noktaları genellikle aşağı doğru bir eğilim gösterir. Korelasyon olmaması durumunda ise veri noktaları dağınık bir şekilde yayılmış olur. Saçılım grafiği, istatistiksel analizlerde veri keşfi yapmak ve ilişkileri anlamak için önemli bir araçtır.\n\nlibrary(ggplot2)\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n# Bir önceki bölümde üretilen yeni değişkenleri mpg veri setine yine ekleyelim.\n\n# litre başına km hesaplama\ngalonmil_to_ltkm &lt;- function(x){\n  \n  km &lt;- x * 1.609/3.79\n  return(km)\n}\n\ndf &lt;- mpg\ndf$cty_ltkm &lt;- galonmil_to_ltkm(df$cty)\ndf$hwy_ltkm &lt;- galonmil_to_ltkm(df$hwy)\n\np1 &lt;- ggplot(df,aes(x=displ,y=cty_ltkm)) +\n  geom_point(size=2,color=\"red\")\np1\n\n\n\n# gruplar düzeyinde grafiği çizdirme\np2 &lt;- ggplot(df,aes(x=displ,y=cty_ltkm,colour=as.factor(year))) +\n  geom_point(size=2) +\n  # grafiğe başlık ekleme\n  ggtitle(\"Motor Hacmi ve Yakıt Tüketimi Saçılım Grafiği\") +\n  #eksenleri isimlendirme\n  xlab(\"Motor Hacmi\") + \n  ylab(\"Yakıt Tüketimi\")+\n  theme_bw() + # tema değiştirme\n  theme(legend.position = \"bottom\",  # gruplama değişkeninin poziyounun değiştirme\n        plot.title = element_text(face = \"bold\"), # kalın başlık\n        legend.title = element_blank()) # grup başlığını kaldırma\np2  \n\n\n\nggplot(df,aes(x=displ,y=cty_ltkm)) +\n  geom_point(aes(size=factor(cyl)),color=\"red\")\n\n\n\n# grafiğe model eğrisi ekleme\np1 + geom_smooth(method = lm, se = TRUE)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\np1 + geom_smooth(method = loess, se = TRUE)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n# grup düzeyinde model eğrileri ve saçılım grafiği\np3 &lt;- df %&gt;% \n  ggplot(aes(x=displ,y=cty_ltkm,color=as.factor(cyl))) +\n  geom_point()  + \n  geom_smooth(method = lm, se = TRUE)\np3\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n# grup ve yıl düzeyinde model eğrileri ve saçılım grafiği\np3 + facet_wrap(~ year)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\np3 + facet_wrap(~ year+drv)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\np3 + facet_grid(drv ~ year) # eksen aralıkları sabit\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\np3 + facet_grid(drv ~ year,scales = \"free\") # eksen aralıkları değişken\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "ggplot2.html#zaman-serisi-grafikleri",
    "href": "ggplot2.html#zaman-serisi-grafikleri",
    "title": "ggplot2 ile Veri Görselleştirme",
    "section": "Zaman Serisi Grafikleri",
    "text": "Zaman Serisi Grafikleri\nZaman serisi grafikleri, zamanla değişen verileri görsel olarak temsil etmek için kullanılan grafiklerdir. Bu tür grafikler, belirli bir süre boyunca gözlemlenen verileri analiz etmek, eğilimleri belirlemek, dönemsel desenleri tanımak ve istatistiksel analizler yapmak için yaygın olarak kullanılır. Zaman serisi verileri genellikle sabit aralıklarla veya farklı zaman dilimlerinde toplanır. En yaygın olan türü çizgi grafikleri olmakla birlikte sütun ve alan grafikleri de zaman serilerinin görselleştirilmesinde kullanılabilmektedir.\nÖrnekler ggplot2 paketi ile birlikte gelen economics veri seti ile yapılacaktır.\n\neconomics\n\n# A tibble: 574 × 6\n   date         pce    pop psavert uempmed unemploy\n   &lt;date&gt;     &lt;dbl&gt;  &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;\n 1 1967-07-01  507. 198712    12.6     4.5     2944\n 2 1967-08-01  510. 198911    12.6     4.7     2945\n 3 1967-09-01  516. 199113    11.9     4.6     2958\n 4 1967-10-01  512. 199311    12.9     4.9     3143\n 5 1967-11-01  517. 199498    12.8     4.7     3066\n 6 1967-12-01  525. 199657    11.8     4.8     3018\n 7 1968-01-01  531. 199808    11.7     5.1     2878\n 8 1968-02-01  534. 199920    12.3     4.5     3001\n 9 1968-03-01  544. 200056    11.7     4.1     2877\n10 1968-04-01  544  200208    12.3     4.6     2709\n# ℹ 564 more rows\n\nsummary(economics)\n\n      date                 pce               pop            psavert      \n Min.   :1967-07-01   Min.   :  506.7   Min.   :198712   Min.   : 2.200  \n 1st Qu.:1979-06-08   1st Qu.: 1578.3   1st Qu.:224896   1st Qu.: 6.400  \n Median :1991-05-16   Median : 3936.8   Median :253060   Median : 8.400  \n Mean   :1991-05-17   Mean   : 4820.1   Mean   :257160   Mean   : 8.567  \n 3rd Qu.:2003-04-23   3rd Qu.: 7626.3   3rd Qu.:290291   3rd Qu.:11.100  \n Max.   :2015-04-01   Max.   :12193.8   Max.   :320402   Max.   :17.300  \n    uempmed          unemploy    \n Min.   : 4.000   Min.   : 2685  \n 1st Qu.: 6.000   1st Qu.: 6284  \n Median : 7.500   Median : 7494  \n Mean   : 8.609   Mean   : 7771  \n 3rd Qu.: 9.100   3rd Qu.: 8686  \n Max.   :25.200   Max.   :15352  \n\np4 &lt;- economics %&gt;% \n  ggplot(aes(x=date,y=pce)) +\n  geom_line(color=\"blue\") +\n  theme_minimal() +\n  labs(x = \"\",\n       y = \"Personal Consumption Expenditures\",\n       title = \"Personal Consumption Expenditures Time Series\",\n       caption = \"Economics Data\",\n       subtitle = \"Economics Data (1967-2015)\")\np4\n\n\n\n# zaman eksenini ayarlama\np4 + \n  scale_x_date(date_breaks = \"1 year\", date_labels = \"%Y\") +\n  theme(axis.text.x = element_text(angle = 45), legend.position = \"top\")\n\n\n\np4 + \n  scale_x_date(date_breaks = \"2 year\", date_labels = \"%Y\",expand = c(0,0)) +\n  theme(axis.text.x = element_text(angle = 45), legend.position = \"top\")\n\n\n\n# çizgi türü değiştirilebilir\neconomics %&gt;% \n  ggplot(aes(x=date,y=pce)) +\n  geom_line(linetype = \"dashed\", size = 1, colour = \"blue\")\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n\n\neconomics %&gt;% \n  ggplot(aes(x=date,y=pce)) +\n  geom_line(linetype = \"dotted\", size = 2, colour = \"blue\")\n\n\n\n# zaman grafiğine noktalar ekleme\neconomics %&gt;% \n  filter(lubridate::year(date) &gt;= 2010) %&gt;% \n  ggplot(aes(x=date,y=pce)) +\n  geom_line()+\n  geom_point(size = 3, shape= 7, colour = \"red\")\n\n\n\n# gölgeli zaman grafiği\neconomics %&gt;% \n  ggplot(aes(x=date,y=pce)) +\n  geom_area(color=\"blue\",fill=\"red\",alpha=0.6) +\n  # y ekseni aralıklarını ayarlama\n  scale_y_continuous(breaks = seq(0, max(economics$pce), by = 1000))\n\n\n\neconomics %&gt;% \n  ggplot(aes(x=date,y=uempmed )) +\n  geom_area(color=\"blue\",fill=\"red\",alpha=0.5) +\n  theme_light()\n\n\n\n# çoklu zaman serisi grafiği\neconomics_long\n\n# A tibble: 2,870 × 4\n   date       variable value  value01\n   &lt;date&gt;     &lt;chr&gt;    &lt;dbl&gt;    &lt;dbl&gt;\n 1 1967-07-01 pce       507. 0       \n 2 1967-08-01 pce       510. 0.000265\n 3 1967-09-01 pce       516. 0.000762\n 4 1967-10-01 pce       512. 0.000471\n 5 1967-11-01 pce       517. 0.000916\n 6 1967-12-01 pce       525. 0.00157 \n 7 1968-01-01 pce       531. 0.00207 \n 8 1968-02-01 pce       534. 0.00230 \n 9 1968-03-01 pce       544. 0.00322 \n10 1968-04-01 pce       544  0.00319 \n# ℹ 2,860 more rows\n\n# serilerin ölçekleri farklı \neconomics_long %&gt;% \n  ggplot(aes(x=date,y=value,color=variable))+\n  geom_line()\n\n\n\neconomics_long %&gt;% \n  ggplot(aes(x=date,y=value))+\n  geom_line() +\n  facet_wrap(~variable,scales = \"free_y\")\n\n\n\neconomics_long %&gt;% \n  ggplot(aes(x=date,y=value))+\n  geom_line() +\n  facet_wrap(~variable,scales = \"free_y\")+\n  scale_y_log10() # y eksenlerinin logatirması alınır"
  },
  {
    "objectID": "ggplot2.html#sütun-grafikleri",
    "href": "ggplot2.html#sütun-grafikleri",
    "title": "ggplot2 ile Veri Görselleştirme",
    "section": "Sütun Grafikleri",
    "text": "Sütun Grafikleri\nSütun grafikleri, verileri kategorik veya gruplara göre temsil etmek için kullanılan bir grafik türüdür. Bu grafik türü, farklı kategorilerin veya grupların sayısal değerlerini karşılaştırmak veya görselleştirmek için kullanılır. Sütun grafikleri dikey çubuklardan oluşur ve her çubuk, bir kategori veya grup için bir değeri temsil eder. Sütun grafiklerinin temel bileşenleri şunlardır:\n\nYatay Eksen (X-Eksen): Bu eksende kategoriler veya gruplar yer alır. Örneğin, bir yıl boyunca aylar, ürün kategorileri, bölgeler veya şirket departmanları gibi farklı kategoriler olabilir.\nDikey Eksen (Y-Eksen): Bu eksende sayısal değerler yer alır ve sütunların yükseklikleri bu değerleri temsil eder. Değerler genellikle sayısal verilerdir ve karşılaştırılabilir bir ölçü birimi içinde bulunurlar.\nSütunlar: Sütunlar, her bir kategori veya grup için bir değeri temsil eder. Sütunların yükseklikleri, karşılaştırılan değerlerin büyüklüğünü veya ilişkilerini gösterir.\n\nSütun grafikleri, aşağıdaki amaçlar için kullanılır:\n\nKarşılaştırmalar: Farklı kategorilerin veya grupların değerlerini karşılaştırmak için kullanılır. Örneğin, farklı ülkelerin gayri safi yurtiçi hasıla (GSYİH) değerlerini karşılaştırmak için sütun grafikleri kullanılabilir.\nZaman İçi Değişim: Zaman serisi verilerini temsil etmek için kullanılabilir. Her sütun, belirli bir zaman dilimindeki değerleri gösterebilir.\nKategorik Verilerin İncelenmesi: Ürün kategorileri, şirket departmanları veya müşteri segmentleri gibi kategorik verilerin analizi için kullanılabilir.\n\nSütun grafikleri, verileri görsel olarak anlamak ve veriler arasındaki farkları veya eğilimleri vurgulamak için etkili bir araçtır. Aynı zamanda verilerin daha kolay anlaşılmasına yardımcı olabilir ve karar verme süreçlerine katkı sağlayabilir.\nÖrnekler ggplot2 paketi ile birlikte gelen diamonds veri seti ile yapılacaktır.\n\ndiamonds\n\n# A tibble: 53,940 × 10\n   carat cut       color clarity depth table price     x     y     z\n   &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43\n 2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31\n 3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31\n 4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63\n 5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75\n 6  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48\n 7  0.24 Very Good I     VVS1     62.3    57   336  3.95  3.98  2.47\n 8  0.26 Very Good H     SI1      61.9    55   337  4.07  4.11  2.53\n 9  0.22 Fair      E     VS2      65.1    61   337  3.87  3.78  2.49\n10  0.23 Very Good H     VS1      59.4    61   338  4     4.05  2.39\n# ℹ 53,930 more rows\n\nglimpse(diamonds)\n\nRows: 53,940\nColumns: 10\n$ carat   &lt;dbl&gt; 0.23, 0.21, 0.23, 0.29, 0.31, 0.24, 0.24, 0.26, 0.22, 0.23, 0.…\n$ cut     &lt;ord&gt; Ideal, Premium, Good, Premium, Good, Very Good, Very Good, Ver…\n$ color   &lt;ord&gt; E, E, E, I, J, J, I, H, E, H, J, J, F, J, E, E, I, J, J, J, I,…\n$ clarity &lt;ord&gt; SI2, SI1, VS1, VS2, SI2, VVS2, VVS1, SI1, VS2, VS1, SI1, VS1, …\n$ depth   &lt;dbl&gt; 61.5, 59.8, 56.9, 62.4, 63.3, 62.8, 62.3, 61.9, 65.1, 59.4, 64…\n$ table   &lt;dbl&gt; 55, 61, 65, 58, 58, 57, 57, 55, 61, 61, 55, 56, 61, 54, 62, 58…\n$ price   &lt;int&gt; 326, 326, 327, 334, 335, 336, 336, 337, 337, 338, 339, 340, 34…\n$ x       &lt;dbl&gt; 3.95, 3.89, 4.05, 4.20, 4.34, 3.94, 3.95, 4.07, 3.87, 4.00, 4.…\n$ y       &lt;dbl&gt; 3.98, 3.84, 4.07, 4.23, 4.35, 3.96, 3.98, 4.11, 3.78, 4.05, 4.…\n$ z       &lt;dbl&gt; 2.43, 2.31, 2.31, 2.63, 2.75, 2.48, 2.47, 2.53, 2.49, 2.39, 2.…\n\nsummary(diamonds)\n\n     carat               cut        color        clarity          depth      \n Min.   :0.2000   Fair     : 1610   D: 6775   SI1    :13065   Min.   :43.00  \n 1st Qu.:0.4000   Good     : 4906   E: 9797   VS2    :12258   1st Qu.:61.00  \n Median :0.7000   Very Good:12082   F: 9542   SI2    : 9194   Median :61.80  \n Mean   :0.7979   Premium  :13791   G:11292   VS1    : 8171   Mean   :61.75  \n 3rd Qu.:1.0400   Ideal    :21551   H: 8304   VVS2   : 5066   3rd Qu.:62.50  \n Max.   :5.0100                     I: 5422   VVS1   : 3655   Max.   :79.00  \n                                    J: 2808   (Other): 2531                  \n     table           price             x                y         \n Min.   :43.00   Min.   :  326   Min.   : 0.000   Min.   : 0.000  \n 1st Qu.:56.00   1st Qu.:  950   1st Qu.: 4.710   1st Qu.: 4.720  \n Median :57.00   Median : 2401   Median : 5.700   Median : 5.710  \n Mean   :57.46   Mean   : 3933   Mean   : 5.731   Mean   : 5.735  \n 3rd Qu.:59.00   3rd Qu.: 5324   3rd Qu.: 6.540   3rd Qu.: 6.540  \n Max.   :95.00   Max.   :18823   Max.   :10.740   Max.   :58.900  \n                                                                  \n       z         \n Min.   : 0.000  \n 1st Qu.: 2.910  \n Median : 3.530  \n Mean   : 3.539  \n 3rd Qu.: 4.040  \n Max.   :31.800  \n                 \n\n# sıklık durumunu görselleştirme\nggplot(diamonds, aes(cut)) +\n  geom_bar()\n\n\n\nggplot(diamonds, aes(cut, fill = color)) +\n  geom_bar(position = position_dodge()) + \n  xlab(\"Pirlanta kaliteleri\") + \n  ylab(\"Gozlenme Sikliklari\")\n\n\n\nggplot(diamonds, aes(x=cut, y=carat,fill = color)) +\n  geom_bar(stat = \"identity\") \n\n\n\nggplot(diamonds, aes(x=cut, y=carat,fill = color)) +\n  # fill ile oransal olarak gösterim yapılır\n  geom_bar(stat = \"identity\",position = \"fill\") \n\n\n\nggplot(diamonds, aes(x=cut,y=carat, fill = color)) +\n  geom_col() # y ekseni toplanarak yığılmış\n\n\n\nggplot(diamonds, aes(x=cut,y=carat,, fill = color)) +\n  geom_col(position = \"dodge\") # y ekseni değerleri\n\n\n\nggplot(diamonds, aes(x=cut,y=carat, fill = color)) +\n  geom_col(position = \"stack\")"
  },
  {
    "objectID": "ggplot2.html#dağılım-grafikleri",
    "href": "ggplot2.html#dağılım-grafikleri",
    "title": "ggplot2 ile Veri Görselleştirme",
    "section": "Dağılım Grafikleri",
    "text": "Dağılım Grafikleri\nDağılım grafikleri, veri setinin dağılımını görsel olarak temsil etmek için kullanılan grafik türleridir. Bu grafikler, veri noktalarının, değerlerinin veya gözlemlerinin nasıl dağıldığını incelemek ve veri setindeki desenleri, eğilimleri ve aykırı değerleri anlamak için kullanılır. En yaygın olanı histogram grafikleridir.\nHistogram, veri setinin sayısal dağılımını gösteren bir grafiktir. Veri aralığı belli bir aralığa bölen çubuklardan oluşur ve her çubuk, bu aralıktaki veri noktalarının sayısını temsil eder. Histogramlar genellikle sürekli verilerin dağılımını göstermek için kullanılır.\nBunun dışında boxplot (kutu) grafikleri de dağılımı görselleştirmek için kullanılmaktadır. Boxplot, veri setinin beş özet istatistiği (minimum, ilk çeyrek, medyan, üçüncü çeyrek, maksimum) kullanarak veri dağılımını temsil eder. Bu grafik, aykırı değerleri tanımlamak ve merkezi eğilim ile dağılımın yayılmasını görsel olarak incelemek için kullanılır.\n\nggplot(diamonds, aes(price)) +\n  geom_histogram()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\nggplot(diamonds, aes(price)) +\n  geom_histogram(binwidth = 1000,fill = \"green\")\n\n\n\nggplot(diamonds, aes(price)) +\n  geom_density()\n\n\n\nggplot(diamonds, aes(price)) +\n  geom_density(alpha = .3, fill = \"blue\")\n\n\n\nggplot(diamonds, aes(price)) +\n  geom_histogram(aes(y = ..density..),fill = \"red\") +\n  geom_density(size=1,fill = \"blue\")\n\nWarning: The dot-dot notation (`..density..`) was deprecated in ggplot2 3.4.0.\nℹ Please use `after_stat(density)` instead.\n\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\nggplot(diamonds, aes(price)) +\n  geom_histogram() + \n  facet_wrap( ~ cut ,scales = \"free\" )\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\nggplot(diamonds, aes(price)) +\n  geom_histogram() + \n  facet_grid(cut ~ color,scales = \"free\" )\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\nggplot(diamonds, aes(x=price,fill=cut)) +\n  geom_density(alpha=.3)\n\n\n\n# boxplot\nggplot(diamonds, aes(x=price)) +\n  geom_boxplot()\n\n\n\n# boxplot'a ortalama eklemek\nggplot(diamonds, aes(x=cut,y=price)) +\n  geom_boxplot(color=\"blue\")+\n  stat_summary(fun = \"mean\", geom = \"point\", shape = 5, size = 3)"
  },
  {
    "objectID": "ggplot2.html#grafiklerin-kaydedilmesi",
    "href": "ggplot2.html#grafiklerin-kaydedilmesi",
    "title": "ggplot2 ile Veri Görselleştirme",
    "section": "Grafiklerin Kaydedilmesi",
    "text": "Grafiklerin Kaydedilmesi\nGrafik oluşturulduktan sonra, grafik objesini bir değişkende saklayabilirsiniz (aşağıdaki örnekte “grafik” adını kullandık). Grafik objesini bir değişkende sakladıktan sonra, ggsave() fonksiyonunu kullanarak grafik dosyasını kaydedebilirsiniz. Grafikleri ayrıca RStudio penceresinin sağ alt kısmında yer alan Plots sekmesindeki Export ile kayıt altına alabilirsiniz.\n\ngrafik &lt;- economics %&gt;% \n  mutate(uemploy_mom=unemploy/lag(unemploy ) * 100 - 100,\n         growth=ifelse(uemploy_mom&gt;0,\"pozitif\",\"negatif\")) %&gt;% \n  na.omit() %&gt;% \n  filter(lubridate::year(date)&gt;=2010) %&gt;% \n  ggplot(aes(x=date,y=uemploy_mom,fill=growth))+\n  geom_col() +\n  theme(legend.position = \"none\") +\n  labs(y=\"Aylık Değişim\",\n       title=\"Yıllara göre Aylık İstihdam Değişimi (2010-2015)\")\n\nggsave(\"grafik1.png\", grafik, width = 20, height = 8, units = \"cm\")\nggsave(\"grafik1.png\", grafik,width = 20, height = 8, unit = \"cm\", dpi = 300)"
  },
  {
    "objectID": "data_preprocess.html#eksik-veriler",
    "href": "data_preprocess.html#eksik-veriler",
    "title": "Veri Ön İşleme",
    "section": "Eksik Veriler",
    "text": "Eksik Veriler\nEksik veriler (kayıp gözlem), veri toplamada kaçınılmaz bir durumdur ve üzerinde dikkatle durulmalıdır. Sistematik bir kayıp gözlem durumu yoksa ortada ciddi bir sorun yoktur. Ama rastgele olmayan bir hata varsa tüm kitleye dair yanlılık olacağı için bu durum göz ardı edilemez.\n\ndf &lt;- data.frame(weight = c(rnorm(15, 70, 10), rep(NA, 5)),\n                 height = c(rnorm(17, 165, 20), rep(NA, 3)))\n\nset.seed(12345)\nrows &lt;- sample(nrow(df))\ndf2 &lt;- df[rows, ]\n\n# eksik verilerin sorgulanması\n\nis.na(df2) # sorgulanma\n\n   weight height\n14  FALSE  FALSE\n19   TRUE   TRUE\n16   TRUE  FALSE\n11  FALSE  FALSE\n18   TRUE   TRUE\n8   FALSE  FALSE\n2   FALSE  FALSE\n6   FALSE  FALSE\n17   TRUE  FALSE\n13  FALSE  FALSE\n7   FALSE  FALSE\n1   FALSE  FALSE\n15  FALSE  FALSE\n10  FALSE  FALSE\n12  FALSE  FALSE\n9   FALSE  FALSE\n4   FALSE  FALSE\n20   TRUE   TRUE\n3   FALSE  FALSE\n5   FALSE  FALSE\n\nwhich(is.na(df2)) #konum\n\n[1]  2  3  5  9 18 22 25 38\n\nsum(is.na(df2)) # toplam eksik veri sayısı\n\n[1] 8\n\ncolSums(is.na(df2)) # değişken düzeyinde eksik veri sayısı\n\nweight height \n     5      3 \n\ndf2[!complete.cases(df2), ] #en az bir tane eksik olan satırlar\n\n   weight   height\n19     NA       NA\n16     NA 175.8989\n18     NA       NA\n17     NA 177.4814\n20     NA       NA\n\ndf2[complete.cases(df2), ]$weight\n\n [1] 90.90507 57.14203 58.12725 64.52275 85.66433 84.84112 69.52194 82.78447\n [9] 75.44667 78.12977 64.70903 66.07690 62.65411 59.70013 74.53150\n\n# eksik veriden tamamen kurtulma\nna.omit(df2)\n\n     weight   height\n14 90.90507 157.1324\n11 57.14203 180.1764\n8  58.12725 183.0827\n2  64.52275 170.6710\n6  85.66433 127.4443\n13 84.84112 199.3304\n7  69.52194 150.3750\n1  82.78447 143.2998\n15 75.44667 155.9393\n10 78.12977 165.9076\n12 64.70903 194.0816\n9  66.07690 193.8292\n4  62.65411 167.2071\n3  59.70013 151.6670\n5  74.53150 179.3955\n\ncomplete.cases(df2)\n\n [1]  TRUE FALSE FALSE  TRUE FALSE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE\n[13]  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE\n\ndf2[complete.cases(df2), ] # dolu olanlar satırlar\n\n     weight   height\n14 90.90507 157.1324\n11 57.14203 180.1764\n8  58.12725 183.0827\n2  64.52275 170.6710\n6  85.66433 127.4443\n13 84.84112 199.3304\n7  69.52194 150.3750\n1  82.78447 143.2998\n15 75.44667 155.9393\n10 78.12977 165.9076\n12 64.70903 194.0816\n9  66.07690 193.8292\n4  62.65411 167.2071\n3  59.70013 151.6670\n5  74.53150 179.3955\n\ndf2[complete.cases(df2), ]$weight # değişken bazında dolu olan satırlar\n\n [1] 90.90507 57.14203 58.12725 64.52275 85.66433 84.84112 69.52194 82.78447\n [9] 75.44667 78.12977 64.70903 66.07690 62.65411 59.70013 74.53150"
  },
  {
    "objectID": "data_preprocess.html#imputasyon",
    "href": "data_preprocess.html#imputasyon",
    "title": "Veri Ön İşleme",
    "section": "İmputasyon",
    "text": "İmputasyon\nİmputasyon terimi, eksik verilerin yerine konulması veya doldurulması işlemine atıfta bulunur. Eksik veriler, bir veri setinde belirli gözlemler veya değişkenler için eksik veya bilinmeyen değerler içeren durumlardır. İstatistiksel analiz yaparken eksik verilerle başa çıkmak önemlidir çünkü eksik veriler, sonuçları yanıltabilir veya analizleri etkileyebilir.\nİmputasyon, eksik verileri doldurmak veya tahmin etmek için kullanılan çeşitli istatistiksel yöntemleri ifade eder. İmputasyon işlemi, eksik verileri analizde kullanılabilir hale getirmek amacıyla yapılır. İmputasyon yöntemleri, veri setinin yapısına ve eksik verilerin nedenlerine bağlı olarak değişebilir. İşte bazı yaygın imputasyon yöntemleri:\n\nOrtalama Değer İmputasyonu: Eksik veriler, değişkenin ortalama değeri ile doldurulabilir. Bu yöntem, eksik verilerin diğer gözlemlerdeki ortalama değerlere benzer olduğu varsayımına dayanır.\nMedyan Değer İmputasyonu: Eksik veriler, değişkenin medyan değeri ile doldurulabilir. Medyan, verilerdeki aşırı değerlerden etkilenmeyeceği için ortalama değere göre daha dayanıklı bir seçenektir.\nEn Yakın Komşu İmputasyonu: Eksik veriler, benzer diğer gözlemlerin değerleri ile doldurulabilir. Bu yöntemde, eksik veriye sahip olan gözlem, diğer gözlemlerin benzerliklerine göre doldurulur.\nRegresyon İmputasyonu: Eksik veri içeren bir değişken, diğer değişkenlerle ilişkilendirilerek tahmin edilebilir. Bu yöntem, eksik verinin diğer değişkenlerle ilişkisini kullanarak doldurur.\nEM (Expectation-Maximization) Algoritması: EM algoritması, eksik veri problemini çözmek için kullanılan bir iteratif istatistiksel yöntemdir. Bu yöntem, eksik verilerin olasılık dağılımlarını tahmin etmek için kullanılır.\n\nİmputasyon yöntemi, veri setinin özelliklerine, eksik verilerin miktarına ve verilerin doğasına bağlı olarak seçilir. Her yöntemin avantajları ve dezavantajları vardır, bu nedenle doğru yöntemi seçmek, analizin doğruluğunu ve güvenilirliğini etkileyebilir. İmputasyonun amacı, eksik verilerin doğru ve güvenilir bir şekilde doldurulmasıdır, böylece analiz sonuçları daha kesin ve anlamlı olur.\n\n# eksik verilere basit değer atama\ndf2$weight2 &lt;- ifelse(is.na(df2$weight),mean(df2$weight, na.rm = TRUE),df2$weight)\ndf2\n\n     weight   height  weight2\n14 90.90507 157.1324 90.90507\n19       NA       NA 71.65047\n16       NA 175.8989 71.65047\n11 57.14203 180.1764 57.14203\n18       NA       NA 71.65047\n8  58.12725 183.0827 58.12725\n2  64.52275 170.6710 64.52275\n6  85.66433 127.4443 85.66433\n17       NA 177.4814 71.65047\n13 84.84112 199.3304 84.84112\n7  69.52194 150.3750 69.52194\n1  82.78447 143.2998 82.78447\n15 75.44667 155.9393 75.44667\n10 78.12977 165.9076 78.12977\n12 64.70903 194.0816 64.70903\n9  66.07690 193.8292 66.07690\n4  62.65411 167.2071 62.65411\n20       NA       NA 71.65047\n3  59.70013 151.6670 59.70013\n5  74.53150 179.3955 74.53150\n\n# tek seferde bütün kolonlardaki eksik verileri ortamala ile doldurmak için\nsapply(df2, function(x) ifelse(is.na(x), mean(x, na.rm = TRUE), x ))\n\n        weight   height  weight2\n [1,] 90.90507 157.1324 90.90507\n [2,] 71.65047 168.9953 71.65047\n [3,] 71.65047 175.8989 71.65047\n [4,] 57.14203 180.1764 57.14203\n [5,] 71.65047 168.9953 71.65047\n [6,] 58.12725 183.0827 58.12725\n [7,] 64.52275 170.6710 64.52275\n [8,] 85.66433 127.4443 85.66433\n [9,] 71.65047 177.4814 71.65047\n[10,] 84.84112 199.3304 84.84112\n[11,] 69.52194 150.3750 69.52194\n[12,] 82.78447 143.2998 82.78447\n[13,] 75.44667 155.9393 75.44667\n[14,] 78.12977 165.9076 78.12977\n[15,] 64.70903 194.0816 64.70903\n[16,] 66.07690 193.8292 66.07690\n[17,] 62.65411 167.2071 62.65411\n[18,] 71.65047 168.9953 71.65047\n[19,] 59.70013 151.6670 59.70013\n[20,] 74.53150 179.3955 74.53150\n\nlibrary(zoo)\nsapply(df2, function(x) ifelse(is.na(x), na.locf(x), x )) # carry forward\n\n        weight   height  weight2\n [1,] 90.90507 157.1324 90.90507\n [2,] 90.90507 157.1324 71.65047\n [3,] 90.90507 175.8989 71.65047\n [4,] 57.14203 180.1764 57.14203\n [5,] 57.14203 180.1764 71.65047\n [6,] 58.12725 183.0827 58.12725\n [7,] 64.52275 170.6710 64.52275\n [8,] 85.66433 127.4443 85.66433\n [9,] 85.66433 177.4814 71.65047\n[10,] 84.84112 199.3304 84.84112\n[11,] 69.52194 150.3750 69.52194\n[12,] 82.78447 143.2998 82.78447\n[13,] 75.44667 155.9393 75.44667\n[14,] 78.12977 165.9076 78.12977\n[15,] 64.70903 194.0816 64.70903\n[16,] 66.07690 193.8292 66.07690\n[17,] 62.65411 167.2071 62.65411\n[18,] 62.65411 167.2071 71.65047\n[19,] 59.70013 151.6670 59.70013\n[20,] 74.53150 179.3955 74.53150\n\nsapply(df2, function(x) ifelse(is.na(x), na.locf(x,fromlast=TRUE), x ))\n\n        weight   height  weight2\n [1,] 90.90507 157.1324 90.90507\n [2,] 90.90507 157.1324 71.65047\n [3,] 90.90507 175.8989 71.65047\n [4,] 57.14203 180.1764 57.14203\n [5,] 57.14203 180.1764 71.65047\n [6,] 58.12725 183.0827 58.12725\n [7,] 64.52275 170.6710 64.52275\n [8,] 85.66433 127.4443 85.66433\n [9,] 85.66433 177.4814 71.65047\n[10,] 84.84112 199.3304 84.84112\n[11,] 69.52194 150.3750 69.52194\n[12,] 82.78447 143.2998 82.78447\n[13,] 75.44667 155.9393 75.44667\n[14,] 78.12977 165.9076 78.12977\n[15,] 64.70903 194.0816 64.70903\n[16,] 66.07690 193.8292 66.07690\n[17,] 62.65411 167.2071 62.65411\n[18,] 62.65411 167.2071 71.65047\n[19,] 59.70013 151.6670 59.70013\n[20,] 74.53150 179.3955 74.53150\n\nsapply(df2, function(x) ifelse(is.na(x), na.approx(x), x )) # linear interpolation\n\n        weight   height  weight2\n [1,] 90.90507 157.1324 90.90507\n [2,] 79.65072 166.5156 71.65047\n [3,] 68.39638 175.8989 71.65047\n [4,] 57.14203 180.1764 57.14203\n [5,] 57.63464 181.6295 71.65047\n [6,] 58.12725 183.0827 58.12725\n [7,] 64.52275 170.6710 64.52275\n [8,] 85.66433 127.4443 85.66433\n [9,] 85.25273 177.4814 71.65047\n[10,] 84.84112 199.3304 84.84112\n[11,] 69.52194 150.3750 69.52194\n[12,] 82.78447 143.2998 82.78447\n[13,] 75.44667 155.9393 75.44667\n[14,] 78.12977 165.9076 78.12977\n[15,] 64.70903 194.0816 64.70903\n[16,] 66.07690 193.8292 66.07690\n[17,] 62.65411 167.2071 62.65411\n[18,] 61.17712 159.4370 71.65047\n[19,] 59.70013 151.6670 59.70013\n[20,] 74.53150 179.3955 74.53150\n\nsapply(df2, function(x) ifelse(is.na(x), na.approx(x), x )) # cubic interpolation\n\n        weight   height  weight2\n [1,] 90.90507 157.1324 90.90507\n [2,] 79.65072 166.5156 71.65047\n [3,] 68.39638 175.8989 71.65047\n [4,] 57.14203 180.1764 57.14203\n [5,] 57.63464 181.6295 71.65047\n [6,] 58.12725 183.0827 58.12725\n [7,] 64.52275 170.6710 64.52275\n [8,] 85.66433 127.4443 85.66433\n [9,] 85.25273 177.4814 71.65047\n[10,] 84.84112 199.3304 84.84112\n[11,] 69.52194 150.3750 69.52194\n[12,] 82.78447 143.2998 82.78447\n[13,] 75.44667 155.9393 75.44667\n[14,] 78.12977 165.9076 78.12977\n[15,] 64.70903 194.0816 64.70903\n[16,] 66.07690 193.8292 66.07690\n[17,] 62.65411 167.2071 62.65411\n[18,] 61.17712 159.4370 71.65047\n[19,] 59.70013 151.6670 59.70013\n[20,] 74.53150 179.3955 74.53150\n\n# KNN (k-nearest neighbor) ile Değer Atama\n\nlibrary(DMwR2)\n# airquality verisi\ndf_air &lt;- tibble::as_tibble(airquality)\nanyNA(df_air)\n\n[1] TRUE\n\n# airquality verisindeki Wind değişkeninin bazı değerlerini NA yapalım\nset.seed(1234)\nrow_num &lt;- sample(1:nrow(airquality),5)\nrow_num # bu satırdaki değerlere NA atanacak\n\n[1]  28  80 150 101 111\n\nairquality_2 &lt;- airquality\nairquality_2[row_num,\"Wind\"] &lt;- NA\nairquality_2[row_num,\"Wind\"]\n\n[1] NA NA NA NA NA\n\nhead(airquality_2,20)\n\n   Ozone Solar.R Wind Temp Month Day\n1     41     190  7.4   67     5   1\n2     36     118  8.0   72     5   2\n3     12     149 12.6   74     5   3\n4     18     313 11.5   62     5   4\n5     NA      NA 14.3   56     5   5\n6     28      NA 14.9   66     5   6\n7     23     299  8.6   65     5   7\n8     19      99 13.8   59     5   8\n9      8      19 20.1   61     5   9\n10    NA     194  8.6   69     5  10\n11     7      NA  6.9   74     5  11\n12    16     256  9.7   69     5  12\n13    11     290  9.2   66     5  13\n14    14     274 10.9   68     5  14\n15    18      65 13.2   58     5  15\n16    14     334 11.5   64     5  16\n17    34     307 12.0   66     5  17\n18     6      78 18.4   57     5  18\n19    30     322 11.5   68     5  19\n20    11      44  9.7   62     5  20\n\n# k parametresi, verilen bir noktaya en yakın komşuların sayısıdır. \n# Örneğin: k=5 olsun. Bu durumda mesafeye (öklit) göre en yakın 5 komşu belirlenir\n# ve mesafenin ağırlıklı ortalaması hesaplanır.\n# ağırlıklandırma, her komşuya 1 / d ağırlığının verilmesini içerir.\n# burada d komşuya olan uzaklıktır.\nknn_df_air &lt;- knnImputation(airquality_2, k = 5) # k komşu sayısı\n\nresult &lt;- data.frame(row=row_num,\n                     orig=airquality[row_num,\"Wind\"],\n                     knn=knn_df_air[row_num,\"Wind\"])\nresult\n\n  row orig       knn\n1  28 12.0 10.079819\n2  80  5.1  8.765250\n3 150 13.2  9.914454\n4 101  8.0  6.807361\n5 111 10.9 11.237192\n\nmean(result$orig-result$knn)\n\n[1] 0.4791848\n\n\n\n\n\n\n\n\nTavsiye\n\n\n\nEksik verilerin analiz edilmesi ve imputasyon konusunda R içerisinde çeşitli kütühaneler bulunmaktadır. Bunlardan en çok bilinenleri mice, VIM, missForest, imputation, mi, Amelia ve Hmisc paketleridir."
  },
  {
    "objectID": "data_preprocess.html#aykırı-değer-analizi",
    "href": "data_preprocess.html#aykırı-değer-analizi",
    "title": "Veri Ön İşleme",
    "section": "Aykırı Değer Analizi",
    "text": "Aykırı Değer Analizi\nAykırı değer, diğer gözlemlerden uzak olan, yani diğer veri noktalarından önemli ölçüde farklı olan bir veri noktası olan bir değer veya gözlemdir. Bu dokümanda, tanımlayıcı istatistikler (minimum, maksimum, histogram, kutu grafiği ve yüzdelikler dahil) gibi basit teknikler ve Z-Skoru ile aykırı değer analizi anlatılacaktır.\n\nMinumum ve Maximum\n\nlibrary(ggplot2)\n\n# mpg verisindeki hwy değişkeni üzerinden inceleyelim\nsummary(mpg$hwy)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  12.00   18.00   24.00   23.44   27.00   44.00 \n\nmin(mpg$hwy)\n\n[1] 12\n\nmax(mpg$hwy)\n\n[1] 44\n\n\n\n\nHistogram\n\nggplot(mpg) +\n  aes(x = hwy) +\n  geom_histogram(bins = 20, fill = \"blue\") +\n  theme_minimal()\n\n\n\n# grafiğiin sağ tarafında kalan gözlemler şüpheli görünüyor.\n\n\n\nBoxplot\nBoxplot, beş konum ölçüsü kullanarak verilerin grafiksel bir sunumunu verir: en küçük değer (min), birinci çeyreklik (\\(Q_1\\)) , medyan, üçüncü çeyreklik (\\(Q_3\\)) en büyük değer. Kutunun farklı bölümleri arasındaki boşluk, verilerdeki dağılım (yayılma) ve çarpıklık derecesini gösterir. Bir boxplot grafiği, çeyrekler arası aralık (IQR) kriteri kullanılarak şüpheli bir aykırı değer olarak sınıflandırılan herhangi bir gözlemi görüntüleyerek nicel bir değişkeni görselleştirmeye yardımcı olur.\n\\(I = [Q_1-1.5 * IQR ; Q_3 + 1.5 * IQR]\\)\n\n\n\n\n\nIQR ise üçüncü ve birinci çeyrek arasındaki farktır. R içerisindeki IQR() fonksiyonu bu amaçla kullanılabilir.\n\n# temel istatistiklere erişim\nsummary(mpg$hwy)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  12.00   18.00   24.00   23.44   27.00   44.00 \n\nfivenum(mpg$hwy)\n\n[1] 12 18 24 27 44\n\nggplot(mpg) +\n  aes(x = \"\", y = hwy) +\n  geom_boxplot(fill = \"blue\") +\n  theme_minimal()\n\n\n\n# outlier değerlerine erişim\nboxplot.stats(mpg$hwy)$out\n\n[1] 44 44 41\n\n# outier olarak görülen değerlerin konumları\nhwy_out &lt;- boxplot.stats(mpg$hwy)$out\nhwy_out_sira &lt;- which(mpg$hwy %in% c(hwy_out))\nhwy_out_sira\n\n[1] 213 222 223\n\n# outlier olarak görülen satırlar\nmpg[hwy_out_sira, ]\n\n# A tibble: 3 × 11\n  manufacturer model      displ  year   cyl trans  drv     cty   hwy fl    class\n  &lt;chr&gt;        &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt;  &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt;\n1 volkswagen   jetta        1.9  1999     4 manua… f        33    44 d     comp…\n2 volkswagen   new beetle   1.9  1999     4 manua… f        35    44 d     subc…\n3 volkswagen   new beetle   1.9  1999     4 auto(… f        29    41 d     subc…\n\n\n\n\nYüzdelikler (Percentiles)\nBu aykırı değer tespiti yöntemi, yüzdelik dilimlere dayalıdır. Yüzdelikler yöntemiyle, 2,5 ve 97,5 yüzdelik dilimlerin oluşturduğu aralığın dışında kalan tüm gözlemler potansiyel aykırı değerler olarak kabul edilecektir. Aralığı oluşturmak için 1 ve 99 veya 5 ve 95 yüzdelikler gibi diğer yüzdelikler de düşünülebilir.\n\nalt_sinir &lt;- quantile(mpg$hwy, 0.025)\nalt_sinir\n\n2.5% \n  14 \n\nust_sinir &lt;- quantile(mpg$hwy, 0.975)\nust_sinir\n\n 97.5% \n35.175 \n\n# Bu yönteme göre, 14'ün altındaki ve 35.175'in üzerindeki tüm gözlemler,\n# potansiyel aykırı değerler olarak kabul edilecektir.\n\noutlier_sira &lt;- which(mpg$hwy &lt; alt_sinir | mpg$hwy &gt; ust_sinir)\noutlier_sira\n\n [1]  55  60  66  70 106 107 127 197 213 222 223\n\n# Bu yönteme göre 11 adet outlier bulunmuştur.\nmpg[outlier_sira,]\n\n# A tibble: 11 × 11\n   manufacturer model      displ  year   cyl trans drv     cty   hwy fl    class\n   &lt;chr&gt;        &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt;\n 1 dodge        dakota pi…   4.7  2008     8 auto… 4         9    12 e     pick…\n 2 dodge        durango 4…   4.7  2008     8 auto… 4         9    12 e     suv  \n 3 dodge        ram 1500 …   4.7  2008     8 auto… 4         9    12 e     pick…\n 4 dodge        ram 1500 …   4.7  2008     8 manu… 4         9    12 e     pick…\n 5 honda        civic        1.8  2008     4 auto… f        25    36 r     subc…\n 6 honda        civic        1.8  2008     4 auto… f        24    36 c     subc…\n 7 jeep         grand che…   4.7  2008     8 auto… 4         9    12 e     suv  \n 8 toyota       corolla      1.8  2008     4 manu… f        28    37 r     comp…\n 9 volkswagen   jetta        1.9  1999     4 manu… f        33    44 d     comp…\n10 volkswagen   new beetle   1.9  1999     4 manu… f        35    44 d     subc…\n11 volkswagen   new beetle   1.9  1999     4 auto… f        29    41 d     subc…\n\n# Sınırları biraz daha küçültelim\nalt_sinir &lt;- quantile(mpg$hwy, 0.01)\nust_sinir &lt;- quantile(mpg$hwy, 0.99)\n\noutlier_sira &lt;- which(mpg$hwy &lt; alt_sinir | mpg$hwy &gt; ust_sinir)\n\nmpg[outlier_sira, ]\n\n# A tibble: 3 × 11\n  manufacturer model      displ  year   cyl trans  drv     cty   hwy fl    class\n  &lt;chr&gt;        &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt;  &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt;\n1 volkswagen   jetta        1.9  1999     4 manua… f        33    44 d     comp…\n2 volkswagen   new beetle   1.9  1999     4 manua… f        35    44 d     subc…\n3 volkswagen   new beetle   1.9  1999     4 auto(… f        29    41 d     subc…\n\n# Buna göre IQR ile elde edildiği gibi 3 adet outlier bulundu.\n\n\n\nZ-Skor Yöntemi\nAykırı değerlerin tespitinde ortalama ve standart sapmanın kulllanıldığı en bilinen yöntemlerdendir ve aşağıdaki şekilde hesaplanır.\n\\(Z_i = \\frac{(X_i -\\mu)}{\\sigma}\\)\n\n\n\n\n\n\nstd_z &lt;- function(x){\n  \n  z=(x-mean(x))/sd(x)\n  return(z)\n}\n\nmpg$hwy_std &lt;- std_z(mpg$hwy)\nmpg[,c(\"hwy\",\"hwy_std\")]\n\n# A tibble: 234 × 2\n     hwy hwy_std\n   &lt;int&gt;   &lt;dbl&gt;\n 1    29   0.934\n 2    29   0.934\n 3    31   1.27 \n 4    30   1.10 \n 5    26   0.430\n 6    26   0.430\n 7    27   0.598\n 8    26   0.430\n 9    25   0.262\n10    28   0.766\n# ℹ 224 more rows\n\n# -3 ve +3 sapma dışında kalanları aykırı değer olarak kabul ediyoruz.\noutliers_zskor &lt;- which(mpg$hwy_std &lt; -3 | mpg$hwy_std &gt; +3)\noutliers_zskor\n\n[1] 213 222\n\nmpg[outliers_zskor,c() ]\n\n# A tibble: 2 × 0\n\n# bu yönteme göre 2 adet aykırı değer bulunmuştur."
  },
  {
    "objectID": "data_preprocess.html#veri-normalleştirme",
    "href": "data_preprocess.html#veri-normalleştirme",
    "title": "Veri Ön İşleme",
    "section": "Veri Normalleştirme",
    "text": "Veri Normalleştirme\nDeğişkenler farklı ölçeklerde ölçüldüğünde, genellikle analize eşit katkıda bulunmazlar. Örneğin, bir değişkenin değerleri 0 ile 100.000 arasında ve başka bir değişkenin değerleri 0 ile 100 arasında değişiyorsa, daha büyük aralığa sahip değişkene analizde daha büyük bir ağırlık verilecektir. Değişkenleri normalleştirerek, her bir değişkenin analize eşit katkı sağladığından emin olabiliriz. Değişkenleri normalleştirmek için (veya ölçeklendirmek) genellikle min-max ya da z dönüşümü yöntemleri kullanılır.\n\n# min-max dönüşümleri\n\n# 0 ile 1 arasi dönüşüm\nstd_0_1 &lt;- function(x) {\n  (x - min(x)) / (max(x) - min(x))\n}\n\n#-1 ile +1 arası dönüşüm \nstd_1_1 &lt;- function(x) {\n  ((x - mean(x)) / max(abs(x - mean(x))))\n}\n\n# a ile b arası dönüşüm \nstd_min_max &lt;- function(x,a,b) {\n  # a min değer\n  # b max değer\n  (a + ((x - min(x)) * (b - a)) / (max(x) - min(x)))\n}\n\nset.seed(12345)\ndat &lt;- data.frame(x = rnorm(20, 10, 3),\n                  y = rnorm(20, 30, 8),\n                  z = rnorm(20, 25, 5))\ndat\n\n           x        y        z\n1  11.756586 36.23698 30.64255\n2  12.128398 41.64628 13.09821\n3   9.672090 24.84537 19.69867\n4   8.639508 17.57490 29.68570\n5  11.817662 17.21832 29.27226\n6   4.546132 44.44078 32.30365\n7  11.890296 26.14682 17.93451\n8   9.171448 34.96304 27.83702\n9   9.147521 34.89699 27.91594\n10  7.242034 28.70151 18.46601\n11  9.651257 36.49499 22.29807\n12 15.451936 47.57467 34.73846\n13 11.111884 46.39352 25.26795\n14 11.560649 43.05957 26.75831\n15  7.748404 32.03417 21.64512\n16 12.450700 33.92951 26.38977\n17  7.340927 27.40731 28.45586\n18  9.005267 16.70360 29.11898\n19 13.362138 44.14187 35.72533\n20 10.896171 30.20641 13.26528\n\nsummary(dat)\n\n       x                y               z        \n Min.   : 4.546   Min.   :16.70   Min.   :13.10  \n 1st Qu.: 8.914   1st Qu.:27.09   1st Qu.:21.16  \n Median :10.284   Median :34.41   Median :27.30  \n Mean   :10.230   Mean   :33.23   Mean   :25.53  \n 3rd Qu.:11.836   3rd Qu.:42.00   3rd Qu.:29.38  \n Max.   :15.452   Max.   :47.57   Max.   :35.73  \n\napply(dat, 2, std_0_1)\n\n              x          y           z\n [1,] 0.6611575 0.63274053 0.775368144\n [2,] 0.6952505 0.80796300 0.000000000\n [3,] 0.4700211 0.26373477 0.291705877\n [4,] 0.3753393 0.02822392 0.733080320\n [5,] 0.6667578 0.01667340 0.714808256\n [6,] 0.0000000 0.89848463 0.848779748\n [7,] 0.6734179 0.30589231 0.213738973\n [8,] 0.4241150 0.59147416 0.651378062\n [9,] 0.4219211 0.58933460 0.654866001\n[10,] 0.2471988 0.38864587 0.237228478\n[11,] 0.4681108 0.64109819 0.406585628\n[12,] 1.0000000 1.00000000 0.956385878\n[13,] 0.6020419 0.96173940 0.537838847\n[14,] 0.6431912 0.85374322 0.603705080\n[15,] 0.2936301 0.49659993 0.377728555\n[16,] 0.7248037 0.55799517 0.587417289\n[17,] 0.2562668 0.34672297 0.678727553\n[18,] 0.4088772 0.00000000 0.708033996\n[19,] 0.8083774 0.88880212 1.000000000\n[20,] 0.5822623 0.43739366 0.007383637\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\ndat %&gt;% mutate_all(std_0_1) %&gt;% summary()\n\n       x                y                z         \n Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.4005   1st Qu.:0.3365   1st Qu.:0.3562  \n Median :0.5261   Median :0.5737   Median :0.6275  \n Mean   :0.5211   Mean   :0.5354   Mean   :0.5492  \n 3rd Qu.:0.6684   3rd Qu.:0.8194   3rd Qu.:0.7194  \n Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  \n\ndat %&gt;% mutate_all(std_1_1) %&gt;% summary()\n\n       x                   y                  z          \n Min.   :-1.000000   Min.   :-1.00000   Min.   :-1.0000  \n 1st Qu.:-0.231502   1st Qu.:-0.37143   1st Qu.:-0.3514  \n Median : 0.009603   Median : 0.07154   Median : 0.1426  \n Mean   : 0.000000   Mean   : 0.00000   Mean   : 0.0000  \n 3rd Qu.: 0.282624   3rd Qu.: 0.53057   3rd Qu.: 0.3098  \n Max.   : 0.918881   Max.   : 0.86789   Max.   : 0.8207  \n\ndat %&gt;% mutate_all(std_min_max, a = -2, b = 2) %&gt;% summary()\n\n       x                  y                 z          \n Min.   :-2.00000   Min.   :-2.0000   Min.   :-2.0000  \n 1st Qu.:-0.39803   1st Qu.:-0.6539   1st Qu.:-0.5751  \n Median : 0.10457   Median : 0.2947   Median : 0.5102  \n Mean   : 0.08455   Mean   : 0.1415   Mean   : 0.1970  \n 3rd Qu.: 0.67369   3rd Qu.: 1.2776   3rd Qu.: 0.8775  \n Max.   : 2.00000   Max.   : 2.0000   Max.   : 2.0000  \n\ndat %&gt;% mutate_all(std_z) %&gt;% summary()\n\n       x                  y                 z          \n Min.   :-2.27173   Min.   :-1.7088   Min.   :-1.9165  \n 1st Qu.:-0.52591   1st Qu.:-0.6347   1st Qu.:-0.6735  \n Median : 0.02182   Median : 0.1223   Median : 0.2732  \n Mean   : 0.00000   Mean   : 0.0000   Mean   : 0.0000  \n 3rd Qu.: 0.64204   3rd Qu.: 0.9067   3rd Qu.: 0.5937  \n Max.   : 2.08745   Max.   : 1.4831   Max.   : 1.5729  \n\n# Yapılan dönüşümler verinin dağılımını değiştirmemektedir.\npar(mfrow=c(2,1))\nhist(dat$x,main=\"original data\",col=\"blue\")\nhist(std_0_1(dat$x),main=\"normalize data\",col=\"red\")"
  },
  {
    "objectID": "statistics.html#merkezi-eğilim-ölçüleri",
    "href": "statistics.html#merkezi-eğilim-ölçüleri",
    "title": "R ile Temel İstatistik",
    "section": "Merkezi Eğilim Ölçüleri",
    "text": "Merkezi Eğilim Ölçüleri\nDağılımın konumu hakkında bilgi veren ölçümlerdir. Aritmetik ortalama, geometrik ortalama, harmonik ortalama, düzeltilmiş ortalama, ortanca, çeyrekler, yüzdelikler konum ölçülerine örnek olarak verilebilir.\n\nAritmetik Ortalama\n\nGünlük hayatta en sık kullanılan merkezi eğilim ölçüsüdür.\nÜzerinde inceleme yapılan veri setindeki elemanların toplanıp incelenen eleman sayısına bölünmesiyle elde edilir.\nKonum olarak verilerin en çok hangi değer etrafında toplandığının ya da yoğunlaştığının sayısal bir ölçüsüdür.\nHem kitle hem de örneklem için hesaplanır.\nDağılışların yerinin belirlenmesinde en çok kullanılan yer ölçüsü aritmetik ortalamadır; ve tek başına ortalama sözcüğünden aritmetik ortalama anlaşılır.\nAritmetik ortalama bütün değerlerin ağırlığını eşit kabul ettiğinden dağılımı her zaman en iyi şekilde temsil etmeyebilir. Ayrıca aritmetik ortalama, veri kümesindeki aşırı değerlerden çok kolay etkilenir.\n\n\\[ \\mu = \\frac{1}{N}\\sum_{i=1}^NX_i \\]\n\nmean(airquality$Wind)\n\n[1] 9.957516\n\nmean(airquality$Ozone, na.rm = TRUE) # NA'ler kaldırılarak ortalama hesaplanır\n\n[1] 42.12931\n\n\n\n\nGeometrik Ortalama\n\nPeriyodik artışlar veya azalmalar (değişim oranları) içeren enflasyon veya nüfus değişiklikleri gibi konuları incelerken, geometrik ortalama, incelenen tüm dönem boyunca ortalama değişikliği bulmak için daha uygundur.\nEğer veriler sıfır ya da negatif değerler içeriyorsa geometrik ortalama hesaplanamaz.\nGeometrik ortalama, uç değerlerden aritmetik ortalamaya göre daha az etkilenmektedir.\nGeometrik Ortalama &lt;= Aritmetik Ortalama\n\n\\[ G.O. = ^n\\sqrt{\\prod_{i=1}^{n}X_i} \\]\n\n# R programında hazır geometrik ortalama fonksiyonu yoktur.\n# 1. yol\ngeo_mean &lt;- function(x){\n  x &lt;- na.omit(x)\n  (prod(x))^(1/length(x))\n}\n\nround(geo_mean(airquality$Wind),3)\n\n[1] 9.273\n\nround(geo_mean(airquality$Ozone),3)\n\n[1] 30.524\n\n# 2. yol\nlibrary(psych)\nround(geometric.mean(airquality$Wind),3)\n\n[1] 9.273\n\nround(geometric.mean(airquality$Ozone),3)\n\n[1] 30.524\n\n\n\n\nMedyan (Ortanca)\n\nGözlem değerleri küçükten büyüğe sıralandığında ortada kalan gözlem değeridir.\nBir seride yer alan gözlemlerin tümünün hesaba katılmadığı ortalamalardan biridir.\nBasit serilerde seri tek sayıda gözlemden oluşuyorsa serinin gözlem değerleri küçükten büyüğe sıralandığında tam ortada yer alan gözlem değeridir.\nSeri çift sayıda gözlemden oluşuyorsa ortada kalan iki gözlem değerinin aritmetik ortalaması medyandır.\nMedyan, ölçümlerin %50’sinin üzerinde, %50’sinin aşağısında yer aldığı merkezi değerdir.\nDağılımdaki aşırı değerlerden etkilenmez.\nAritmetik ortalamaya kıyasla daha tutarlı bir sonuç elde edilir.\nHer bir veri seti için bir tek medyan söz konusudur.\nMedyanın zayıf tarafı serideki bütün değerleri dikkate almaması sebebi ile matematik işlemlere elverişli değildir.\nGözlem sayısı (n) tek ise , \\(\\widetilde{X} = X_{\\frac{n+1}{2}}\\)\nGözlem sayısı (n) çift ise , \\(\\widetilde{X} = \\frac{X_\\frac{n}{2}+X_{\\frac{n+1}{2}}}{2}\\)\n\n\nmedian(airquality$Wind)\n\n[1] 9.7\n\nmedian(airquality$Ozone,na.rm = TRUE)\n\n[1] 31.5\n\n\n\n\nMod (Tepe değeri)\n\nEn sık ortaya çıkan (en yüksek frekanslı) ölçümdür.\nDağılımdaki aşırı değerlerden etkilenmez\nHer dağılımda tepe değeri bulunmayabilir.\nBazı dağılımlarda birden fazla tepe değeri bulunabilir.\nTepe değeri aritmetik işlemler için elverişli değildir.\nTüm veri değerlerini göz önünde bulundurmadığı için tutarlı olmayan bir merkezi eğilim ölçüsüdür.\nGözlem sayısı az olduğunda tepe değer güvenilir bir ölçü değildir.\n\n\n\n\n\n\n\n# R programında hazır mod fonksiyonu yoktur.\n\nlibrary(DescTools)\nMode(airquality$Wind)\n\n[1] 11.5\nattr(,\"freq\")\n[1] 15\n\nMode(airquality$Solar.R,na.rm = TRUE)\n\n[1] 238 259\nattr(,\"freq\")\n[1] 4\n\n\n\n\nÇeyreklikler\n\nBirinci Bölen ilk yüzde 25 nci noktadır ve verinin ¼ kadarı birinci bölen içerisinde kalır.\nİkinci Bölen ilk yüzde 50 nci noktadır ve verinin yarısı bu noktanın altında kalır( ½) aynı zamanda ikinci bölen medyan olarak ta bilinir.\nÜçüncü Bölen ilk yüzde 75 nci veri kümesidir ve bütün verinin ¾ kadarı bu noktanın altında kalır.\nGözlem sayısı (n) tek ise , \\(Q_1 = X_{\\frac{n+1}{4}}\\)\nGözlem sayısı (n) çift ise , \\(Q_1 = \\frac{X_\\frac{n}{4}+X_{\\frac{n}{4}+1}}{2}\\)\nGözlem sayısı (n) tek ise , \\(Q_3 = X_{\\frac{3(n+1)}{4}}\\)\nGözlem sayısı (n) çift ise , \\(Q_3 = \\frac{X_\\frac{3n}{4}+X_{\\frac{3n}{4}+1}}{2}\\)\n\n\n\n\n\n\n\nquantile(airquality$Wind,na.rm = TRUE)\n\n  0%  25%  50%  75% 100% \n 1.7  7.4  9.7 11.5 20.7 \n\nmedian(airquality$Wind,na.rm = TRUE)\n\n[1] 9.7\n\nquantile(airquality$Wind,na.rm = TRUE,probs = 0.75) #Q3\n\n 75% \n11.5 \n\nquantile(airquality$Wind,na.rm = TRUE,probs = 0.25) #Q1\n\n25% \n7.4 \n\nquantile(airquality$Wind,na.rm = TRUE,probs = c(0.20,0.50,0.80)) # %20,%50,%80\n\n  20%   50%   80% \n 6.90  9.70 12.96 \n\nquantile(airquality$Solar.R,na.rm = TRUE)\n\n    0%    25%    50%    75%   100% \n  7.00 115.75 205.00 258.75 334.00 \n\nmedian(airquality$Solar.R,na.rm = TRUE)\n\n[1] 205"
  },
  {
    "objectID": "statistics.html#dağılım-ölçüleri",
    "href": "statistics.html#dağılım-ölçüleri",
    "title": "R ile Temel İstatistik",
    "section": "Dağılım Ölçüleri",
    "text": "Dağılım Ölçüleri\nOrtalama, medyan ve mod gibi merkezi eğilim ölçüleri, bir veri setinin dağılımının bütün resmini ortaya koymaz. Aynı ortalamaya sahip iki veri seti tamamen farklı yayılımlara sahip olabilir. Bir veri seti için gözlem değerleri arasındaki farklılık, diğer veri seti için olduğundan çok daha büyük veya daha küçük olabilir. Bu nedenle, ortalama, medyan veya mod tek başına genellikle bir veri kümesinin dağılımının şeklini ortaya çıkarmak için yeterli bir ölçü değildir. Bu yüzden veri değerleri arasındaki varyasyon hakkında bazı bilgiler sağlayabilecek bir ölçülere de ihtiyaç vardır. Bu ölçülere dağılım (yayılım) ölçüleri denir. Birlikte ele alınan merkezi eğilim ve dağılım ölçüleri, tek başına merkezi eğilim ölçülerinden ziyade bir veri setinin daha iyi bir resmini verir. Değişim aralığı, çeyrekler arası genişlik, varyans, standart sapma, basıklık, çarpıklık, min, max başlıca dağılım ölçüleri arasındadır.\n\nDeğişim Aralığı (Açıklık)\n\nVeri setindeki en büyük değer ile en küçük değer arasındaki farktır.\nEn basit dağılım ölçüsü olmakla birlikte uç ve aykırı değerlerden etkilenmesi olumsuz yönüdür.\nSerinin sadece 2 gözlemine bağlı olarak hesaplanan bu ölçü değişkenliğin şekli hakkında çok fazla bilgi vermediğinden diğer değişkenlik ölçüleri kadar sık kullanılmaz.\n\n\\[D.A = max(X)-min(X)\\]\n\n# 1. yol\nmax(airquality$Ozone,na.rm = TRUE)-min(airquality$Ozone,na.rm = TRUE)\n\n[1] 167\n\n# 2. yol\nrange(airquality$Ozone,na.rm = TRUE)\n\n[1]   1 168\n\nrange(airquality$Ozone,na.rm = TRUE)[2]-range(airquality$Ozone,na.rm = TRUE)[1]\n\n[1] 167\n\n\n\n\nÇeyrekler Arası Genişlik\n\nDağılımdaki verilerin ortadaki % 50’sinin yer aldığı aralığı belirlemek için kullanılır.\nAşırı uç değerlerden etkilenmez. Çünkü çeyreklikler arası genişlik dağılımdaki değerlerin merkezdeki %50’si ile ilgilenir.\nÇeyrekler arası bir genişlik, değerlerin büyük kısmının nerede olduğunu gösteren bir ölçüdür.\nÇeyrek Sapma 3. çeyrek ile 1. çeyrek arasındaki farktır.\nIQR (Interquartile Range) olarak ifade edilir.\n\n\\[IQR=Q_3-Q1\\]\n\n# 1.yol\nq3 &lt;- quantile(airquality$Wind,na.rm = TRUE,probs = 0.75) #Q3\nq1 &lt;- quantile(airquality$Wind,na.rm = TRUE,probs = 0.25) #Q1\nq3-q1\n\n75% \n4.1 \n\n# 2. yol\nIQR(airquality$Wind,na.rm = TRUE)\n\n[1] 4.1\n\n\n\n\nVaryans ve Standart Sapma\nGözlem değerlerinin aritmetik ortalamadan sapmaları dikkate alınarak farklı değişkenlik ölçüleri geliştirilebilir. Ancak gözlemlerin aritmetik ortalamadan sapmalarının her zaman sıfıra eşittir. Bu sorunu ortadan kaldırmak için gözlemlerin aritmetik ortalamadan olan sapmalarının karelerinin toplamının gözlem sayısına oranı değişkenlik ölçüsü olarak yorumlanabilir. Bu ölçü varyans olarak adlandırılır.\n\nBir dağılımda değerler aritmetik ortalamadan uzaklaştıkça dağılımın yaygınlığı artar.\nVaryansın karekökü standart sapmadır. Genel olarak, bir veri kümesi için standart sapmanın daha düşük bir değeri, o veri kümesinin değerlerinin ortalama etrafında nispeten daha küçük bir aralığa yayıldığını gösterir. Buna karşılık, bir veri kümesi için standart sapmanın daha büyük bir değeri, o veri kümesinin değerlerinin, ortalama etrafında nispeten daha geniş bir aralığa yayıldığını gösterir.\nKitle varyansı \\(\\sigma^2\\) ile standart sapma ise \\(\\sigma\\) ile gösterilmektedir. Örneklem standart sapması ise \\(s\\) ile ifade edilir.\n\n\\[s= \\sqrt{\\sum_{i=1}^N\\frac{(x_i-\\bar{x})^2}{n-1}}\\]\n\nvar(airquality$Wind,na.rm=TRUE)\n\n[1] 12.41154\n\nsd(airquality$Wind,na.rm=TRUE)\n\n[1] 3.523001\n\nvar(airquality$Solar.R,na.rm=TRUE)\n\n[1] 8110.519\n\nsd(airquality$Solar.R,na.rm=TRUE)\n\n[1] 90.05842\n\n\n\n\nDeğişim Katsayısı\n\nFarklı serilerin değişkenliklerinin karşılaştırılmasında, farklı birimlerle ölçülmüş veri setleri söz konusu olduğundan standart sapma kullanışlı değildir.\nBunun yerine ilgili serilerin standart sapmaları serilerin ortalama değerinin yüzdesi olarak ifade edilir ve gözlem değerlerinin büyüklüklerinden kaynaklanan farklılık ortadan kalkmış olur.\nElde edilen bu yeni değişkenlik ölçüsü kullanılarak serilerin birbirlerine göre daha değişken ya da daha homojen oldukları konusunda yorum yapılabilir.\nBu değer ne kadar küçükse dağılım o kadar homojendir, değişkenlik azdır. Yüzdesel olarak ifade edilir.\nDeğişim Katsayısı standart sapmanın aritmetik ortalamaya bölünüp 100 ile çarpılmasıyla elde edilir.\n\n\\[D.K. = \\frac{S}{\\bar{X}}\\times{100}\\]\n\ndk_wind &lt;- sd(airquality$Wind,na.rm=TRUE)/mean(airquality$Wind,na.rm=TRUE)\ndk_wind\n\n[1] 0.3538032\n\ndk_solar &lt;- sd(airquality$Solar.R,na.rm=TRUE)/mean(airquality$Solar.R,na.rm=TRUE)\ndk_solar\n\n[1] 0.4843634\n\n\n\n\nÇarpıklık ve Basıklık\n\nBir dağılımın normal dağılıma göre çarpık olup olmadığını belirlemede kullanılır. Simetrik dağılımlarda ortalama, ortanca ve tepe değeri birbirine eşittir.\nÇarpıklık katsayısı 0 ise dağılım simetriktir, 0’dan küçük ise sola çarpıktır (negatif çarpıklık), 0’dan büyük ise sağa çarpıktır (pozitif çarpıklık).\nPozitif çarpıklıkta sağ kuyruk daha uzun iken negatif çarpıklıkta sol kuyruk daha uzundur.\nAritmetik Ortalama, Medyan ve Mod arasındaki ilişkilere göre de çarpıklık belirlenebilir.\n\nMod &lt; Medyan &lt; Ortalama ise, dağılım sağa-çarpık yani (+) yöne eğilimli dağılımdır.\nOrtalama &lt; Medyan &lt; Mod ise, dağılım sola-çarpık yani (-) yöne eğilimli dağılımdır.\nOrtalama = Mod = Medyan ise, dağılım simetrik dağılımdır.\n\n\n\n\n\n\n\n\nBir dağılımın normal dağılıma göre basık olup olmadığını belirlemede kullanılır.\nBasıklık katsayısı sıfırdan büyükse normal dağılıma göre daha sivri, küçük ise daha basıktır.\nBasıklık katsayısı 3’e eşit ise seri normal dağılıma (mesokurtic) sahiptir. Eğer3’ten küçük ise, bir platykurtik dağılımı gösterir (daha kısa kuyruklu normal dağılımdan daha düz). Eğer 3’ten büyük ise, bir leptokurtik dağılımı gösterir (daha uzun kuyruklu normal dağılımdan daha doruğa).\nİki veya daha fazla simetrik dağılım karşılaştırıldığında aralarındaki fark basıklık ile incelenir.\n\n\n\n\n\n\n\nlibrary(moments)\nskewness(airquality$Ozone,na.rm = TRUE) # sağa çarpık\n\n[1] 1.225681\n\nkurtosis(airquality$Ozone,na.rm = TRUE) # sivri\n\n[1] 4.184071\n\nhist(airquality$Ozone,freq = FALSE)\nlines(density(airquality$Ozone,na.rm = TRUE),col = 2, lwd = 2)\n\n\n\nskewness(airquality$Solar.R,na.rm = TRUE) # sola çarpık\n\n[1] -0.4236342\n\nkurtosis(airquality$Solar.R,na.rm = TRUE) # sivri\n\n[1] 2.023567\n\nhist(airquality$Solar.R,freq = FALSE)\nlines(density(airquality$Solar.R,na.rm = TRUE),col = 2, lwd = 2)\n\n\n\n# normal dağılımdan veri üretelim\nnorm_vec &lt;- rnorm(1000,10,5)\nskewness(norm_vec) # sola çarpık\n\n[1] -0.02178762\n\nkurtosis(norm_vec) # sivri\n\n[1] 2.777125\n\nhist(norm_vec,freq = FALSE,col=\"#116AF3\") # renk kodları da kullanılabilir.\nlines(density(norm_vec),col = \"#F33011\", lwd = 2)"
  },
  {
    "objectID": "statistics.html#ilişki-ölçüleri",
    "href": "statistics.html#ilişki-ölçüleri",
    "title": "R ile Temel İstatistik",
    "section": "İlişki Ölçüleri",
    "text": "İlişki Ölçüleri\nÖnceki bölümlerde, bir dağılımı tanımlayan ve özet istatistikleri hesaplayan tek bir değişkene odaklanmıştık. Tek bir değişkeni tanımlayan istatistiklere tek değişkenli istatistikler denir. İki değişken arasındaki ilişkiyi incelersek, iki değişkenli istatistiklere atıfta bulunuruz. Birkaç değişken arasındaki ilişkiler aynı anda incelenirse, çok değişkenli istatistiklere atıfta bulunuruz. İlişki ölçüleri, iki değişken arasındaki ilişkinin boyutunu özetlemek için araçlar sağlar.\nİlişkiyi ölçmek için birçok araç türü olmasına rağmen, kovaryans ve Pearson korelasyon katsayıları “sayısal” veri türü için en bilinen ve yaygın araçlardır. Kovaryans ve korelasyon arasındaki temel fark, kovaryans, değerin işaretine (+’ve veya -’ve) bağlı olarak ilişkinin yönünü gösterir. Ancak korelasyon, değişkenler arasındaki “doğrusal” ilişkinin gücünü gösterir.\nKategorik veriler için ki-kare testi kullanılmkatadır. Spearman rho ve Kendall Tau korelasyon katsayıları da vardır ancak bunlar parametrik olmayan testlerdir ve yaygın olarak kullanılmazlar.\nDeğişkenler arasındaki ilişkiyi çizgi veya saçılım grafiği çizerek de incelenebilir. Ancak, bu grafiklere bakarak ilişkiden emin olmak her zaman mümkün olmayabilir. İstatistikte testler her zaman görsel araçlardan daha güçlüdür. Görsel araçlar fikir verir, testler ise fikirleri doğrular.\n\nKovaryans\nKovaryans, iki değişkenin ortak değişkenliğinin bir ölçüsüdür. Kovaryans (−∞,∞) aralığında herhangi bir değer alabilir. Bir değişkenin büyük/küçük değerleri esas olarak diğer değişkenin daha büyük/küçük değerlerine karşılık geliyorsa kovaryans pozitiftir. Değişkenler zıt davranış gösterme eğilimindeyse kovaryans negatiftir. Kovaryans \\(s_{xy}\\) ile gösterilir ve aşağıdaki şekilde hesaplanır.\n\\[{s}_{xy} = \\frac{\\sum_{i=1}^n(x_i - \\bar{x})(y_i - \\bar{y})}{n-1}\\]\n\nhead(iris)\n\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa\n\ncov(iris$Sepal.Length,iris$Petal.Length) # pozitif ilişki var\n\n[1] 1.274315\n\ncov(iris$Sepal.Length,iris$Sepal.Length)\n\n[1] 0.6856935\n\n\n\n\nKorelasyon\nKorelasyon, nicel değişkenler arasındaki ilişkiyi incelemek için yaygın olarak kullanılan bir yöntemdir. Karl Pearson’ın Pearson moment korelasyon katsayısı olarak da bilinen doğrusal korelasyon katsayısı r’dir. Doğrusal korelasyon katsayısı, iki değişken arasındaki doğrusal ilişkinin gücünü ölçer.\n\n\n\n\n\n\nKorelasyon, kovaryansın standartlaştırılmış halidir.\nStandartlaştırmadan kaynaklanan bilgi kaybı vardır.\nStandartlaştırılmış olduğu için korelasyonun birimi yoktur, birimsizdir.\nKorelasyon -1 ve +1 arasında değer alır.\nKorelasyon , ±1’e yakınsa, iki değişken yüksek oranda ilişkilidir ve bir saçılım grafiği üzerinde çizilirse, veri noktaları bir çizgi etrafında kümelenir.\nKorelasyon , ±1’den uzaksa, veri noktaları daha geniş bir alana dağılır.\nKorelasyon 0’a yakınsa, veri noktaları esasen yatay bir çizgi etrafında dağılır ve bu, değişkenler arasında neredeyse hiçbir doğrusal ilişki olmadığını gösterir.\nr=1 ise değişkenler arasında pozitif yönlü tam bir doğrusal ilişki vardır.\nr=-1 ise değişkenler arasında negatif (ters) yönlü tam bir doğrusal ilişki vardır.\nr=0 ise değişkenler arasında doğrusal ilişki yoktur.\nKorelasyon nedensel ilişki değildir.\nKorelasyon değişkenler arasındaki sebep sonuç ilişkilerini açıklamaz.\nKorelasyon matematiksel ilişkidir.\n\n\\[ r=\\frac{\\sum_{i=1}^n(x_i - \\bar{x})(y_i - \\bar{y})}{\\sqrt{\\sum_{i=1}^n(x_i-\\bar{x})^2}\\sqrt{\\sum_{i=1}^n(y_i-\\bar{y})^2}} = \\frac{s_{xy}}{s_xs_y} \\]\nİki değişken arasındaki doğrusal ilişkinin miktarı için açık bir sınıflandırma kuralı yoktur. Bununla birlikte, aşağıdaki tablo, Pearson çarpım momenti korelasyon katsayısının sayısal değerlerinin nasıl ele alınacağı konusunda temel bir fikir verebilir.\n\n\n\nKorelasyon Katsayısı (r)\nİlişkinin Derecesi\n\n\n\n\n\\(r &gt; 0.90\\)\nÇok kuvvetli\n\n\n\\(0.70 &lt; r\\le 0.90\\)\nKuvvetli\n\n\n\\(0.50 &lt; r\\le 0.70\\)\nOrta\n\n\n\\(0.30 &lt; r\\le 0.50\\)\nDüşük\n\n\n\\(r &lt; 0.30\\)\nZayıf\n\n\n\n\ncor(iris$Sepal.Length,iris$Petal.Length) # kuvvetli ilişki vardır.\n\n[1] 0.8717538\n\nplot(iris$Sepal.Length,iris$Petal.Length,\n     col=\"blue\",\n     xlab = \"Sepal\",\n     ylab = \"Petal\",\n     main = \"Sepal vs Petal Saçılım Grafiği\")\n\n\n\n\n\n\nKontenjans Katsayısı\nKontenjans katsayısı C, kategorik veriler için \\(\\chi 2\\) tabanlı bir ilişki ölçüsüdür. Bağımsızlık için \\(\\chi 2\\) testine dayanır. \\(\\chi 2\\) istatistiği, kontenjans durum tablolarındaki (iki yönlü tablo, çapraz tablo tablosu veya çapraz tablolar olarak da bilinir) değişkenler arasında istatistiksel bir ilişki olup olmadığını değerlendirmeyi sağlar. Bu tür tablolarda değişkenlerin dağılımı matris formatında gösterilir. İki nominal (kategorik) değişken arasında anlamlı bir ilişki olup olmadığını belirlemek için kullanılır.\n\\[ \\chi 2=\\sum\\frac{(G-B)^2}{B} \\]\nBurada G gözlemlenen frekansı ve B ise beklenen frekansı temsil eder . Ki-kare test istatistiği ile iki kategorik değişken arasında ilişki olup olmadığı araştırılır. Hipotez aşağıdaki gibi kurulur:\n\\(H_0:\\) Değişkenler arasında ilişki yoktur.\n\\(H_1:\\) Değişkenler arasında ilişki vardır.\nKontenjans katsayısı ise şu şekilde elde edilir:\n\\[ C=\\sqrt{\\frac{\\chi2}{n+\\chi2}} \\]\nBurada n satır ve sütun toplamlarını ifade eder. C katsayısı 0 ile 1 arasında bir değer alır. C=0 olması iki değişken arasında ilişki olmadığına, C=1 olması ile tam ilişkili olduğu anlamına gelir.\n\n# öğrencilerin sigara içme alışkanlığının egzersiz düzeyi ile ilişkili\n# olup olmadığını inceleyelim.\n\nlibrary(MASS)\nhead(survey)\n\n     Sex Wr.Hnd NW.Hnd W.Hnd    Fold Pulse    Clap Exer Smoke Height      M.I\n1 Female   18.5   18.0 Right  R on L    92    Left Some Never 173.00   Metric\n2   Male   19.5   20.5  Left  R on L   104    Left None Regul 177.80 Imperial\n3   Male   18.0   13.3 Right  L on R    87 Neither None Occas     NA     &lt;NA&gt;\n4   Male   18.8   18.9 Right  R on L    NA Neither None Never 160.00   Metric\n5   Male   20.0   20.0 Right Neither    35   Right Some Never 165.00   Metric\n6 Female   18.0   17.7 Right  L on R    64   Right Some Never 172.72 Imperial\n     Age\n1 18.250\n2 17.583\n3 16.917\n4 20.333\n5 23.667\n6 21.000\n\nnrow(survey)\n\n[1] 237\n\ntbl &lt;-  table(survey$Smoke, survey$Exer) \ntbl\n\n       \n        Freq None Some\n  Heavy    7    1    3\n  Never   87   18   84\n  Occas   12    3    4\n  Regul    9    1    7\n\n# 1.yol\nchisq.test(tbl) \n\nWarning in chisq.test(tbl): Chi-squared approximation may be incorrect\n\n\n\n    Pearson's Chi-squared test\n\ndata:  tbl\nX-squared = 5.4885, df = 6, p-value = 0.4828\n\n# 0.4828 p değeri .05 anlamlılık düzeyinden büyük olduğu için sigara \n# içme alışkanlığının öğrencilerin egzersiz düzeyinden bağımsız olduğu \n# sıfır hipotezini reddedemeyiz.\n\n# 2.yol\nsummary(tbl)\n\nNumber of cases in table: 236 \nNumber of factors: 2 \nTest for independence of all factors:\n    Chisq = 5.489, df = 6, p-value = 0.4828\n    Chi-squared approximation may be incorrect"
  },
  {
    "objectID": "regresyon.html",
    "href": "regresyon.html",
    "title": "9  Doğrusal Regresyon",
    "section": "",
    "text": "Basit doğrusal regresyon, iki nicel değişken arasındaki doğrusal ilişkiyi değerlendirmeye izin veren istatistiksel bir yaklaşımdır. Daha doğrusu, ilişkinin nicelleştirilmesini ve öneminin değerlendirilmesini sağlar. Çoklu doğrusal regresyon, bu yaklaşımın bir yanıt değişkeni (nicel) ile birkaç açıklayıcı değişken (nicel veya nitel) arasındaki doğrusal ilişkileri değerlendirmeyi mümkün kılması anlamında, basit doğrusal regresyonun bir genellemesidir.\nGerçek dünyada, çoklu doğrusal regresyon, basit doğrusal regresyondan daha sık kullanılır. Bu çoğunlukla böyledir çünkü, Çoklu doğrusal regresyon, diğer değişkenlerin etkisini kontrol ederken (yani etkiyi ortadan kaldırırken) iki değişken arasındaki ilişkiyi değerlendirmeye izin verir. Veri toplamanın da kolaylaşmasıyla, veriler analiz edilirken daha fazla değişken dahil edilebilir ve dikkate alınabilir.\nBasit doğrusal regresyon, iki değişken arasında doğrusal bir ilişkinin varlığını değerlendirmeye ve bu bağlantıyı nicelleştirmeye izin verir. Doğrusallığın, iki değişkenin doğrusal olarak bağımlı olup olmadığını test etmesi ve ölçmesi anlamında doğrusal regresyonda güçlü bir varsayım olduğuna dikkat etmek gerekmektedir.\nDoğrusal regresyonu güçlü bir istatistiksel araç yapan şey, açıklayıcı/bağımsız değişken bir birim arttığında yanıtın/bağımlı değişkenin hangi nicelikle değiştiğini ölçmeye izin vermesidir. Bu kavram doğrusal regresyonda anahtardır ve aşağıda verilen türde soruları yanıtlamaya yardımcı olur:\n\nReklama harcanan miktar ile belirli bir dönemdeki satışlar arasında bir bağlantı var mı?\nTütün vergilerindeki artış tüketimini azaltır mı?\nBölgeye bağlı olarak bir konutun en olası fiyatı nedir?\nBir kişinin bir uyarana tepki verme süresi cinsiyete bağlı mıdır?\n\nBasit doğrusal regresyon analizinde, bağımlı değişken y ile bağımsız değişken x arasındaki ilişki doğrusal bir denklem şeklinde verilir.\n\\[ y=\\beta_0+\\beta_1x \\]\nBurada, \\(\\beta_0\\) sayısına kesme noktası denir ve regresyon doğrusu ile y ekseninin (x=0) kesişme noktasını tanımlar. \\(\\beta_1\\) sayısına regresyon katsayısı denir. Regresyon doğrusu eğiminin bir ölçüsüdür. Böylece \\(\\beta_1\\), x değeri 1 birim arttığında y değerinin ne kadar değiştiğini gösterir. Model, x ve y arasında kesin bir ilişki verdiği için deterministik bir model olarak kabul edilir.\nAncak birçok durumda, iki değişken x ve y arasındaki ilişki kesin değildir. Bunun nedeni, bağımlı değişken y’nin, tahmin değişkeni x tarafından tam olarak yakalanmayan diğer bilinmeyen ve/veya rastgele süreçlerden etkilenmesidir. Böyle bir durumda veri noktaları düz bir çizgi üzerinde sıralanmaz. Bununla birlikte, veriler hala temeldeki doğrusal bir ilişkiyi takip edebilir. Bu bilinmeyenleri dikkate almak için lineer model denklemine \\(\\varepsilon\\) ile gösterilen rastgele bir hata terimi eklenir, böylece yukarıdaki deterministik modelin aksine olasılıklı bir model elde edilir.\n\\[ y=\\beta_0+\\beta_1x+\\varepsilon \\]\nBurada hata terimi \\(\\varepsilon_i\\)’nin bağımsız normal dağılımlı değerlerden oluştuğu varsayılır, \\(e_i\\)~\\(N(0,\\sigma^2)\\).\nDoğrusal regresyon modeli hakkında aşağıdaki varsayımlar yapılır:\n\nBağımlı değişken tesadüfi bir değişkendir ve normal dağılım göstermektedir.\nTahmin hataları tesadüfidir ve normal dağılım gösterirler.\nHatalar birbirinden bağımsızdır (otokorelasyon yoktur).\nHata varyansı sabittir ve veriler arasında hiç değişmediği varsayılır (eşit varyanslılık-homoscedasticity).\nEğer çoklu regresyon analizi yapılıyorsa, bağımsız değişkenlerin birbirleri ile bağlantısının olmaması gereklidir. Buna çoklu bağlantı (multicollinearity) olmaması varsayımı adı verilir.\nBağımlı değişken ile bağımsız değişkenler arasında doğrusal bir ilişki olmalıdır.\nGözlem sayısı parametre sayısından büyük olmalıdır.\n\n\n\n\n\n\n\nlibrary(gapminder)\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(ggplot2)\n\n# gapminder veri setine bakalım\n\nglimpse(gapminder)\n\nRows: 1,704\nColumns: 6\n$ country   &lt;fct&gt; \"Afghanistan\", \"Afghanistan\", \"Afghanistan\", \"Afghanistan\", …\n$ continent &lt;fct&gt; Asia, Asia, Asia, Asia, Asia, Asia, Asia, Asia, Asia, Asia, …\n$ year      &lt;int&gt; 1952, 1957, 1962, 1967, 1972, 1977, 1982, 1987, 1992, 1997, …\n$ lifeExp   &lt;dbl&gt; 28.801, 30.332, 31.997, 34.020, 36.088, 38.438, 39.854, 40.8…\n$ pop       &lt;int&gt; 8425333, 9240934, 10267083, 11537966, 13079460, 14880372, 12…\n$ gdpPercap &lt;dbl&gt; 779.4453, 820.8530, 853.1007, 836.1971, 739.9811, 786.1134, …\n\nsummary(gapminder)\n\n        country        continent        year         lifeExp     \n Afghanistan:  12   Africa  :624   Min.   :1952   Min.   :23.60  \n Albania    :  12   Americas:300   1st Qu.:1966   1st Qu.:48.20  \n Algeria    :  12   Asia    :396   Median :1980   Median :60.71  \n Angola     :  12   Europe  :360   Mean   :1980   Mean   :59.47  \n Argentina  :  12   Oceania : 24   3rd Qu.:1993   3rd Qu.:70.85  \n Australia  :  12                  Max.   :2007   Max.   :82.60  \n (Other)    :1632                                                \n      pop              gdpPercap       \n Min.   :6.001e+04   Min.   :   241.2  \n 1st Qu.:2.794e+06   1st Qu.:  1202.1  \n Median :7.024e+06   Median :  3531.8  \n Mean   :2.960e+07   Mean   :  7215.3  \n 3rd Qu.:1.959e+07   3rd Qu.:  9325.5  \n Max.   :1.319e+09   Max.   :113523.1  \n                                       \n\n# kişi başına milli gelir ile yaşam beklentisi değişkenlerini görselleştirelim.\n\nggplot(gapminder, aes(gdpPercap, lifeExp)) +\n  geom_point()\n\n\n\nggplot(gapminder, aes(gdpPercap, lifeExp)) +\n  geom_point() + \n  geom_smooth(method = \"lm\",se=TRUE)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n# regresyon modeli kuralım\n\nmodel1 &lt;- lm(lifeExp ~ gdpPercap, data = gapminder)\nmodel1\n\n\nCall:\nlm(formula = lifeExp ~ gdpPercap, data = gapminder)\n\nCoefficients:\n(Intercept)    gdpPercap  \n  5.396e+01    7.649e-04  \n\n\n\n\n\n\n\n\nYorum\n\n\n\nYani burada söyleyebileceğimiz şey, GSYİH’daki her 1 artış için, yaşam beklentisinde 0.0007649 yıllık bir artış görmeyi bekleyebiliriz. Modelimizi daha iyi anlayabilmek için model üzerinde summary() fonksiyonunu kullanabiliriz. Ayrıca artıkların normalliğini de bakmak da fayda var.\n\n\nsummary fonksiyonu ile modelimizin verilere ne kadar iyi uyduğu hakkında biraz daha bilgi alıyoruz. Genel modelimiz ve her değişken için p-değerlerini görebiliriz. \\(R^2\\) değeri, veri kümenizdeki varyansın ne kadarının modeliniz tarafından açıklanabileceğini temel olarak, modelinizin verilere ne kadar iyi uyduğunu gösterir. Bu değer 0 ile 1 arasında değişir ve büyük olması beklenir. Genel olarak, modelinizde kaç değişken kullandığınızı telafi eden düzeltilmiş \\(R^2\\)’yi kullanırız. Aksi halde başka bir değişken eklemek her zaman \\(R^2\\)’yi artırır.\n\nsummary(model1)\n\n\nCall:\nlm(formula = lifeExp ~ gdpPercap, data = gapminder)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-82.754  -7.758   2.176   8.225  18.426 \n\nCoefficients:\n             Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) 5.396e+01  3.150e-01  171.29   &lt;2e-16 ***\ngdpPercap   7.649e-04  2.579e-05   29.66   &lt;2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 10.49 on 1702 degrees of freedom\nMultiple R-squared:  0.3407,    Adjusted R-squared:  0.3403 \nF-statistic: 879.6 on 1 and 1702 DF,  p-value: &lt; 2.2e-16\n\n\nModele gdp değişkenin logaritmasını alarak ve continent (kıta) ve year (yıl) değişkenlerini de ekleyerek çoklu regresyon analizi sonuçlarına bakalım.\n\nmodel2 &lt;- lm(lifeExp ~ log(gdpPercap) + continent + year, data = gapminder)\nsummary(model2)\n\n\nCall:\nlm(formula = lifeExp ~ log(gdpPercap) + continent + year, data = gapminder)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-25.0433  -3.2175   0.3482   3.6657  15.1321 \n\nCoefficients:\n                    Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)       -4.659e+02  1.667e+01  -27.94   &lt;2e-16 ***\nlog(gdpPercap)     5.024e+00  1.595e-01   31.50   &lt;2e-16 ***\ncontinentAmericas  8.926e+00  4.630e-01   19.28   &lt;2e-16 ***\ncontinentAsia      7.063e+00  3.959e-01   17.84   &lt;2e-16 ***\ncontinentEurope    1.251e+01  5.097e-01   24.54   &lt;2e-16 ***\ncontinentOceania   1.275e+01  1.275e+00   10.00   &lt;2e-16 ***\nyear               2.416e-01  8.586e-03   28.14   &lt;2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 5.813 on 1697 degrees of freedom\nMultiple R-squared:  0.7982,    Adjusted R-squared:  0.7975 \nF-statistic:  1119 on 6 and 1697 DF,  p-value: &lt; 2.2e-16\n\n\n\n\n\n\n\n\nYorum\n\n\n\nBu sonuçlara göre \\(R^2\\) değeri 0.79’a yükselmiştir. Değişken sayısını artırmak model başarısını artırmış görünüyor. Ayrıca katsayıların hepsinin de anlamlı çıktığı göz ardı edilmemelidir.\nAfrika kıtası haricinde, veri kümemizdeki kıtaların her biri için bir satır var. Bunun sebebi Afrika kıtası referans kıta olarak burada belirlenmesinden kaynaklanmaktadır. Yani kıtalara göre verileri yorumlarken Afirika kıtasına göre değerlendirme yapılacaktır. Örneğin Avrupa’da olmak ortalama olarak, Afrika’da olmaktan 12.51 yıl daha fazla yaşam beklentisine sahip olmak anlamına gelmektedir.\n\n\n\n\n\n\n\n\nTavsiye\n\n\n\nModel sonuçlarının daha güzel ve temiz (tidy) bir formatta görünmesi için broom paketi kullanılabilir.\n\n\n\nlibrary(broom)\n\n# gözlem düzeyinde sonuçlar\naugment(model2)\n\n# A tibble: 1,704 × 10\n   lifeExp `log(gdpPercap)` continent  year .fitted .resid    .hat .sigma\n     &lt;dbl&gt;            &lt;dbl&gt; &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;  &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt;\n 1    28.8             6.66 Asia       1952    46.3  -17.5 0.00470   5.80\n 2    30.3             6.71 Asia       1957    47.8  -17.5 0.00425   5.80\n 3    32.0             6.75 Asia       1962    49.2  -17.2 0.00393   5.80\n 4    34.0             6.73 Asia       1967    50.3  -16.3 0.00380   5.80\n 5    36.1             6.61 Asia       1972    50.9  -14.8 0.00399   5.80\n 6    38.4             6.67 Asia       1977    52.4  -14.0 0.00393   5.81\n 7    39.9             6.89 Asia       1982    54.7  -14.9 0.00367   5.80\n 8    40.8             6.75 Asia       1987    55.2  -14.4 0.00422   5.80\n 9    41.7             6.48 Asia       1992    55.1  -13.4 0.00529   5.81\n10    41.8             6.45 Asia       1997    56.2  -14.4 0.00588   5.80\n# ℹ 1,694 more rows\n# ℹ 2 more variables: .cooksd &lt;dbl&gt;, .std.resid &lt;dbl&gt;\n\n#model düzeyinde sonuçlar\nglance(model2)\n\n# A tibble: 1 × 12\n  r.squared adj.r.squared sigma statistic p.value    df logLik    AIC    BIC\n      &lt;dbl&gt;         &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n1     0.798         0.797  5.81     1119.       0     6 -5414. 10843. 10887.\n# ℹ 3 more variables: deviance &lt;dbl&gt;, df.residual &lt;int&gt;, nobs &lt;int&gt;"
  }
]