[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "R Programlama",
    "section": "",
    "text": "Önsöz\nR programlama dili, veri bilimi dünyasında vazgeçilmez bir araç haline geldi. Bu kitap, veri manipülasyonundan görselleştirmeye, keşifçi veri analizinden temel istatistik konularına kadar geniş bir yelpazede R dilini kullanarak veri analizi becerilerinizi güçlendirmenize odaklanıyor.\nKitabımız, R programlama dilini temel seviyeden başlayarak adım adım öğrenmek isteyen herkes için tasarlandı. İlk bölümlerde R dilinin temellerini kavrayacak ve dplyr gibi güçlü paketler aracılığıyla veri manipülasyonunun inceliklerini keşfedeceksiniz. Veri analizinin görselleştirme aşamasında ggplot2 paketiyle nasıl etkileyici grafikler oluşturabileceğinizi adım adım öğrenecek ve veri setlerinizin hikayesini çarpıcı görsellerle anlatacaksınız.\nKitabımız, keşifçi veri analizi sürecinde size rehberlik ederken, veri işleme tekniklerini ve önemli istatistik kavramlarını pratik örneklerle ele alacak. Temel istatistik kolları üzerine odaklanarak, veri setlerinizdeki deseni anlamak ve çözümlemek için gerekli araçları edineceksiniz. Ayrıca doğrusal regresyon gibi önemli modelleme tekniklerini R dilinde nasıl uygulayabileceğinizi adım adım öğreneceksiniz.\nBu kitabın amacı, R programlama dilini veri analizi süreçlerinizde güvenle kullanmanıza yardımcı olmak ve veri odaklı kararlar almanızı desteklemektir. Bilgi birikiminizi genişletirken öğrendiklerinizi uygulamaya dökme şansına sahip olacaksınız. Umarım bu kitap, veri analizi yolculuğunuzda size rehberlik eder ve R dilini kullanarak veriyle olan etkileşiminizi daha da derinleştirir."
  },
  {
    "objectID": "r_about.html#r-programı-ile-neler-yapılabilir",
    "href": "r_about.html#r-programı-ile-neler-yapılabilir",
    "title": "R Programlama Hakkında",
    "section": "R Programı ile Neler Yapılabilir",
    "text": "R Programı ile Neler Yapılabilir\nR, açık kaynaklı bir programlama dili ve yazılım ortamıdır, bu da onu geniş bir kullanıcı topluluğu tarafından desteklenen ve geliştirilen bir platform yapar. R ile yapılabilecek başlıca işler şunlardır:\n\nVeri Analizi: R, veri çerçeveleri ve veri setleri üzerinde işlem yapmak için bir dizi fonksiyon ve araç sunar. Veri temizleme, dönüştürme, özeti alma ve analiz etme işlemleri R ile kolayca gerçekleştirilebilir.\nVeri Görselleştirme: R, ggplot2 gibi grafik paketleri ile verilerinizi görselleştirmenize olanak tanır. Çeşitli grafik türleri (çizgi grafikleri, sütun grafikleri, dağılım grafikleri vb.) oluşturabilirsiniz.\nİstatistiksel Analiz: R, istatistiksel modelleri oluşturmak, hipotez testleri yapmak ve regresyon analizi gibi istatistiksel analizler gerçekleştirmek için zengin bir araç seti sunar. Ayrıca zaman serisi analizi ve kümeleme gibi konularda da kullanılır.\nVeri Madenciliği: R, veri madenciliği uygulamaları için kullanılabilir. Makine öğrenimi algoritmaları uygulamak ve veri madenciliği projeleri geliştirmek için paketler içerir.\nRaporlama: R Markdown kullanarak veri analizi ve sonuçlarını raporlama için kullanılır. Bu, anlamlı ve formatlı raporlar oluşturmanıza yardımcı olur.\nPaketler ve Genişletilebilirlik: R, kullanıcıların işlevselliği genişletmek için paketler ekleyebileceği bir sistem sunar. CRAN (Comprehensive R Archive Network) gibi kaynaklar, binlerce paketi içeren bir depo sağlar.\n\n\n\n\n\n\n\nNot\n\n\n\nR programlama özellikle istatistik, veri bilimi ve akademik araştırmalar alanlarında çok kullanılır, ancak endüstriyel uygulamalarda da giderek daha fazla kullanılmaktadır. R’nin açık kaynaklı olması ve geniş bir kullanıcı topluluğuna sahip olması, bu dilin popülerliğini artırmıştır. R ile çalışmak için temel programlama bilgisine sahip olmak yararlı olacaktır, ancak öğrenmesi oldukça erişilebilir bir dildir ve çevrimiçi kaynaklar ve kurslar mevcuttur."
  },
  {
    "objectID": "r_about.html#r-programlama-ile-ilgili-faydalı-kaynaklar",
    "href": "r_about.html#r-programlama-ile-ilgili-faydalı-kaynaklar",
    "title": "R Programlama Hakkında",
    "section": "R Programlama ile ilgili Faydalı Kaynaklar",
    "text": "R Programlama ile ilgili Faydalı Kaynaklar\nR programlamayı öğrenmek ve geliştirmek için bir dizi faydalı kaynak bulunmaktadır. R programlamaya başlamak veya ilerlemek için kullanabileceğiniz bazı kaynaklar:\n\nResmi R Web Sitesi: R’nin resmi web sitesi (https://www.r-project.org/) R programlamaya başlamak için temel kaynaktır. Burada R’nin indirilmesi, kurulumu ve temel belgelendirme bilgilerine erişebilirsiniz.\nRStudio: R programlama için yaygın olarak kullanılan RStudio IDE’si (Entegre Geliştirme Ortamı), R kodlarını yazmak, çalıştırmak ve yönetmek için güçlü bir araçtır. RStudio’nun resmi web sitesi (https://www.rstudio.com/) RStudio’nun indirilmesi ve kullanımı hakkında bilgi sunar.\nR Dersleri ve Kurslar: İnternette birçok ücretsiz R dersi ve kursu bulabilirsiniz. Coursera, edX, Udemy ve DataCamp gibi platformlar, R programlamayı öğrenmek için çeşitli kurslar sunmaktadır.\nR Belgeleri: R’nin resmi belgeleme (https://cran.r-project.org/manuals.html) kaynakları, R dilinin temellerini ve paketlerini öğrenmek için çok faydalıdır. R’deki komutlar ve fonksiyonlar hakkında ayrıntılı bilgi içerirler.\nKitaplar: R programlamayı öğrenmek için yazılmış birçok kitap bulunmaktadır. Örnek olarak, “R Graphics Cookbook” (Hadley Wickham), “R for Data Science” (Hadley Wickham ve Garrett Grolemund), “Advanced R” (Hadley Wickham) gibi kitaplar önerilebilir.\nStack Overflow: Programlama sorunları ve hatalarıyla karşılaştığınızda, Stack Overflow gibi forumlarda R ile ilgili sorular sormak ve cevaplamak için topluluktan yardım alabilirsiniz.\nGitHub: R ile ilgili açık kaynaklı projeleri incelemek ve kendi projelerinizi paylaşmak için GitHub gibi platformları kullanabilirsiniz. GitHub’da R kodlarını içeren birçok depo bulunmaktadır.\nBloglar ve Videolar: R ile ilgili bloglar ve YouTube kanalları, öğrenmek ve güncel kalmak için harika kaynaklardır. RStudio Blog (https://blog.rstudio.com/) ve YouTube’da R ile ilgili videoları bulabileceğiniz RStudio’nun resmi kanalı bunlara örnektir.\n\n\n\n\n\n\n\nTavsiye\n\n\n\nR programlamayı öğrenmek ve geliştirmek için sürekli olarak yeni kaynaklar ve materyaller üretilmektedir. İhtiyacınıza ve seviyenize uygun kaynakları seçmek için zaman ayırın ve kendi hızınıza göre öğrenmeye devam edin."
  },
  {
    "objectID": "r_about.html#r-ve-rstudionun-bilgisayara-kurulması",
    "href": "r_about.html#r-ve-rstudionun-bilgisayara-kurulması",
    "title": "R Programlama Hakkında",
    "section": "R ve RStudio’nun Bilgisayara Kurulması",
    "text": "R ve RStudio’nun Bilgisayara Kurulması\nR’ın internet sitesinden işletim sisteminize uygun programı indirip kurabilirsiniz. Linux, Mac OS ve Windows işletim sistemleri için sürümleri mevcuttur.\nWindows İşletim Sistemi İçin R Kurulumu\n\nR programını indirmek için R resmi web sitesini ziyaret edin: https://cran.r-project.org/\nSayfanın üst kısmında “Download R for Windows” başlığını bulun ve tıklayın.\n\nİndirilen sayfada “base” sekmesine tıklayın.\n\nAçılan sayfada “Download R 4.3.1 for Windows” linkine tıklayın ve dosyayı indirin.\n\n\n\n\n\n\n\nDikkat\n\n\n\nSayfayı ziyaret ettiğiniz tarihlerde farklı sürümlerin olabileceğine dikkat edin. Örneğin ileri bir tarihte bu sayfayı ziyaret ettiğinizde R programının yeni sürümü ile karşılabilirsiniz. O yüzden sürüm bilgisi değişkenlik gösterebilir.\n\n\nİndirilen dosyayı çift tıklayarak çalıştırın ve yükleyiciyi başlatın.\nYükleyici, R’nin temel sürümünü yüklemek için sizi yönlendirecektir. Varsayılan ayarları genellikle kabul edebilirsiniz.\nKurulum tamamlandığında, R’yi çalıştırmak için masaüstünüzde veya Başlat menüsünde “R” simgesini bulabilirsiniz.\n\nWindows İşletim Sistemi İçin R Studio Kurulumu\nR editörü grafiksel bir arayüz olmayıp eski tip bir yazılım konsoludur. R Studio, R programlama dili için geliştirilmiş entegre bir geliştirme ortamı (IDE) ve arayüzüdür. R Studio, R kodlarını daha verimli bir şekilde yazmanıza, çalıştırmanıza ve yönetmenize olanak tanıyan daha modern ve kullanışlı bir arayüz sunmaktadır. Ayrıca veri analizi, görselleştirme ve raporlama işlemleri için güçlü bir platform sunar. R Studio, açık kaynak bir projedir ve ücretsiz olarak kullanılabilir.\nR Studio’nun kurulumu aşağıdaki adımlarla gerçekleştirilebilir:\n\nR Studio’nun en son sürümünü indirmek için aşağıdaki bağlantıyı kullanın: https://www.rstudio.com/products/rstudio/download/\nSayfada “Download RStudio Desktop for Windows” kısmına tıklayın ve indirmeyi başlatın.\n\nİndirilen dosyayı çift tıklayarak çalıştırın ve kurulumu başlatın. Kurulum sırasında varsayılan ayarları genellikle kabul edebilirsiniz.\nKurulum tamamlandığında, R Studio’yu başlatmak için masaüstünüzde veya Başlat menüsünde “RStudio” simgesini bulabilirsiniz."
  },
  {
    "objectID": "r_about.html#r-studio-kişiselleştirme",
    "href": "r_about.html#r-studio-kişiselleştirme",
    "title": "R Programlama Hakkında",
    "section": "R Studio Kişiselleştirme",
    "text": "R Studio Kişiselleştirme\n\nRStudio, kullanıcıların ihtiyaçlarına göre kişiselleştirilebilen bir entegre geliştirme ortamı (IDE) sunar. RStudio’yu kişiselleştirmek için aşağıdaki yolları kullanabilirsiniz:\n\nR Studio Arayüzündeki Alanları Değiştirme: Resimde görüldüğü gibi yeni bir R Script açıldığı takdirde arayüzde 4 farklı alan görülmektedir. Bu alanlar isteğe göre yer değiştirilebilmektedir. Bunun için “Tools” (Araçlar) menüsünden “Global Options” (Genel Ayarlar) sekmesi açılır. Buradan “Pane Layout” kısmından istenilen ayarlar yapılabilir.\nTemayı ve Editör Stilini Değiştirme: RStudio’nun görünümünü değiştirmek için birçok tema ve editör stilini seçebilirsiniz. Bu, yazılım geliştirme ortamınızın daha hoş veya kullanışlı olmasını sağlar. “Tools” (Araçlar) menüsünden “Global Options” (Genel Ayarlar) sekmesini seçerek bu ayarları değiştirebilirsiniz.\nKlavye Kısayollarını Kişiselleştirme: RStudio’da kullanılan klavye kısayollarını özelleştirebilirsiniz. “Tools” (Araçlar) menüsünden “Modify Keyboard Shortcuts” (Klavye Kısayollarını Düzenle) seçeneğini kullanarak klavye kısayollarını tanımlayabilir veya değiştirebilirsiniz.\nEklentileri ve Paketleri Kullanma: RStudio, kullanıcıların işlevselliği genişletmek için eklentileri ve R paketlerini kullanmalarını sağlar. Bu paketler, kod otomatik tamamlama, kod görselleştirme, proje yönetimi gibi birçok işlemi kolaylaştırabilir. R Studio’nun sol üst köşesindeki “Tools” (Araçlar) menüsünden “Install Packages” (Paketleri Yükle) seçeneği ile yeni paketleri yükleyebilirsiniz.\nR Markdown Belgelerini Özelleştirme: R Markdown belgeleri, raporlar ve belgeler oluşturmak için kullanılır. Bu belgeleri kişiselleştirebilirsiniz. R Markdown belgelerinin başlık, stil, tablo düzeni ve grafikler gibi birçok yönünü özelleştirebilirsiniz.\nProje Ayarlarını Yapılandırma: RStudio’da projeler kullanmak, projelerinizi daha düzenli ve etkili bir şekilde yönetmenize yardımcı olabilir. “File” (Dosya) menüsünden “New Project” (Yeni Proje) seçeneği ile yeni projeler oluşturabilir ve projelerinizi kişiselleştirebilirsiniz.\nKod Tarayıcı ve Çalışma Ortamını Özelleştirme: RStudio’nun sağ tarafında bulunan “Environment” (Çalışma Ortamı) ve “Files” (Dosyalar) sekmelerini özelleştirebilirsiniz. Bu sekmeleri dilediğiniz gibi düzenleyebilirsiniz.\nAddins Kullanma: RStudio’nun “Addins” (Eklentiler) menüsü, kullanıcıların özel işlevleri ekleyebileceği bir bölümdür. Bu sayede belirli işlemleri hızlıca gerçekleştirebilirsiniz.\n\nRStudio’nun bu kişiselleştirme seçenekleri, kullanıcıların kendi ihtiyaçlarına ve tercihlerine göre IDE’yi özelleştirmelerine olanak tanır. Bu şekilde, RStudio’yu daha verimli ve kişiselleştirilmiş bir şekilde kullanabilirsiniz. RStudio’nun ana bileşenleri ve temel özellikleri ise şunlardır:\n\nScript Editörü: RStudio’nun sol üst kısmında yer alan bu bölüm, R kodlarını yazmak, düzenlemek ve çalıştırmak için kullanılır. Renk vurguları, otomatik tamamlama ve hata işaretleme gibi birçok yazılım geliştirme özelliği içerir.\nEnvironment (Çalışma Ortamı) : Sağ üst köşede bulunan “Çalışma Ortamı” sekmesi, çalışan nesneleri ve değişkenleri görüntülemenizi sağlar. “Files” sekmesi ise projenizdeki dosyaları ve klasörleri görüntülemenize yardımcı olur.\nConsole: Alt sol köşede bulunan bu bölüm, R kodlarını anlık olarak çalıştırmanıza ve sonuçları görmesinize olanak tanır. R komutlarını doğrudan konsola yazabilir ve çalıştırabilirsiniz.\nDiğer Sekmeler : RStudio, çeşitli grafikler ve görselleştirmeler oluşturmanıza olanak tanır. R koduyla çizilen grafikler, “Plots” sekmesinde görüntülenir. Bunu yanısıra “Help” kısmında fonksiyonlar ile ilgili bilgi alınabilir,”Packages” kısmından ise paket yükleme vb. işler yapılabilir."
  },
  {
    "objectID": "r_intro.html",
    "href": "r_intro.html",
    "title": "R Programlamaya Giriş",
    "section": "",
    "text": "R kodunun çalıştırılması oldukça basittir ve R Studio gibi entegre geliştirme ortamları (IDE’ler) kullanırken daha da kolaylaşır. R kodunu çalıştırmak için temel adımlar:\n\nR Studio’yu Açın: İlk adım, R Studio veya başka bir R IDE’sini açmaktır.\nYeni Bir script uluşturun veya mevcut bir script kullanın:\n\nR Studio’da, sol üst köşede bulunan “File” (Dosya) menüsünden “New Script”seçeneği ile yeni bir R scripti oluşturabilirsiniz.\nMevcut bir scripte gitmek istiyorsanız, “File” menüsünden “Open Script” seçeneğini kullanabilirsiniz.\n\nR Kodunu Scripte Yazın: Oluşturduğunuz veya açtığınız R skriptinde, R kodlarını yazın veya yapıştırın. Örneğin, basit bir hesaplama yapmak için aşağıdaki kodu kullanabilirsiniz:\n\nx &lt;- 5\ny &lt;- 10\nz &lt;- x + y\nz\n\n[1] 15\n\n\nKodu Çalıştırma:\n\nÇalıştırmak istediğiniz kodu seçin veya imleci çalıştırmak istediğiniz satıra getirin.\nÇalıştırma işlemi için aşağıdaki yöntemlerden birini kullanabilirsiniz:\n\nKlavyede varsayılan olarak “Ctrl+Enter” (Windows/Linux) veya “Command+Enter” (Mac) tuş kombinasyonunu kullanabilirsiniz.\nR Studio’daki “Run” (Çalıştır) düğmesini veya “Run” (Çalıştır) menüsünü kullanabilirsiniz.\nÇalıştırmak istediğiniz kodu seçtikten sonra sağ tıklarsanız, “Run” (Çalıştır) seçeneğini göreceksiniz.\n\n\nSonuçları İnceleyin: Çalıştırılan kodun sonuçları konsol penceresinde veya çıktı bölümünde görüntülenir. Örneğin, yukarıdaki örnekte “z” değişkeninin değeri olan “15” sonucunu göreceksiniz.\n\n\n\n\n\n\n\nDikkat\n\n\n\nBir script üzerinden çalıştırılan R kodunun sonuçlarını sol alt kısımda yer alan Console bölümünde görebilirsiniz. Aynı şekilde kodu Console bölümüne yazıp Enter tuşuna bastığınızda yine sonuç alabilirsiniz. Ancak script içerisinde yazılan kodları bir .R uzantılı dosya olarak saklama ve daha sonradan bu dosyaya ulaşma şansınız varken, Console ile çalıştırılan kodları bir .R dosyası olarak saklama şansınız yoktur. Console tarafındaki sonuçlar geçici olarak ekranda kalır ve R Studio’yu kapatıp açtığınızda tekrar yazdığınız ve çalıştırdığınız kodlara ulaşamayabilirsiniz.\n\n\n\n\n\n\n\n\nİpucu\n\n\n\nConsole tarafına yansıyan kodların ve sonuçların farklı formatlarda saklama şansımız vardır. Bunun için sink fonksiyonunu araştırmanızı önerebilirim."
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "2  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "2  Introduction",
    "section": "",
    "text": "This is a book created from markdown and executable code.\nSee @knuth84 for additional discussion of literate programming.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "data_manipulation.html",
    "href": "data_manipulation.html",
    "title": "Veri Manipulasyonu",
    "section": "",
    "text": "Veri manipülasyonu, veri çerçeveleri üzerinde verileri dönüştürmek, filtrelemek, birleştirmek veya yeniden düzenlemek gibi işlemleri içeren önemli bir veri bilimi becerisidir. R programlama dili, veri manipülasyonu için oldukça güçlü ve esnek bir araç sunar. Bu yazıda, R kullanarak veri manipülasyonunu nasıl yapabileceğinizi öğreneceğiz.\nVeri manipülasyonu için R’da yaygın olarak kullanılan iki ana kavram, “veri çerçeveleri” ve “paketler”dir. Veri çerçeveleri, verileri tablo şeklinde düzenleyen ve işleyen veri yapılarıdır. R’da veri çerçeveleri, data.frame türünden nesnelerdir. Veri manipülasyonu için kullanabileceğiniz birçok paket vardır, ancak en yaygın kullanılanlar arasında dplyr ve tidyr bulunur. Bu paketler, veri manipülasyonunu kolaylaştırmak için bir dizi işlev içerir.\ndplyr, RStudio’dan Hadley Wickham tarafından geliştirilmiş ve en yaygın veri işleme zorluklarını çözmenize yardımcı olan bir veri işleme dilbilgisidir. dplyr paketi, devtools paketi ve install_github() fonksiyonu kullanılarak CRAN’dan veya GitHub’dan kurulabilir. GitHub deposu genellikle paketteki en son güncellemeleri ve geliştirme sürümünü içerir.\nCRAN sayfasından yüklemek için;\n&gt; install.packages(\"dplyr\")\nGitHub sayfasından yüklemek için;\n&gt; install_github(\"hadley/dplyr\")\ndplyr paketinde sıklıkla kullanılan fonksiyonlar şunlardır:\n\nselect : veri çerçevesinden istenilen sütunları seçer.\nfilter : mantıksal koşullara dayalı olarak bir veri çerçevesinden satırları filtreler.\narrange : satıları sıralar.\nrename : sütun isimlerini yeniden isimlendirir.\nmutate : yeni değişkenler/sütunlar ekler veya mevcut değişkenleri dönüştürür.\nsummarise/ summarize : veri çerçevesindeki farklı değişkenlerin özet istatistiklerini oluşturur\n%&gt;% (pipe) operatörü birden çok eylemi ardışık düzende zincirleme şekilde birbirine bağlamak için kullanılır.\n\nVeri manipülasyonu ile örnekler bazen küçük veri setleri oluşturulacaktır bazen de 2015 yılı ABD nüfus sayımına ilişkin counties veri seti kullanılacaktır. Bu veri setinde eyalet ve şehir detayında nüfus, gelir, ırk, coğrafi yapı, işgücü gibi değişkenler yer almaktadır.\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\ncounties &lt;- readRDS(\"datasets/counties.rds\")\n\n# veri setinin yapısı hakkında bilgi sağlar\nglimpse(counties)\n\nRows: 3,138\nColumns: 40\n$ census_id          &lt;chr&gt; \"1001\", \"1003\", \"1005\", \"1007\", \"1009\", \"1011\", \"10…\n$ state              &lt;chr&gt; \"Alabama\", \"Alabama\", \"Alabama\", \"Alabama\", \"Alabam…\n$ county             &lt;chr&gt; \"Autauga\", \"Baldwin\", \"Barbour\", \"Bibb\", \"Blount\", …\n$ region             &lt;chr&gt; \"South\", \"South\", \"South\", \"South\", \"South\", \"South…\n$ metro              &lt;chr&gt; \"Metro\", \"Metro\", \"Nonmetro\", \"Metro\", \"Metro\", \"No…\n$ population         &lt;dbl&gt; 55221, 195121, 26932, 22604, 57710, 10678, 20354, 1…\n$ men                &lt;dbl&gt; 26745, 95314, 14497, 12073, 28512, 5660, 9502, 5627…\n$ women              &lt;dbl&gt; 28476, 99807, 12435, 10531, 29198, 5018, 10852, 603…\n$ hispanic           &lt;dbl&gt; 2.6, 4.5, 4.6, 2.2, 8.6, 4.4, 1.2, 3.5, 0.4, 1.5, 7…\n$ white              &lt;dbl&gt; 75.8, 83.1, 46.2, 74.5, 87.9, 22.2, 53.3, 73.0, 57.…\n$ black              &lt;dbl&gt; 18.5, 9.5, 46.7, 21.4, 1.5, 70.7, 43.8, 20.3, 40.3,…\n$ native             &lt;dbl&gt; 0.4, 0.6, 0.2, 0.4, 0.3, 1.2, 0.1, 0.2, 0.2, 0.6, 0…\n$ asian              &lt;dbl&gt; 1.0, 0.7, 0.4, 0.1, 0.1, 0.2, 0.4, 0.9, 0.8, 0.3, 0…\n$ pacific            &lt;dbl&gt; 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0…\n$ citizens           &lt;dbl&gt; 40725, 147695, 20714, 17495, 42345, 8057, 15581, 88…\n$ income             &lt;dbl&gt; 51281, 50254, 32964, 38678, 45813, 31938, 32229, 41…\n$ income_err         &lt;dbl&gt; 2391, 1263, 2973, 3995, 3141, 5884, 1793, 925, 2949…\n$ income_per_cap     &lt;dbl&gt; 24974, 27317, 16824, 18431, 20532, 17580, 18390, 21…\n$ income_per_cap_err &lt;dbl&gt; 1080, 711, 798, 1618, 708, 2055, 714, 489, 1366, 15…\n$ poverty            &lt;dbl&gt; 12.9, 13.4, 26.7, 16.8, 16.7, 24.6, 25.4, 20.5, 21.…\n$ child_poverty      &lt;dbl&gt; 18.6, 19.2, 45.3, 27.9, 27.2, 38.4, 39.2, 31.6, 37.…\n$ professional       &lt;dbl&gt; 33.2, 33.1, 26.8, 21.5, 28.5, 18.8, 27.5, 27.3, 23.…\n$ service            &lt;dbl&gt; 17.0, 17.7, 16.1, 17.9, 14.1, 15.0, 16.6, 17.7, 14.…\n$ office             &lt;dbl&gt; 24.2, 27.1, 23.1, 17.8, 23.9, 19.7, 21.9, 24.2, 26.…\n$ construction       &lt;dbl&gt; 8.6, 10.8, 10.8, 19.0, 13.5, 20.1, 10.3, 10.5, 11.5…\n$ production         &lt;dbl&gt; 17.1, 11.2, 23.1, 23.7, 19.9, 26.4, 23.7, 20.4, 24.…\n$ drive              &lt;dbl&gt; 87.5, 84.7, 83.8, 83.2, 84.9, 74.9, 84.5, 85.3, 85.…\n$ carpool            &lt;dbl&gt; 8.8, 8.8, 10.9, 13.5, 11.2, 14.9, 12.4, 9.4, 11.9, …\n$ transit            &lt;dbl&gt; 0.1, 0.1, 0.4, 0.5, 0.4, 0.7, 0.0, 0.2, 0.2, 0.2, 0…\n$ walk               &lt;dbl&gt; 0.5, 1.0, 1.8, 0.6, 0.9, 5.0, 0.8, 1.2, 0.3, 0.6, 1…\n$ other_transp       &lt;dbl&gt; 1.3, 1.4, 1.5, 1.5, 0.4, 1.7, 0.6, 1.2, 0.4, 0.7, 1…\n$ work_at_home       &lt;dbl&gt; 1.8, 3.9, 1.6, 0.7, 2.3, 2.8, 1.7, 2.7, 2.1, 2.5, 1…\n$ mean_commute       &lt;dbl&gt; 26.5, 26.4, 24.1, 28.8, 34.9, 27.5, 24.6, 24.1, 25.…\n$ employed           &lt;dbl&gt; 23986, 85953, 8597, 8294, 22189, 3865, 7813, 47401,…\n$ private_work       &lt;dbl&gt; 73.6, 81.5, 71.8, 76.8, 82.0, 79.5, 77.4, 74.1, 85.…\n$ public_work        &lt;dbl&gt; 20.9, 12.3, 20.8, 16.1, 13.5, 15.1, 16.2, 20.8, 12.…\n$ self_employed      &lt;dbl&gt; 5.5, 5.8, 7.3, 6.7, 4.2, 5.4, 6.2, 5.0, 2.8, 7.9, 4…\n$ family_work        &lt;dbl&gt; 0.0, 0.4, 0.1, 0.4, 0.4, 0.0, 0.2, 0.1, 0.0, 0.5, 0…\n$ unemployment       &lt;dbl&gt; 7.6, 7.5, 17.6, 8.3, 7.7, 18.0, 10.9, 12.3, 8.9, 7.…\n$ land_area          &lt;dbl&gt; 594.44, 1589.78, 884.88, 622.58, 644.78, 622.81, 77…"
  },
  {
    "objectID": "select.html",
    "href": "select.html",
    "title": "3  select",
    "section": "",
    "text": "Tabloyu (veri çerçevesi) seçmek ve dönüştürmek için R’da dplyr paketinde bulunan select() fonksiyonu oldukça kullanışlıdır. Bu fonksiyon, belirli sütunları seçmek veya sütun adlarını değiştirmek için kullanılır. select() fonksiyonunu kullanarak veri çerçevesinde sütunları seçme ve dönüştürme işlemlerinin nasıl yapıldığına dair aşağıda örnekler mevcuttur.\n\n\n\n\n\n\nNot\n\n\n\nselect() fonksiyonu ayrıca sütunları seçerken veya döndürürken bazı özel işlevler de kullanmanıza olanak tanır. Örneğin, starts_with(), ends_with(), contains() gibi işlevleri kullanarak sütun adlarının belirli bir örüntüyü karşılayanları seçebilirsiniz. Bu fonksiyon, veri manipülasyonu işlemlerinde oldukça kullanışlıdır ve veri çerçevelerini istediğiniz şekilde özelleştirmenize yardımcı olur.\n\n\n\n# library(dplyr)\n# counties &lt;- readRDS(\"datasets/counties.rds\")\n\n# belirli sütunları seçmek \ncounties %&gt;% select(state, county, population, unemployment)  \n\n# A tibble: 3,138 × 4\n   state   county   population unemployment\n   &lt;chr&gt;   &lt;chr&gt;         &lt;dbl&gt;        &lt;dbl&gt;\n 1 Alabama Autauga       55221          7.6\n 2 Alabama Baldwin      195121          7.5\n 3 Alabama Barbour       26932         17.6\n 4 Alabama Bibb          22604          8.3\n 5 Alabama Blount        57710          7.7\n 6 Alabama Bullock       10678         18  \n 7 Alabama Butler        20354         10.9\n 8 Alabama Calhoun      116648         12.3\n 9 Alabama Chambers      34079          8.9\n10 Alabama Cherokee      26008          7.9\n# ℹ 3,128 more rows\n\n# belli aralıkta bütün sütunların seçilmesi \ncounties %&gt;% select(state, county, drive:work_at_home)  \n\n# A tibble: 3,138 × 8\n   state   county   drive carpool transit  walk other_transp work_at_home\n   &lt;chr&gt;   &lt;chr&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;        &lt;dbl&gt;\n 1 Alabama Autauga   87.5     8.8     0.1   0.5          1.3          1.8\n 2 Alabama Baldwin   84.7     8.8     0.1   1            1.4          3.9\n 3 Alabama Barbour   83.8    10.9     0.4   1.8          1.5          1.6\n 4 Alabama Bibb      83.2    13.5     0.5   0.6          1.5          0.7\n 5 Alabama Blount    84.9    11.2     0.4   0.9          0.4          2.3\n 6 Alabama Bullock   74.9    14.9     0.7   5            1.7          2.8\n 7 Alabama Butler    84.5    12.4     0     0.8          0.6          1.7\n 8 Alabama Calhoun   85.3     9.4     0.2   1.2          1.2          2.7\n 9 Alabama Chambers  85.1    11.9     0.2   0.3          0.4          2.1\n10 Alabama Cherokee  83.9    12.1     0.2   0.6          0.7          2.5\n# ℹ 3,128 more rows\n\n# belirli bir ifadeyi içeren sütunları seçmek \ncounties %&gt;% select(state, county, contains(\"employed\"))  \n\n# A tibble: 3,138 × 4\n   state   county   employed self_employed\n   &lt;chr&gt;   &lt;chr&gt;       &lt;dbl&gt;         &lt;dbl&gt;\n 1 Alabama Autauga     23986           5.5\n 2 Alabama Baldwin     85953           5.8\n 3 Alabama Barbour      8597           7.3\n 4 Alabama Bibb         8294           6.7\n 5 Alabama Blount      22189           4.2\n 6 Alabama Bullock      3865           5.4\n 7 Alabama Butler       7813           6.2\n 8 Alabama Calhoun     47401           5  \n 9 Alabama Chambers    13689           2.8\n10 Alabama Cherokee    10155           7.9\n# ℹ 3,128 more rows\n\n# belirli bir ifade ile başyalan sütunları seçmek \ncounties %&gt;% select(state, county, starts_with(\"income\"))  \n\n# A tibble: 3,138 × 6\n   state   county   income income_err income_per_cap income_per_cap_err\n   &lt;chr&gt;   &lt;chr&gt;     &lt;dbl&gt;      &lt;dbl&gt;          &lt;dbl&gt;              &lt;dbl&gt;\n 1 Alabama Autauga   51281       2391          24974               1080\n 2 Alabama Baldwin   50254       1263          27317                711\n 3 Alabama Barbour   32964       2973          16824                798\n 4 Alabama Bibb      38678       3995          18431               1618\n 5 Alabama Blount    45813       3141          20532                708\n 6 Alabama Bullock   31938       5884          17580               2055\n 7 Alabama Butler    32229       1793          18390                714\n 8 Alabama Calhoun   41703        925          21374                489\n 9 Alabama Chambers  34177       2949          21071               1366\n10 Alabama Cherokee  36296       1710          21811               1556\n# ℹ 3,128 more rows\n\n# belirli bir ifade ile biten sütunları seçmek \ncounties %&gt;% select(state, county, ends_with(\"work\"))  \n\n# A tibble: 3,138 × 5\n   state   county   private_work public_work family_work\n   &lt;chr&gt;   &lt;chr&gt;           &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;\n 1 Alabama Autauga          73.6        20.9         0  \n 2 Alabama Baldwin          81.5        12.3         0.4\n 3 Alabama Barbour          71.8        20.8         0.1\n 4 Alabama Bibb             76.8        16.1         0.4\n 5 Alabama Blount           82          13.5         0.4\n 6 Alabama Bullock          79.5        15.1         0  \n 7 Alabama Butler           77.4        16.2         0.2\n 8 Alabama Calhoun          74.1        20.8         0.1\n 9 Alabama Chambers         85.1        12.1         0  \n10 Alabama Cherokee         73.1        18.5         0.5\n# ℹ 3,128 more rows\n\n# belirli sütunları hariç tutarak seçmek \ncounties %&gt;% select(census_id:population,-c(men:land_area))  \n\n# A tibble: 3,138 × 6\n   census_id state   county   region metro    population\n   &lt;chr&gt;     &lt;chr&gt;   &lt;chr&gt;    &lt;chr&gt;  &lt;chr&gt;         &lt;dbl&gt;\n 1 1001      Alabama Autauga  South  Metro         55221\n 2 1003      Alabama Baldwin  South  Metro        195121\n 3 1005      Alabama Barbour  South  Nonmetro      26932\n 4 1007      Alabama Bibb     South  Metro         22604\n 5 1009      Alabama Blount   South  Metro         57710\n 6 1011      Alabama Bullock  South  Nonmetro      10678\n 7 1013      Alabama Butler   South  Nonmetro      20354\n 8 1015      Alabama Calhoun  South  Metro        116648\n 9 1017      Alabama Chambers South  Nonmetro      34079\n10 1019      Alabama Cherokee South  Nonmetro      26008\n# ℹ 3,128 more rows\n\n# belirli veri tipindeki sütunları seçmek \ncounties %&gt;% select(where(is.character))  \n\n# A tibble: 3,138 × 5\n   census_id state   county   region metro   \n   &lt;chr&gt;     &lt;chr&gt;   &lt;chr&gt;    &lt;chr&gt;  &lt;chr&gt;   \n 1 1001      Alabama Autauga  South  Metro   \n 2 1003      Alabama Baldwin  South  Metro   \n 3 1005      Alabama Barbour  South  Nonmetro\n 4 1007      Alabama Bibb     South  Metro   \n 5 1009      Alabama Blount   South  Metro   \n 6 1011      Alabama Bullock  South  Nonmetro\n 7 1013      Alabama Butler   South  Nonmetro\n 8 1015      Alabama Calhoun  South  Metro   \n 9 1017      Alabama Chambers South  Nonmetro\n10 1019      Alabama Cherokee South  Nonmetro\n# ℹ 3,128 more rows\n\n# select ile kolon adı değiştirmek \ncounties %&gt;% select(census_id,pop = population)\n\n# A tibble: 3,138 × 2\n   census_id    pop\n   &lt;chr&gt;      &lt;dbl&gt;\n 1 1001       55221\n 2 1003      195121\n 3 1005       26932\n 4 1007       22604\n 5 1009       57710\n 6 1011       10678\n 7 1013       20354\n 8 1015      116648\n 9 1017       34079\n10 1019       26008\n# ℹ 3,128 more rows"
  },
  {
    "objectID": "R_intro.html",
    "href": "R_intro.html",
    "title": "R Programlamaya Giriş",
    "section": "",
    "text": "R kodunun çalıştırılması oldukça basittir ve R Studio gibi entegre geliştirme ortamları (IDE’ler) kullanırken daha da kolaylaşır. R kodunu çalıştırmak için temel adımlar:\n\nR Studio’yu Açın: İlk adım, R Studio veya başka bir R IDE’sini açmaktır.\nYeni Bir script uluşturun veya mevcut bir script kullanın:\n\nR Studio’da, sol üst köşede bulunan “File” (Dosya) menüsünden “New Script”seçeneği ile yeni bir R scripti oluşturabilirsiniz.\nMevcut bir scripte gitmek istiyorsanız, “File” menüsünden “Open Script” seçeneğini kullanabilirsiniz.\n\nR Kodunu Scripte Yazın: Oluşturduğunuz veya açtığınız R skriptinde, R kodlarını yazın veya yapıştırın. Örneğin, basit bir hesaplama yapmak için aşağıdaki kodu kullanabilirsiniz:\n\nx &lt;- 5\ny &lt;- 10\nz &lt;- x + y\nz\n\n[1] 15\n\n\nKodu Çalıştırma:\n\nÇalıştırmak istediğiniz kodu seçin veya imleci çalıştırmak istediğiniz satıra getirin.\nÇalıştırma işlemi için aşağıdaki yöntemlerden birini kullanabilirsiniz:\n\nKlavyede varsayılan olarak “Ctrl+Enter” (Windows/Linux) veya “Command+Enter” (Mac) tuş kombinasyonunu kullanabilirsiniz.\nR Studio’daki “Run” (Çalıştır) düğmesini veya “Run” (Çalıştır) menüsünü kullanabilirsiniz.\nÇalıştırmak istediğiniz kodu seçtikten sonra sağ tıklarsanız, “Run” (Çalıştır) seçeneğini göreceksiniz.\n\n\nSonuçları İnceleyin: Çalıştırılan kodun sonuçları konsol penceresinde veya çıktı bölümünde görüntülenir. Örneğin, yukarıdaki örnekte “z” değişkeninin değeri olan “15” sonucunu göreceksiniz.\n\n\n\n\n\n\n\nDikkat\n\n\n\nBir script üzerinden çalıştırılan R kodunun sonuçlarını sol alt kısımda yer alan Console bölümünde görebilirsiniz. Aynı şekilde kodu Console bölümüne yazıp Enter tuşuna bastığınızda yine sonuç alabilirsiniz. Ancak script içerisinde yazılan kodları bir .R uzantılı dosya olarak saklama ve daha sonradan bu dosyaya ulaşma şansınız varken, Console ile çalıştırılan kodları bir .R dosyası olarak saklama şansınız yoktur. Console tarafındaki sonuçlar geçici olarak ekranda kalır ve R Studio’yu kapatıp açtığınızda tekrar yazdığınız ve çalıştırdığınız kodlara ulaşamayabilirsiniz.\n\n\n\n\n\n\n\n\nİpucu\n\n\n\nConsole tarafına yansıyan kodların ve sonuçların farklı formatlarda saklama şansımız vardır. Bunun için sink fonksiyonunu araştırmanızı önerebilirim."
  },
  {
    "objectID": "basics.html",
    "href": "basics.html",
    "title": "1  Temel Fonksiyonlar",
    "section": "",
    "text": "1.0.1 Çalışma Dizini\nÇalışma Dizini, üzerinde çalıştığınız veri kümeleri vb. gibi tüm gerekli dosya ve belgelerinizi içeren yerdir. Çalışma dizininizi ayarlamanın iki yolu vardır. İlk yol getwd ve setwd işlevlerini kullanmaktır. Diğer yol ise RStudio üzerinden Session&gt;Set Working Directory youluyla yapılabilir.\n\ngetwd()\n\n[1] \"D:/Akademi ve Veri Bilimi/Data Science/Github/r-book-tr\"\n\n\n\ndir veya list.files komutları ile dizinde yer alan dosyalar öğrenilebilir.\ndir.create komutu ile yeni bir klasör oluşturmak mümkündür.\nfile.exists kullanılarak klasörün var olup olmadığı sorgulanabilir.\n\n\n\n1.0.2 Yardımcı Bilgiler\nR komutlarında Büyük-küçük harf duyarlılığı (case sensitive) vardır.\n\na &lt;- 5  \nprint(a)  \n\n[1] 5\n\nA &lt;- 6  \nprint(A) \n\n[1] 6\n\n\nNoktalı virgül (;) işareti ile aynı satırda birden fazla kod çalıştırılabilir hale getirilir.\n\nx &lt;- 1 ; y &lt;- 2 ; z &lt;- 3  \nx; y; z\n\n[1] 1\n\n\n[1] 2\n\n\n[1] 3\n\n\nKomutlar arası açıklamaları ve yorumları #(hashtag) ile yazabiliriz. Hastagli satırlar, kod olarak algılanıp çalıştırılmaz. Bu kısımlara yazılan kodlar ile ilgili hatırlatıcı bilgiler (comment) yazılabilir.\n\n#6 ile başyalan ve  10 ile  biten tamsayıları c vektörüne atayalım  \nc &lt;- 6:10 \nc\n\n[1]  6  7  8  9 10\n\n\n\nls() çalışma alanındaki nesne ve fonksiyonları listeler.\nrm(a) çalışma alanından a nesnesini siler.\nrm(list=ls()) bütün çalışma alanını temizler.\nq() R’dan çıkış yapmayı sağlar.\ninstall.packages(\"package\") paket yüklemeyi sağlar.\nlibrary(\"package\") yüklü olan paketi getirir.\ninstalled.packages() yüklü olan paketleri listeler\noptions(digits=10) sayılarda ondalık kısmın basamak sayısını ifade eder.\nhelp() fonksiyonu ya da ? ile bir fonksiyon hakkında yardım alınabilir. Örneğin mean fonksiyonu ile ilgili yardım almak için scripte ?mean ya da help(mean) yazmanız ve çalıştırmanız yeterlidir. Bunun yanı sıra R Studio penceresinin sağ alt kısmındaki help alanını kullanabilirsiniz.\n\n\n\n1.0.3 Atama Operatörü\nBir değişkene, tabloya veya objeye değer atarken ‘&lt;-’ veya ‘=’ operatörü kullanılır. ‘&lt;-’ atama operatöründe ok hangi yöndeyse o tarafa atama yapılır. Genellikle ‘&lt;-’ operatörü kullanılmaktadır. Çünkü ‘=’ operatörü filtrelemelerde veya işlemlerdeki ‘==’ ile karıştırılabilmektedir. Ayrıca fonksiyonlar içinde de kullanılabildiği için kod karmaşasına sebebiyet verebilir. Her iki operatör de aynı işlevi görmektedir.\n\n# a'ya 20 değerini atayalım  \na &lt;- 20    \n# tabloyu ya da değeri görüntülemek için nesnenin kendisi de direkt yazılabilir.  \n# ya da print fonksiyonu kullanılabilir.   \nprint(a)    \n\n[1] 20\n\n# b'ye 12 değerini atayalım  \nb &lt;- 12  \nprint(b)   \n\n[1] 12\n\n# a ve b değerlerinden üretilen bir c değeri üretelim.   \nc &lt;- 2 * a + 3 * b  \nprint(c) \n\n[1] 76\n\n\nc() ile vektör oluştutulabilir. c “combine” (birleştirmek) kelimesinin ilk harfini ifade eder. Bir değişkene birden fazla değer atamak istediğimizde kullanılır.\n\n# d adında bir vektör oluşturalım ve değerler atayalım.   \nd &lt;- c(4,7,13)  \nd \n\n[1]  4  7 13\n\n\nBir metini değişkene atamak istersek de aşağıdaki gibi metin “” işareti içine yazılmalıdır.\n\nmetin &lt;- \"Merhaba Arkadaşlar\"  \nprint(metin)\n\n[1] \"Merhaba Arkadaşlar\"\n\n\n\n\n1.0.4 Matematiksel Operatörler\nR ve R Studio, güçlü bir hesap makinesi olarak kabul edilebilir.\n\n3+5 \n\n[1] 8\n\n7*8 \n\n[1] 56\n\n88/2 \n\n[1] 44\n\n3*(12+(15/3-2)) \n\n[1] 45\n\n9^2 # karesini alır \n\n[1] 81\n\na &lt;-  3 \nb &lt;-  a^2 \nprint(b) \n\n[1] 9\n\nlog(15) #ln15 yani doğal logaritma \n\n[1] 2.70805\n\nlog10(1000) # 10 tabanına göre hesaplama \n\n[1] 3\n\nexp(12) #exponential power of the number. e (2.718) üzeri 12 \n\n[1] 162754.8\n\nfactorial(6) # faktöriyel hesaplama yapar \n\n[1] 720\n\nsqrt(81) # karekör alma \n\n[1] 9\n\nabs(-3) # mutlak değer \n\n[1] 3\n\nsign(-5) # işaret bulma \n\n[1] -1\n\nsin(45) # sinüs \n\n[1] 0.8509035\n\ncos(90) # cosinüs \n\n[1] -0.4480736\n\npi # pi sayısı \n\n[1] 3.141593\n\ntan(pi) # tanjant\n\n[1] -1.224647e-16\n\n\n\n\n1.0.5 Mantıksal Operatörler\nMantıksal sorgulamalar, koşullarda ve filtrelerde kullanılmaktadır. Verilen koşul veya filtre sağlandığında TRUE, sağlanmadığında ise FALSE değerleri elde edilmektedir. Bu mantıksal operatörler ayrıca komutlar içindeki özellikleri aktifleştirmek ve pasifleştirmek için de kullanılmaktadır.\nMantıksal operatörler aşağıdaki şekilde kullanılmaktadır:\n\neşittir : ==\neşit değildir : !=\nküçüktür : &lt;\nküçük eşittir : &lt;=\nbüyüktür : &gt;\nbüyük eşittir : &gt;=\nx değil : !x\nx ve y : x&y\nx veya y: x|y\n\n\n3 &gt; 5\n\n[1] FALSE\n\n# & (ve) operatörü\n# iki durumda TRUE ise sonuç TRUE döner.\n3 &lt; 5 & 8 &gt; 7\n\n[1] TRUE\n\n# bir durum FALSE diğer durum TRUE ise sonuç FALSE döner.\n3 &lt; 5 & 6 &gt; 7\n\n[1] FALSE\n\n# iki durumda FALSE ise sonuç FALSE döner.\n6 &lt; 5 & 6 &gt; 7\n\n[1] FALSE\n\n# | (veya) operatörü\n# Her iki durumdan birisi TRUE ise TRUE döner\n(5==4) | (3!=4)\n\n[1] TRUE"
  },
  {
    "objectID": "basics.html#çalışma-dizini",
    "href": "basics.html#çalışma-dizini",
    "title": "1  Temel Fonksiyonlar",
    "section": "1.1 Çalışma Dizini",
    "text": "1.1 Çalışma Dizini\nÇalışma Dizini, üzerinde çalıştığınız veri kümeleri vb. gibi tüm gerekli dosya ve belgelerinizi içeren yerdir. Çalışma dizininizi ayarlamanın iki yolu vardır. İlk yol getwd ve setwd işlevlerini kullanmaktır. Diğer yol ise RStudio üzerinden Session&gt;Set Working Directory youluyla yapılabilir.\n\ngetwd()\n\n[1] \"D:/Akademi ve Veri Bilimi/Data Science/Github/r-book-tr\"\n\n\n\ndir veya list.files komutları ile dizinde yer alan dosyalar öğrenilebilir.\ndir.create komutu ile yeni bir klasör oluşturmak mümkündür.\nfile.exists kullanılarak klasörün var olup olmadığı sorgulanabilir."
  },
  {
    "objectID": "basics.html#yardımcı-bilgiler",
    "href": "basics.html#yardımcı-bilgiler",
    "title": "1  Temel Fonksiyonlar",
    "section": "1.2 Yardımcı Bilgiler",
    "text": "1.2 Yardımcı Bilgiler\nR komutlarında Büyük-küçük harf duyarlılığı (case sensitive) vardır.\n\na &lt;- 5  \nprint(a)  \n\n[1] 5\n\nA &lt;- 6  \nprint(A) \n\n[1] 6\n\n\nNoktalı virgül (;) işareti ile aynı satırda birden fazla kod çalıştırılabilir hale getirilir.\n\nx &lt;- 1 ; y &lt;- 2 ; z &lt;- 3  \nx; y; z\n\n[1] 1\n\n\n[1] 2\n\n\n[1] 3\n\n\nKomutlar arası açıklamaları ve yorumları #(hashtag) ile yazabiliriz. Hastagli satırlar, kod olarak algılanıp çalıştırılmaz. Bu kısımlara yazılan kodlar ile ilgili hatırlatıcı bilgiler (comment) yazılabilir.\n\n#6 ile başyalan ve  10 ile  biten tamsayıları c vektörüne atayalım  \nc &lt;- 6:10 \nc\n\n[1]  6  7  8  9 10\n\n\n\nls() çalışma alanındaki nesne ve fonksiyonları listeler.\nrm(a) çalışma alanından a nesnesini siler.\nrm(list=ls()) bütün çalışma alanını temizler.\nq() R’dan çıkış yapmayı sağlar.\ninstall.packages(\"package\") paket yüklemeyi sağlar.\nlibrary(\"package\") yüklü olan paketi getirir.\ninstalled.packages() yüklü olan paketleri listeler\noptions(digits=10) sayılarda ondalık kısmın basamak sayısını ifade eder.\nhelp() fonksiyonu ya da ? ile bir fonksiyon hakkında yardım alınabilir. Örneğin mean fonksiyonu ile ilgili yardım almak için scripte ?mean ya da help(mean) yazmanız ve çalıştırmanız yeterlidir. Bunun yanı sıra R Studio penceresinin sağ alt kısmındaki help alanını kullanabilirsiniz."
  },
  {
    "objectID": "basics.html#atama-operatörü",
    "href": "basics.html#atama-operatörü",
    "title": "1  Temel Fonksiyonlar",
    "section": "1.3 Atama Operatörü",
    "text": "1.3 Atama Operatörü\nBir değişkene, tabloya veya objeye değer atarken ‘&lt;-’ veya ‘=’ operatörü kullanılır. ‘&lt;-’ atama operatöründe ok hangi yöndeyse o tarafa atama yapılır. Genellikle ‘&lt;-’ operatörü kullanılmaktadır. Çünkü ‘=’ operatörü filtrelemelerde veya işlemlerdeki ‘==’ ile karıştırılabilmektedir. Ayrıca fonksiyonlar içinde de kullanılabildiği için kod karmaşasına sebebiyet verebilir. Her iki operatör de aynı işlevi görmektedir.\n\n# a'ya 20 değerini atayalım  \na &lt;- 20    \n# tabloyu ya da değeri görüntülemek için nesnenin kendisi de direkt yazılabilir.  \n# ya da print fonksiyonu kullanılabilir.   \nprint(a)    \n\n[1] 20\n\n# b'ye 12 değerini atayalım  \nb &lt;- 12  \nprint(b)   \n\n[1] 12\n\n# a ve b değerlerinden üretilen bir c değeri üretelim.   \nc &lt;- 2 * a + 3 * b  \nprint(c) \n\n[1] 76\n\n\nc() ile vektör oluştutulabilir. c “combine” (birleştirmek) kelimesinin ilk harfini ifade eder. Bir değişkene birden fazla değer atamak istediğimizde kullanılır.\n\n# d adında bir vektör oluşturalım ve değerler atayalım.   \nd &lt;- c(4,7,13)  \nd \n\n[1]  4  7 13\n\n\nBir metini değişkene atamak istersek de aşağıdaki gibi metin “” işareti içine yazılmalıdır.\n\nmetin &lt;- \"Merhaba Arkadaşlar\"  \nprint(metin)\n\n[1] \"Merhaba Arkadaşlar\""
  },
  {
    "objectID": "basics.html#matematiksel-operatörler",
    "href": "basics.html#matematiksel-operatörler",
    "title": "1  Temel Fonksiyonlar",
    "section": "1.4 Matematiksel Operatörler",
    "text": "1.4 Matematiksel Operatörler\nR ve R Studio, güçlü bir hesap makinesi olarak kabul edilebilir.\n\n3+5 \n\n[1] 8\n\n7*8 \n\n[1] 56\n\n88/2 \n\n[1] 44\n\n3*(12+(15/3-2)) \n\n[1] 45\n\n9^2 # karesini alır \n\n[1] 81\n\na &lt;-  3 \nb &lt;-  a^2 \nprint(b) \n\n[1] 9\n\nlog(15) #ln15 yani doğal logaritma \n\n[1] 2.70805\n\nlog10(1000) # 10 tabanına göre hesaplama \n\n[1] 3\n\nexp(12) #exponential power of the number. e (2.718) üzeri 12 \n\n[1] 162754.8\n\nfactorial(6) # faktöriyel hesaplama yapar \n\n[1] 720\n\nsqrt(81) # karekör alma \n\n[1] 9\n\nabs(-3) # mutlak değer \n\n[1] 3\n\nsign(-5) # işaret bulma \n\n[1] -1\n\nsin(45) # sinüs \n\n[1] 0.8509035\n\ncos(90) # cosinüs \n\n[1] -0.4480736\n\npi # pi sayısı \n\n[1] 3.141593\n\ntan(pi) # tanjant\n\n[1] -1.224647e-16"
  },
  {
    "objectID": "basics.html#mantıksal-operatörler",
    "href": "basics.html#mantıksal-operatörler",
    "title": "1  Temel Fonksiyonlar",
    "section": "1.5 Mantıksal Operatörler",
    "text": "1.5 Mantıksal Operatörler\nMantıksal sorgulamalar, koşullarda ve filtrelerde kullanılmaktadır. Verilen koşul veya filtre sağlandığında TRUE, sağlanmadığında ise FALSE değerleri elde edilmektedir. Bu mantıksal operatörler ayrıca komutlar içindeki özellikleri aktifleştirmek ve pasifleştirmek için de kullanılmaktadır.\nMantıksal operatörler aşağıdaki şekilde kullanılmaktadır:\n\neşittir : ==\neşit değildir : !=\nküçüktür : &lt;\nküçük eşittir : &lt;=\nbüyüktür : &gt;\nbüyük eşittir : &gt;=\nx değil : !x\nx ve y : x&y\nx veya y: x|y\n\n\n3 &gt; 5\n\n[1] FALSE\n\n# & (ve) operatörü\n# iki durumda TRUE ise sonuç TRUE döner.\n3 &lt; 5 & 8 &gt; 7\n\n[1] TRUE\n\n# bir durum FALSE diğer durum TRUE ise sonuç FALSE döner.\n3 &lt; 5 & 6 &gt; 7\n\n[1] FALSE\n\n# iki durumda FALSE ise sonuç FALSE döner.\n6 &lt; 5 & 6 &gt; 7\n\n[1] FALSE\n\n# | (veya) operatörü\n# Her iki durumdan birisi TRUE ise TRUE döner\n(5==4) | (3!=4)\n\n[1] TRUE"
  },
  {
    "objectID": "data_types.html#vektörler",
    "href": "data_types.html#vektörler",
    "title": "2  Veri Tipleri ve Yapıları",
    "section": "2.1 Vektörler",
    "text": "2.1 Vektörler\n\nR’daki en temel nesneler vektörlerdir.\nVektörler homojen yapıya sahiptir yani bütün elemanları aynı veri tipinde olmalıdır.\nVektörler tek boyutludur.\nBir vektör oluşturmak için kullanabilecek en temel fonksiyon c()’dir.\n\n\nv &lt;- c(1,4,7,2,5,8,3,6,9)\n\nv[1] # 1. elemanını seçer\n\n[1] 1\n\nv[3] # 3. elemanını seçer\n\n[1] 7\n\nv[c(3,7)] # 3. ve 7. elemani secer\n\n[1] 7 3\n\nv[1:6] # 1. elemandan 6. elemana kadar secer\n\n[1] 1 4 7 2 5 8\n\nv[-2] # 2. elemani haric tutarak secer\n\n[1] 1 7 2 5 8 3 6 9\n\nlength(v) # vektörün uzunluğunu gösterir\n\n[1] 9\n\nv2 &lt;- c(v,12) # vektöre eleman ekleme\nv2\n\n [1]  1  4  7  2  5  8  3  6  9 12\n\n# : ile başlangıç ve bitiş değerleri belli olan vektörler yaratılabilir.\n\nv3 &lt;- 1:10\nv3\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\nv4 &lt;- 11:20\nv4\n\n [1] 11 12 13 14 15 16 17 18 19 20\n\n# Vektörler ile matematiksel işlemler yapılabilir.\n\nv3 + v4\n\n [1] 12 14 16 18 20 22 24 26 28 30\n\nv3 / v4\n\n [1] 0.09090909 0.16666667 0.23076923 0.28571429 0.33333333 0.37500000\n [7] 0.41176471 0.44444444 0.47368421 0.50000000\n\n2 * v3 - v4\n\n [1] -9 -8 -7 -6 -5 -4 -3 -2 -1  0\n\n# Vektörler ile ilgili kullanılabilecek bazı fonksiyonlar\n\n# seq () \n#aritmetik bir diziden meydana gelen bir vektör oluşturmak için kullanılır. \nseq(from = 5, to = 50, by =5) # 5 ile başlayan 50 ile biten 5şer artan vektör\n\n [1]  5 10 15 20 25 30 35 40 45 50\n\nseq(from = 5, to = 50, length = 7) # 5 ile başlayan 50 ile 7 elemanlı vektör\n\n[1]  5.0 12.5 20.0 27.5 35.0 42.5 50.0\n\nseq(5,1,-1) # 5 ile baslayıp 1'e kadar 1'er azaltarak vektor olusturma\n\n[1] 5 4 3 2 1\n\n# rep() \n# tekrarlı sayılar içeren vektörler oluşturulur.\nrep(10,8) # 8 tane 10 değeri olan vektör\n\n[1] 10 10 10 10 10 10 10 10\n\nrep(c(1,2,3),4) # 1,2,3 vekrünün 4 defa tekrarlanması\n\n [1] 1 2 3 1 2 3 1 2 3 1 2 3\n\nrep(c(1,2,3), each = 4) # each argünmanı ile sıralı ve tekrarlı vektör\n\n [1] 1 1 1 1 2 2 2 2 3 3 3 3\n\n# rev()\nv5 &lt;- c(3,5,6,1,NA,12,NA,8,9) # R'da NA boş gözlemi ifade eder.\nrev(v5) # vektörü tersine çevirir\n\n[1]  9  8 NA 12 NA  1  6  5  3\n\n# rank()\nrank(v5) # elemanların sıra numarasını verir\n\n[1] 2 3 4 1 8 7 9 5 6\n\nrank(v5, na.last = TRUE) # NA leri son sıraya atar.\n\n[1] 2 3 4 1 8 7 9 5 6\n\nrank(v5, na.last = FALSE) # NA leri en başa koyar.\n\n[1] 4 5 6 3 1 9 2 7 8\n\nrank(v5,na.last = NA) # NA değerlere yer verilmez\n\n[1] 2 3 4 1 7 5 6\n\nrank(v5, na.last = \"keep\") # NA değerler oldukları gibi görünürler.\n\n[1]  2  3  4  1 NA  7 NA  5  6\n\n# all()\nall(v5&gt;5) # vektördeki tüm elemanların şartı sağlayıp sağlamadıkları test edilir.\n\n[1] FALSE\n\nall(v5&gt;0) # vektörde NA varsa sonuç NA döner\n\n[1] NA\n\nall(v5&gt;0, na.rm = TRUE) # NA gözlemler hariç tutularak sonuç üretir.\n\n[1] TRUE\n\n# any()\nany(v5&gt;6) # vektördeki en az bir elemanın şartı sağlayıp sağlamadığı test edilir.\n\n[1] TRUE\n\nany(v5==9) \n\n[1] TRUE\n\n# unique()\nv6 &lt;- rep(1:5,3)\nv6\n\n [1] 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5\n\nunique(v6) # tekrarlı gözlemler temizlenir\n\n[1] 1 2 3 4 5\n\n# duplicated()\nduplicated(v6) # tekrarlı gözlemlerin varlığını kontrol eder\n\n [1] FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n[13]  TRUE  TRUE  TRUE\n\nv6[duplicated(v6)] # tekrarlı gözlemleri listeler\n\n [1] 1 2 3 4 5 1 2 3 4 5\n\n# sort()\nsort(v5) # küçükten büyüğe sıralama yapar.\n\n[1]  1  3  5  6  8  9 12\n\nsort(v5,decreasing = TRUE) # azalan sırada sıralama yapar.\n\n[1] 12  9  8  6  5  3  1\n\n# diff()\ndiff(v5) # vektörde ardışık elemanlar arasındaki farkı bulur.\n\n[1]  2  1 -5 NA NA NA NA  1\n\ndiff(na.omit(v5)) # na.omit vektördeki NA gözlemleri temizler\n\n[1]  2  1 -5 11 -4  1\n\n# is.na()\nis.na(v5) # vektördeki elamanların NA olup olmadığını test eder.\n\n[1] FALSE FALSE FALSE FALSE  TRUE FALSE  TRUE FALSE FALSE\n\nis.nan(v5) # NaN aynı zamanda bir NA'dir.\n\n[1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n# which\nwhich(v5==12) # 6 sayısının posizyonunu gösterir\n\n[1] 6\n\nwhich.max(v5) # vektördeki maximum elemanın posizyonunu gösterir\n\n[1] 6\n\nwhich.min(v5) # vektördeki minimum elemanın posizyonunu gösterir\n\n[1] 4\n\nv5[which.min(v5)] # vektördeki minimum elemanı gösterir\n\n[1] 1\n\n# Temel İstatistiksel Fonksiyonlar\nmean(v5) # NA varsa sonuç NA döner\n\n[1] NA\n\nmean(v5, na.rm = TRUE) # aritmetik ortalama\n\n[1] 6.285714\n\nmedian(v5,na.rm = TRUE) # medyan (ortanca)\n\n[1] 6\n\nsum(v5,na.rm = TRUE) # vektör toplamını verir\n\n[1] 44\n\nmin(v5,na.rm = TRUE) # vektörün minimum değeri\n\n[1] 1\n\nmax(v5,na.rm = TRUE) # vektörün maximum değeri\n\n[1] 12\n\nsd(v5,na.rm = TRUE) # standart sapma\n\n[1] 3.728909\n\nvar(v5,na.rm = TRUE) # varyans\n\n[1] 13.90476"
  },
  {
    "objectID": "data_types.html#matrisler",
    "href": "data_types.html#matrisler",
    "title": "2  Veri Tipleri ve Yapıları",
    "section": "2.2 Matrisler",
    "text": "2.2 Matrisler\n\nMatrisler, iki boyutlu yani satır ve sütunları olan atomik vektörlerdir.\nmatrix() fonksiyonu ile tanımlanmaktadır.\nVektörlerin birleştirlmesi ile de matrisler oluşturulabilir. rbindsatır bazlı alt alta birleştirme, cbind ise sütun bazlı yanyana birleştirme yapar. Burada vektörlerin aynı boyutlarda olmasına dikkat edilmesi gerekir.\n\n\nv1 &lt;- c(3,4,6,8,5)\nv2 &lt;- c(4,8,4,7,1)\nv3 &lt;- c(2,2,5,4,6)\nv4 &lt;- c(4,7,5,2,5)\n\nmatris &lt;- cbind(v1, v2, v3, v4)\nmatris\n\n     v1 v2 v3 v4\n[1,]  3  4  2  4\n[2,]  4  8  2  7\n[3,]  6  4  5  5\n[4,]  8  7  4  2\n[5,]  5  1  6  5\n\nis.matrix(matris)\n\n[1] TRUE\n\ndim(matris)\n\n[1] 5 4\n\nmatrix(nrow = 3, ncol = 3, 1:9)\n\n     [,1] [,2] [,3]\n[1,]    1    4    7\n[2,]    2    5    8\n[3,]    3    6    9\n\nmatrix(1:9, nrow = 3, ncol = 3, byrow = TRUE) # byrow satırlara göre oluşturur.\n\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    4    5    6\n[3,]    7    8    9\n\nmat &lt;- seq(3, 21, by = 2)\nmat\n\n [1]  3  5  7  9 11 13 15 17 19 21\n\ndim(mat) &lt;- c(5,2)\nmat\n\n     [,1] [,2]\n[1,]    3   13\n[2,]    5   15\n[3,]    7   17\n[4,]    9   19\n[5,]   11   21\n\nmatrix(c(1,2,3,11,22,33), nrow = 2, ncol = 3, byrow = TRUE)\n\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]   11   22   33\n\n# normal dağılımdan 0 ortamalı, 1 standart sapmalı 16 sayı üret\nMA &lt;- rnorm(16, 0, 1)\nMA &lt;- matrix(MA, nrow = 4, ncol = 4)\n\n# normal dağılımdan 90 ortamalı, 10 standart sapmalı 16 sayı üret\nMB &lt;- rnorm(16, 90, 10)\nMB &lt;- matrix(MB, nrow = 4, ncol = 4)\n\nm &lt;- rbind(MA, MB)\nm\n\n            [,1]        [,2]        [,3]       [,4]\n[1,]   0.1392553  -0.5470995   0.2988283  0.2337322\n[2,]  -0.1020793  -0.7234454  -0.8847042 -1.8129702\n[3,]   0.3286422  -0.8236020  -0.7260704 -0.3396262\n[4,]   3.0826622   1.1656549   0.4406065  0.6798731\n[5,]  81.8566601  87.3807325  84.4318820 85.3988111\n[6,] 101.2392563  90.1620956 104.4661200 81.8784201\n[7,]  96.0490770 105.0488381 104.7718600 97.5082053\n[8,]  83.4598154  98.2258097  83.6933266 94.7935417\n\n# satır ve sütun isimlendirme\ncolnames(m) &lt;- LETTERS[1:4]\nrownames(m) &lt;- tail(LETTERS,8)\nm\n\n            A           B           C          D\nS   0.1392553  -0.5470995   0.2988283  0.2337322\nT  -0.1020793  -0.7234454  -0.8847042 -1.8129702\nU   0.3286422  -0.8236020  -0.7260704 -0.3396262\nV   3.0826622   1.1656549   0.4406065  0.6798731\nW  81.8566601  87.3807325  84.4318820 85.3988111\nX 101.2392563  90.1620956 104.4661200 81.8784201\nY  96.0490770 105.0488381 104.7718600 97.5082053\nZ  83.4598154  98.2258097  83.6933266 94.7935417\n\n#Matris Elemanlarina Erismek\nm[1,1] # 1. satır, 1.sütundak, eleman\n\n[1] 0.1392553\n\nm[4,2] # 4. satır, 2.sütundak, eleman\n\n[1] 1.165655\n\nm[,2] # 2. sütun elemanları\n\n          S           T           U           V           W           X \n -0.5470995  -0.7234454  -0.8236020   1.1656549  87.3807325  90.1620956 \n          Y           Z \n105.0488381  98.2258097 \n\nm[-3,] # 3. satır hariç tüm elemanlar\n\n            A           B           C          D\nS   0.1392553  -0.5470995   0.2988283  0.2337322\nT  -0.1020793  -0.7234454  -0.8847042 -1.8129702\nV   3.0826622   1.1656549   0.4406065  0.6798731\nW  81.8566601  87.3807325  84.4318820 85.3988111\nX 101.2392563  90.1620956 104.4661200 81.8784201\nY  96.0490770 105.0488381 104.7718600 97.5082053\nZ  83.4598154  98.2258097  83.6933266 94.7935417\n\n# köşegen matris oluşturma\ndiag(2,nrow=3)\n\n     [,1] [,2] [,3]\n[1,]    2    0    0\n[2,]    0    2    0\n[3,]    0    0    2\n\ndiag(1,5) # 5*5 birim matris\n\n     [,1] [,2] [,3] [,4] [,5]\n[1,]    1    0    0    0    0\n[2,]    0    1    0    0    0\n[3,]    0    0    1    0    0\n[4,]    0    0    0    1    0\n[5,]    0    0    0    0    1\n\n# transpose\nt(m)\n\n           S          T          U         V        W         X         Y\nA  0.1392553 -0.1020793  0.3286422 3.0826622 81.85666 101.23926  96.04908\nB -0.5470995 -0.7234454 -0.8236020 1.1656549 87.38073  90.16210 105.04884\nC  0.2988283 -0.8847042 -0.7260704 0.4406065 84.43188 104.46612 104.77186\nD  0.2337322 -1.8129702 -0.3396262 0.6798731 85.39881  81.87842  97.50821\n         Z\nA 83.45982\nB 98.22581\nC 83.69333\nD 94.79354\n\n# matris ile işlemler\n\nm1 &lt;- matrix(1:4,nrow=2)\nm2 &lt;- matrix(5:8,nrow=2)\n\nm1;m2\n\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    4\n\n\n     [,1] [,2]\n[1,]    5    7\n[2,]    6    8\n\nm1 + m2 # matris elemanları birebir toplanır\n\n     [,1] [,2]\n[1,]    6   10\n[2,]    8   12\n\nm1 / m2 # matris elemanları birebir toplanır\n\n          [,1]      [,2]\n[1,] 0.2000000 0.4285714\n[2,] 0.3333333 0.5000000\n\nm1 * m2 # matris elemanları birebir çarpılır\n\n     [,1] [,2]\n[1,]    5   21\n[2,]   12   32\n\nm1 %*% m2 # matris çarpımı\n\n     [,1] [,2]\n[1,]   23   31\n[2,]   34   46\n\nsolve(m2) # matrisin tersi\n\n     [,1] [,2]\n[1,]   -4  3.5\n[2,]    3 -2.5\n\nrowSums(m1) # satır toplamları\n\n[1] 4 6\n\nrowMeans(m1) # satır ortalaması\n\n[1] 2 3\n\ncolSums(m1) # sütun toplamları\n\n[1] 3 7\n\ncolMeans(m1) # sütun ortalaması\n\n[1] 1.5 3.5"
  },
  {
    "objectID": "data_types.html#listeler",
    "href": "data_types.html#listeler",
    "title": "2  Veri Tipleri ve Yapıları",
    "section": "2.3 Listeler",
    "text": "2.3 Listeler\n\nListeler, birbirinden farklı veri tiplerine sahip vektörler, matrisler vb farklı objeleri birarada tutabilen yapılardır.\nlist() ile liste oluşturulur.\n\n\nx &lt;- c(3,5,7)\ny &lt;- letters[1:10]\nz &lt;- c(rep(TRUE,3),rep(FALSE,4))\n\nlist &lt;- list(x,y,z)\nlist\n\n[[1]]\n[1] 3 5 7\n\n[[2]]\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\"\n\n[[3]]\n[1]  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE\n\nclass(list) # listenin sınıfını verir\n\n[1] \"list\"\n\nstr(list) # listenin yapısını verir\n\nList of 3\n $ : num [1:3] 3 5 7\n $ : chr [1:10] \"a\" \"b\" \"c\" \"d\" ...\n $ : logi [1:7] TRUE TRUE TRUE FALSE FALSE FALSE ...\n\nnames(list) &lt;- c(\"numeric\",\"karakter\",\"mantıksal\") # liste isimlendirme\nlist\n\n$numeric\n[1] 3 5 7\n\n$karakter\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\"\n\n$mantıksal\n[1]  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE\n\nlist$numeric\n\n[1] 3 5 7\n\nlist$karakter\n\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\"\n\nlist$mantıksal\n\n[1]  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE\n\nlist[[2]]\n\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\"\n\nlist$numeric2 &lt;- c(4:10) # listeye eleman ekleme\nlist\n\n$numeric\n[1] 3 5 7\n\n$karakter\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\"\n\n$mantıksal\n[1]  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE\n\n$numeric2\n[1]  4  5  6  7  8  9 10\n\nlist$numeric &lt;- NULL # listeden eleman silme\nlist\n\n$karakter\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\"\n\n$mantıksal\n[1]  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE\n\n$numeric2\n[1]  4  5  6  7  8  9 10\n\nunlist(list) # listeyi vektöre çevirir.\n\n karakter1  karakter2  karakter3  karakter4  karakter5  karakter6  karakter7 \n       \"a\"        \"b\"        \"c\"        \"d\"        \"e\"        \"f\"        \"g\" \n karakter8  karakter9 karakter10 mantıksal1 mantıksal2 mantıksal3 mantıksal4 \n       \"h\"        \"i\"        \"j\"     \"TRUE\"     \"TRUE\"     \"TRUE\"    \"FALSE\" \nmantıksal5 mantıksal6 mantıksal7  numeric21  numeric22  numeric23  numeric24 \n   \"FALSE\"    \"FALSE\"    \"FALSE\"        \"4\"        \"5\"        \"6\"        \"7\" \n numeric25  numeric26  numeric27 \n       \"8\"        \"9\"       \"10\""
  },
  {
    "objectID": "data_types.html#dataframe",
    "href": "data_types.html#dataframe",
    "title": "2  Veri Tipleri ve Yapıları",
    "section": "2.4 dataframe",
    "text": "2.4 dataframe\nVeri çerçevesi (dataframe), her sütunun bir değişkenin değerlerini ve her satırın her sütundan bir değer kümesini içerdiği bir tablo veya iki boyutlu dizi benzeri bir yapıdır. Bir veri çerçevesinin özellikleri şunlardır:\n\nSütun adları boş olmamalıdır.\nSatır adları benzersiz olmalıdır.\nBir veri çerçevesinde saklanan veriler sayısal, faktör veya karakter tipinde olabilir.\nHer sütun aynı sayıda veri öğesi içermelidir.\n\ndata.frame() fonksiyonunu uygulayarak bir veri çerçevesi oluşturabiliriz.\n\n# data.frame oluşturma\nset.seed(12345)\n\ndata &lt;- data.frame(\n  row_num = 1:20,\n  col1 = rnorm(20),\n  col2 = runif(20), # uniform dağılımdam 20 gözlem üret\n  col3 = rbinom(20,size=5,prob = 0.5), # binom dağılımdam 20 gözlem üret\n  col4 = sample(c(\"TRUE\",\"FALSE\"),20,replace = TRUE),\n  col5 = sample(c(rep(c(\"E\",\"K\"),8),rep(NA,4))),\n  stringsAsFactors = TRUE # karakter olanlar faktör olarak değerlendirilsin\n)\n\nclass(data)\n\n[1] \"data.frame\"\n\nhead(data) # ilk 6 gözlemi gösterir\n\n  row_num       col1      col2 col3  col4 col5\n1       1  0.5855288 0.7821933    3 FALSE    E\n2       2  0.7094660 0.4291988    2  TRUE    E\n3       3 -0.1093033 0.9272740    5  TRUE    E\n4       4 -0.4534972 0.7732432    3 FALSE    K\n5       5  0.6058875 0.2596812    5  TRUE    E\n6       6 -1.8179560 0.3212247    2  TRUE &lt;NA&gt;\n\ntail(data) # son 6 gözlemi gösterir\n\n   row_num       col1       col2 col3  col4 col5\n15      15 -0.7505320 0.73249612    1 FALSE    K\n16      16  0.8168998 0.49924102    3 FALSE    K\n17      17 -0.8863575 0.72977197    4 FALSE    K\n18      18 -0.3315776 0.08033604    3  TRUE &lt;NA&gt;\n19      19  1.1207127 0.43553048    3 FALSE    K\n20      20  0.2987237 0.23658045    1 FALSE    E\n\ntail(data,10) # son 10 gözlemi gösterir\n\n   row_num       col1       col2 col3  col4 col5\n11      11 -0.1162478 0.96447029    3  TRUE    K\n12      12  1.8173120 0.82730287    3  TRUE    E\n13      13  0.3706279 0.31502824    2 FALSE &lt;NA&gt;\n14      14  0.5202165 0.21302545    2  TRUE    K\n15      15 -0.7505320 0.73249612    1 FALSE    K\n16      16  0.8168998 0.49924102    3 FALSE    K\n17      17 -0.8863575 0.72977197    4 FALSE    K\n18      18 -0.3315776 0.08033604    3  TRUE &lt;NA&gt;\n19      19  1.1207127 0.43553048    3 FALSE    K\n20      20  0.2987237 0.23658045    1 FALSE    E\n\nstr(data) # tablonun yapısını gösterir\n\n'data.frame':   20 obs. of  6 variables:\n $ row_num: int  1 2 3 4 5 6 7 8 9 10 ...\n $ col1   : num  0.586 0.709 -0.109 -0.453 0.606 ...\n $ col2   : num  0.782 0.429 0.927 0.773 0.26 ...\n $ col3   : int  3 2 5 3 5 2 4 1 3 4 ...\n $ col4   : Factor w/ 2 levels \"FALSE\",\"TRUE\": 1 2 2 1 2 2 2 1 2 2 ...\n $ col5   : Factor w/ 2 levels \"E\",\"K\": 1 1 1 2 1 NA 1 NA 2 1 ...\n\nsummary(data) # tablonun özet istatistiklerini gösterir\n\n    row_num           col1               col2              col3         col4   \n Min.   : 1.00   Min.   :-1.81796   Min.   :0.04346   Min.   :1.00   FALSE: 9  \n 1st Qu.: 5.75   1st Qu.:-0.36206   1st Qu.:0.23069   1st Qu.:2.00   TRUE :11  \n Median :10.50   Median : 0.09471   Median :0.43236   Median :3.00             \n Mean   :10.50   Mean   : 0.07652   Mean   :0.46554   Mean   :2.85             \n 3rd Qu.:15.25   3rd Qu.: 0.61194   3rd Qu.:0.74268   3rd Qu.:3.25             \n Max.   :20.00   Max.   : 1.81731   Max.   :0.96447   Max.   :5.00             \n   col5  \n E   :8  \n K   :8  \n NA's:4  \n         \n         \n         \n\n# veri çerçevesinden belirli sütun/ları seçmek için $ veya [] kullanılır.\nhead(data$col1)\n\n[1]  0.5855288  0.7094660 -0.1093033 -0.4534972  0.6058875 -1.8179560\n\nhead(data[,\"col1\"])\n\n[1]  0.5855288  0.7094660 -0.1093033 -0.4534972  0.6058875 -1.8179560\n\n# veri çerçevesinden belirli satır/ları seçmek için [] kullanılır.\ndata[1:2,] \n\n  row_num      col1      col2 col3  col4 col5\n1       1 0.5855288 0.7821933    3 FALSE    E\n2       2 0.7094660 0.4291988    2  TRUE    E\n\n# 3. and 5. satır ile 2. ve 4. kolon\ndata[c(3,5),c(2,4)]\n\n        col1 col3\n3 -0.1093033    5\n5  0.6058875    5\n\n# koşula göre veriler seçilebilir\ndata$row_num &gt; 12 # TRUE veya FALSE döner\n\n [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[13]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n\ndata[data$row_num &gt; 12,] # koşula göre tablonu değerleri döner\n\n   row_num       col1       col2 col3  col4 col5\n13      13  0.3706279 0.31502824    2 FALSE &lt;NA&gt;\n14      14  0.5202165 0.21302545    2  TRUE    K\n15      15 -0.7505320 0.73249612    1 FALSE    K\n16      16  0.8168998 0.49924102    3 FALSE    K\n17      17 -0.8863575 0.72977197    4 FALSE    K\n18      18 -0.3315776 0.08033604    3  TRUE &lt;NA&gt;\n19      19  1.1207127 0.43553048    3 FALSE    K\n20      20  0.2987237 0.23658045    1 FALSE    E\n\n# subset ile tablo filtrelenebilir.\nsubset(data, \n       row_num &gt;= 10 & col4 == 'TRUE',\n       select = c(row_num, col1, col2,col4))\n\n   row_num       col1       col2 col4\n10      10 -0.9193220 0.62554280 TRUE\n11      11 -0.1162478 0.96447029 TRUE\n12      12  1.8173120 0.82730287 TRUE\n14      14  0.5202165 0.21302545 TRUE\n18      18 -0.3315776 0.08033604 TRUE\n\n# names veya colnames ile sütun isimleri elde edilir.\nnames(data)\n\n[1] \"row_num\" \"col1\"    \"col2\"    \"col3\"    \"col4\"    \"col5\"   \n\ncolnames(data)\n\n[1] \"row_num\" \"col1\"    \"col2\"    \"col3\"    \"col4\"    \"col5\"   \n\n# vektör ile sütun seçimi\ncols &lt;- c(\"col1\",\"col2\",\"col5\")\nhead(data[cols])\n\n        col1      col2 col5\n1  0.5855288 0.7821933    E\n2  0.7094660 0.4291988    E\n3 -0.1093033 0.9272740    E\n4 -0.4534972 0.7732432    K\n5  0.6058875 0.2596812    E\n6 -1.8179560 0.3212247 &lt;NA&gt;\n\n# sütun silme\ndata$col1 &lt;- NULL\nhead(data)\n\n  row_num      col2 col3  col4 col5\n1       1 0.7821933    3 FALSE    E\n2       2 0.4291988    2  TRUE    E\n3       3 0.9272740    5  TRUE    E\n4       4 0.7732432    3 FALSE    K\n5       5 0.2596812    5  TRUE    E\n6       6 0.3212247    2  TRUE &lt;NA&gt;\n\n# sütun ekleme\ndata$col1 &lt;- rnorm(20)\nhead(data)\n\n  row_num      col2 col3  col4 col5       col1\n1       1 0.7821933    3 FALSE    E  0.4768080\n2       2 0.4291988    2  TRUE    E  0.8424486\n3       3 0.9272740    5  TRUE    E -0.8903234\n4       4 0.7732432    3 FALSE    K  0.7529609\n5       5 0.2596812    5  TRUE    E  0.4452159\n6       6 0.3212247    2  TRUE &lt;NA&gt;  0.4211062\n\n# sütunları sıralama\nhead(data[c(\"row_num\",\"col1\",\"col2\",\"col3\",\"col4\",\"col5\")])\n\n  row_num       col1      col2 col3  col4 col5\n1       1  0.4768080 0.7821933    3 FALSE    E\n2       2  0.8424486 0.4291988    2  TRUE    E\n3       3 -0.8903234 0.9272740    5  TRUE    E\n4       4  0.7529609 0.7732432    3 FALSE    K\n5       5  0.4452159 0.2596812    5  TRUE    E\n6       6  0.4211062 0.3212247    2  TRUE &lt;NA&gt;\n\n# sıralama\nhead(data[order(data$col3),]) # artan\n\n   row_num       col2 col3  col4 col5         col1\n8        8 0.04345645    1 FALSE &lt;NA&gt; -0.896320181\n15      15 0.73249612    1 FALSE    K  0.148543198\n20      20 0.23658045    1 FALSE    E  0.240173186\n2        2 0.42919882    2  TRUE    E  0.842448636\n6        6 0.32122467    2  TRUE &lt;NA&gt;  0.421106220\n13      13 0.31502824    2 FALSE &lt;NA&gt; -0.008925433\n\nhead(data[order(-data$row_num),]) # azalan\n\n   row_num       col2 col3  col4 col5       col1\n20      20 0.23658045    1 FALSE    E  0.2401732\n19      19 0.43553048    3 FALSE    K  0.2583817\n18      18 0.08033604    3  TRUE &lt;NA&gt; -0.1712566\n17      17 0.72977197    4 FALSE    K  0.7884411\n16      16 0.49924102    3 FALSE    K -0.3798679\n15      15 0.73249612    1 FALSE    K  0.1485432\n\nhead(data[order(data$col3,-data$row_num),])\n\n   row_num       col2 col3  col4 col5         col1\n20      20 0.23658045    1 FALSE    E  0.240173186\n15      15 0.73249612    1 FALSE    K  0.148543198\n8        8 0.04345645    1 FALSE &lt;NA&gt; -0.896320181\n14      14 0.21302545    2  TRUE    K -0.326216850\n13      13 0.31502824    2 FALSE &lt;NA&gt; -0.008925433\n6        6 0.32122467    2  TRUE &lt;NA&gt;  0.421106220\n\n# kayıp gözlemler (missing values)\ntail(is.na(data))\n\n      row_num  col2  col3  col4  col5  col1\n[15,]   FALSE FALSE FALSE FALSE FALSE FALSE\n[16,]   FALSE FALSE FALSE FALSE FALSE FALSE\n[17,]   FALSE FALSE FALSE FALSE FALSE FALSE\n[18,]   FALSE FALSE FALSE FALSE  TRUE FALSE\n[19,]   FALSE FALSE FALSE FALSE FALSE FALSE\n[20,]   FALSE FALSE FALSE FALSE FALSE FALSE\n\ntail(is.na(data$col5))\n\n[1] FALSE FALSE FALSE  TRUE FALSE FALSE\n\ndata[is.na(data$col5),]\n\n   row_num       col2 col3  col4 col5         col1\n6        6 0.32122467    2  TRUE &lt;NA&gt;  0.421106220\n8        8 0.04345645    1 FALSE &lt;NA&gt; -0.896320181\n13      13 0.31502824    2 FALSE &lt;NA&gt; -0.008925433\n18      18 0.08033604    3  TRUE &lt;NA&gt; -0.171256569\n\ndata[!is.na(data$col5),]\n\n   row_num       col2 col3  col4 col5       col1\n1        1 0.78219328    3 FALSE    E  0.4768080\n2        2 0.42919882    2  TRUE    E  0.8424486\n3        3 0.92727397    5  TRUE    E -0.8903234\n4        4 0.77324322    3 FALSE    K  0.7529609\n5        5 0.25968125    5  TRUE    E  0.4452159\n7        7 0.06019516    4  TRUE    E  1.1495922\n9        9 0.05505382    3  TRUE    K  0.8696714\n10      10 0.62554280    4  TRUE    E  0.5059117\n11      11 0.96447029    3  TRUE    K  0.3317020\n12      12 0.82730287    3  TRUE    E  1.7399997\n14      14 0.21302545    2  TRUE    K -0.3262169\n15      15 0.73249612    1 FALSE    K  0.1485432\n16      16 0.49924102    3 FALSE    K -0.3798679\n17      17 0.72977197    4 FALSE    K  0.7884411\n19      19 0.43553048    3 FALSE    K  0.2583817\n20      20 0.23658045    1 FALSE    E  0.2401732\n\nrowSums(is.na(data)) # satılardaki toplam kayıp gözlem sayısı\n\n [1] 0 0 0 0 0 1 0 1 0 0 0 0 1 0 0 0 0 1 0 0\n\ncolSums(is.na(data)) # sütunlardaki toplam kayıp gözlem sayısı\n\nrow_num    col2    col3    col4    col5    col1 \n      0       0       0       0       4       0 \n\nsum(is.na(data)) # tablodaki toplam kayıp gözlem sayısı\n\n[1] 4\n\ncomplete.cases(data) # satırlarda eksik gözlemlerin durumu\n\n [1]  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE\n[13] FALSE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE\n\ndata[complete.cases(data),]\n\n   row_num       col2 col3  col4 col5       col1\n1        1 0.78219328    3 FALSE    E  0.4768080\n2        2 0.42919882    2  TRUE    E  0.8424486\n3        3 0.92727397    5  TRUE    E -0.8903234\n4        4 0.77324322    3 FALSE    K  0.7529609\n5        5 0.25968125    5  TRUE    E  0.4452159\n7        7 0.06019516    4  TRUE    E  1.1495922\n9        9 0.05505382    3  TRUE    K  0.8696714\n10      10 0.62554280    4  TRUE    E  0.5059117\n11      11 0.96447029    3  TRUE    K  0.3317020\n12      12 0.82730287    3  TRUE    E  1.7399997\n14      14 0.21302545    2  TRUE    K -0.3262169\n15      15 0.73249612    1 FALSE    K  0.1485432\n16      16 0.49924102    3 FALSE    K -0.3798679\n17      17 0.72977197    4 FALSE    K  0.7884411\n19      19 0.43553048    3 FALSE    K  0.2583817\n20      20 0.23658045    1 FALSE    E  0.2401732\n\ndata[!complete.cases(data),]\n\n   row_num       col2 col3  col4 col5         col1\n6        6 0.32122467    2  TRUE &lt;NA&gt;  0.421106220\n8        8 0.04345645    1 FALSE &lt;NA&gt; -0.896320181\n13      13 0.31502824    2 FALSE &lt;NA&gt; -0.008925433\n18      18 0.08033604    3  TRUE &lt;NA&gt; -0.171256569\n\nna.omit(data) # NA olan satırları siler.\n\n   row_num       col2 col3  col4 col5       col1\n1        1 0.78219328    3 FALSE    E  0.4768080\n2        2 0.42919882    2  TRUE    E  0.8424486\n3        3 0.92727397    5  TRUE    E -0.8903234\n4        4 0.77324322    3 FALSE    K  0.7529609\n5        5 0.25968125    5  TRUE    E  0.4452159\n7        7 0.06019516    4  TRUE    E  1.1495922\n9        9 0.05505382    3  TRUE    K  0.8696714\n10      10 0.62554280    4  TRUE    E  0.5059117\n11      11 0.96447029    3  TRUE    K  0.3317020\n12      12 0.82730287    3  TRUE    E  1.7399997\n14      14 0.21302545    2  TRUE    K -0.3262169\n15      15 0.73249612    1 FALSE    K  0.1485432\n16      16 0.49924102    3 FALSE    K -0.3798679\n17      17 0.72977197    4 FALSE    K  0.7884411\n19      19 0.43553048    3 FALSE    K  0.2583817\n20      20 0.23658045    1 FALSE    E  0.2401732"
  },
  {
    "objectID": "data_types.html#tibble",
    "href": "data_types.html#tibble",
    "title": "2  Veri Tipleri ve Yapıları",
    "section": "2.5 tibble",
    "text": "2.5 tibble\ntibble, Hadley Wickham tarafından geliştirilen ve dplyr paketi ile sıkça kullanılan bir veri yapısıdır. tibble, data.frame’e benzerdir, ancak bazı önemli farklar vardır. tibble, daha düzenli ve okunabilir bir çıktı üretir ve bazı varsayılan davranışları data.frame’den farklıdır. Modern data.frame olarak tanımlanmaktadır.\n\n# tibble örneği\nlibrary(tibble)\n\nogrenciler_tibble &lt;- tribble(\n  ~Ad,     ~Yas, ~Cinsiyet,\n  \"Ali\",   20,   \"Erkek\",\n  \"Ayşe\",  22,   \"Kadın\",\n  \"Mehmet\", 21,  \"Erkek\",\n  \"Zeynep\", 23,  \"Kadın\"\n)\n\n# tibble'ı görüntüleme\nprint(ogrenciler_tibble)\n\n# A tibble: 4 × 3\n  Ad       Yas Cinsiyet\n  &lt;chr&gt;  &lt;dbl&gt; &lt;chr&gt;   \n1 Ali       20 Erkek   \n2 Ayşe      22 Kadın   \n3 Mehmet    21 Erkek   \n4 Zeynep    23 Kadın   \n\n\nYukarıdaki örnekte, “ogrenciler_tibble” adında bir tibble oluşturuldu. tibble, sütun adlarını ve içeriği daha okunabilir bir şekilde görüntüler ve sütunların başlık ve veri tipi (~Ad, ~Yas, ~Cinsiyet) gibi özelliklerini korur.\n\n\n\n\n\n\nNot\n\n\n\nHem dataframe hem de tibble veri analizi ve işleme işlemlerinde kullanışlıdır. Hangi veri yapısını kullanacağınız, projenizin gereksinimlerine ve kişisel tercihinize bağlıdır. Özellikle veri analizi için dplyr gibi paketlerle çalışırken tibble tercih edilir."
  },
  {
    "objectID": "data_types.html#faktörler",
    "href": "data_types.html#faktörler",
    "title": "2  Veri Tipleri ve Yapıları",
    "section": "2.6 Faktörler",
    "text": "2.6 Faktörler\n\nFaktörler, verileri kategorilere ayırmak ve düzeyler halinde depolamak için kullanılan veri nesneleridir. Hem karakter hem de tam sayıları depolayabilirler.\n“Erkek,”Kadın” ve Doğru, Yanlış vb. gibi istatistiksel modelleme için veri analizinde faydalıdırlar.\nFaktörler, girdi olarak bir vektör alınarak factor() işlevi kullanılarak oluşturulur.\n\n\ndata &lt;- c(rep(\"erkek\",5),rep(\"kadın\",7))\nprint(data)\n\n [1] \"erkek\" \"erkek\" \"erkek\" \"erkek\" \"erkek\" \"kadın\" \"kadın\" \"kadın\" \"kadın\"\n[10] \"kadın\" \"kadın\" \"kadın\"\n\nis.factor(data)\n\n[1] FALSE\n\n# veriyi faktöre çevirme\nfactor_data &lt;- factor(data)\n\nprint(factor_data)\n\n [1] erkek erkek erkek erkek erkek kadın kadın kadın kadın kadın kadın kadın\nLevels: erkek kadın\n\nprint(is.factor(factor_data))\n\n[1] TRUE\n\nas.numeric(factor_data)\n\n [1] 1 1 1 1 1 2 2 2 2 2 2 2\n\n# data frame için vektörler oluşturalım\nboy &lt;- c(132,151,162,139,166,147,122)\nkilo &lt;- c(48,49,66,53,67,52,40)\ncinsiyet &lt;- c(\"erkek\",\"erkek\",\"kadın\",\"kadın\",\"erkek\",\"kadın\",\"erkek\")\n\n# data frame\ndf &lt;- data.frame(boy,kilo,cinsiyet)\nstr(df)\n\n'data.frame':   7 obs. of  3 variables:\n $ boy     : num  132 151 162 139 166 147 122\n $ kilo    : num  48 49 66 53 67 52 40\n $ cinsiyet: chr  \"erkek\" \"erkek\" \"kadın\" \"kadın\" ...\n\ndf$cinsiyet &lt;- factor(cinsiyet)\nstr(df)\n\n'data.frame':   7 obs. of  3 variables:\n $ boy     : num  132 151 162 139 166 147 122\n $ kilo    : num  48 49 66 53 67 52 40\n $ cinsiyet: Factor w/ 2 levels \"erkek\",\"kadın\": 1 1 2 2 1 2 1\n\nprint(is.factor(df$cinsiyet))\n\n[1] TRUE\n\n# cinsiyet kolononun seviyeleri\nprint(df$cinsiyet)\n\n[1] erkek erkek kadın kadın erkek kadın erkek\nLevels: erkek kadın\n\n# seviyelerin sırası değiştirilebilir.\n\ndf2 &lt;- c(rep(\"düşük\",4),rep(\"orta\",5),rep(\"yüksek\",2))\n\nfactor_df2 &lt;- factor(df2)\nprint(factor_df2)\n\n [1] düşük  düşük  düşük  düşük  orta   orta   orta   orta   orta   yüksek\n[11] yüksek\nLevels: düşük orta yüksek\n\norder_df2 &lt;- factor(factor_df2,levels = c(\"yüksek\",\"orta\",\"düşük\"))\nprint(order_df2)\n\n [1] düşük  düşük  düşük  düşük  orta   orta   orta   orta   orta   yüksek\n[11] yüksek\nLevels: yüksek orta düşük\n\n# ordered=TRUE ile seviyelerin sıralı olduğu ifade edilir\norder_df2 &lt;- factor(factor_df2,levels = c(\"yüksek\",\"orta\",\"düşük\"),ordered = TRUE)\nprint(order_df2)\n\n [1] düşük  düşük  düşük  düşük  orta   orta   orta   orta   orta   yüksek\n[11] yüksek\nLevels: yüksek &lt; orta &lt; düşük\n\n# Faktör seviyesi üretme\n\n# gl() fonksiyonunu kullanarak faktör seviyeleri üretebiliriz. \n# Girdi olarak kaç seviye ve her seviyeden kaç tane sayı oalcağı belirtilir.\n\nfaktor &lt;- gl(n=3, k=4, labels = c(\"level1\", \"level2\",\"level3\"),ordered = TRUE)\nprint(faktor)\n\n [1] level1 level1 level1 level1 level2 level2 level2 level2 level3 level3\n[11] level3 level3\nLevels: level1 &lt; level2 &lt; level3"
  },
  {
    "objectID": "date_time.html",
    "href": "date_time.html",
    "title": "5  Tarih ve Zaman İşlemleri",
    "section": "",
    "text": "Tarihler, Date sınıfı tarafından temsil edilir ve as.Date() işlevi kullanılarak bir karakter dizesinden oluşturulabilir. Bu, R’de bir Date nesnesi elde etmenin yaygın bir yoludur. Date sınıfı varsayılan olarak tarihleri 1 Ocak 1970’den bu yana geçen günlerin sayısı olarak temsil eder. as.Date() işlevinin kullanılması bir karakter dizesinden Date nesneleri oluşturmamıza olanak tanır. Varsayılan biçim “YYYY/m/d” veya “YYYY-m-d” şeklindedir.\n\nSys.Date()\n\n[1] \"2023-12-22\"\n\nclass(Sys.Date())\n\n[1] \"Date\"\n\nmyDate &lt;- as.Date(\"2022-01-04\")\n\nclass(myDate)\n\n[1] \"Date\"\n\n# format argümanı ile tarih formatı tanımlanabilir\nas.Date(\"12/31/2021\", format = \"%m/%d/%Y\")\n\n[1] \"2021-12-31\"\n\n# year\nformat(myDate, \"%Y\")\n\n[1] \"2022\"\n\nas.numeric(format(myDate, \"%Y\"))\n\n[1] 2022\n\n# weekday\nweekdays(myDate)\n\n[1] \"Salı\"\n\n# month\nmonths(myDate)\n\n[1] \"Ocak\"\n\n# quarters\nquarters(myDate)\n\n[1] \"Q1\"\n\n# create date sequence \ndate_week &lt;- seq(from = as.Date(\"2021-10-1\"), \n    to = as.Date(\"2021/12/31\"), \n    by = \"1 week\")\n\ndate_week\n\n [1] \"2021-10-01\" \"2021-10-08\" \"2021-10-15\" \"2021-10-22\" \"2021-10-29\"\n [6] \"2021-11-05\" \"2021-11-12\" \"2021-11-19\" \"2021-11-26\" \"2021-12-03\"\n[11] \"2021-12-10\" \"2021-12-17\" \"2021-12-24\" \"2021-12-31\"\n\ndate_day &lt;- seq(from = as.Date(\"2021-12-15\"), \n    to = as.Date(\"2021/12/31\"), \n    by = \"day\")\n\ndate_day\n\n [1] \"2021-12-15\" \"2021-12-16\" \"2021-12-17\" \"2021-12-18\" \"2021-12-19\"\n [6] \"2021-12-20\" \"2021-12-21\" \"2021-12-22\" \"2021-12-23\" \"2021-12-24\"\n[11] \"2021-12-25\" \"2021-12-26\" \"2021-12-27\" \"2021-12-28\" \"2021-12-29\"\n[16] \"2021-12-30\" \"2021-12-31\"\n\ndate_month &lt;- seq(from = as.Date(\"2021-1-15\"), \n    to = as.Date(\"2021/12/31\"), \n    by = \"month\")\n\ndate_month\n\n [1] \"2021-01-15\" \"2021-02-15\" \"2021-03-15\" \"2021-04-15\" \"2021-05-15\"\n [6] \"2021-06-15\" \"2021-07-15\" \"2021-08-15\" \"2021-09-15\" \"2021-10-15\"\n[11] \"2021-11-15\" \"2021-12-15\"\n\n\nTemel R POSIXt sınıfları, saat dilimlerini kontrol ederek tarih ve saatlere izin verir. R’de kullanılabilen iki POSIXt alt sınıfı vardır: POSIXct ve POSIXlt. POSIXct sınıfı, GMT (UTC – evrensel saat, koordineli) 1970-01-01 gece yarısından bu yana işaretli saniye sayısı olarak tarih-saat değerlerini temsil eder. POSIXlt sınıfı, tarih-saat değerlerini, saniye (sn), dakika (dk), saat (saat), ayın günü (mday), ay (mon), yıl (yıl), gün için öğeleri içeren adlandırılmış bir liste olarak temsil eder.\nTarih-saatleri temsil eden en yaygın format kodları seti, strptime() işlevinin yardım dosyasında listelenmiştir (konsolunuza help(strptime) yazın).\n\nSys.time()\n\n[1] \"2023-12-22 12:00:52 +03\"\n\nclass(Sys.time())\n\n[1] \"POSIXct\" \"POSIXt\" \n\nmyDateTime &lt;- \"2021-12-11 22:10:35\"\nmyDateTime\n\n[1] \"2021-12-11 22:10:35\"\n\nclass(myDateTime)\n\n[1] \"character\"\n\nas.POSIXct(myDateTime)\n\n[1] \"2021-12-11 22:10:35 +03\"\n\nclass(as.POSIXct(myDateTime))\n\n[1] \"POSIXct\" \"POSIXt\" \n\nSys.timezone()\n\n[1] \"Europe/Istanbul\"\n\nas.POSIXct(\"30-12-2021 23:25\", format = \"%d-%m-%Y %H:%M\")\n\n[1] \"2021-12-30 23:25:00 +03\"\n\nmyDateTime.POSIXlt &lt;- as.POSIXlt(myDateTime)\n\n# seconds\nmyDateTime.POSIXlt$sec\n\n[1] 35\n\n# minutes\nmyDateTime.POSIXlt$min\n\n[1] 10\n\n# hours\nmyDateTime.POSIXlt$hour\n\n[1] 22\n\n# POSIXt nesneleri tarih formatına dönüştürülebilir.\nas.Date(myDateTime.POSIXlt)\n\n[1] \"2021-12-11\"\n\n\nlubridate paketi, R’de tarih ve saatlerle çalışmayı kolaylaştıran çeşitli işlevler sağlar. Lubridate paketi, ymd(), ymd_hms(),dmy(), dmy_hms(),mdy()gibi işlevler sağlayarak tarih-zamanların ayrıştırılmasını kolay ve hızlı hale getirir.\n\nlibrary(lubridate)\n\n\nAttaching package: 'lubridate'\n\n\nThe following objects are masked from 'package:base':\n\n    date, intersect, setdiff, union\n\n# convert a number into a data object\nymd(20211215) # year-month-date\n\n[1] \"2021-12-15\"\n\nymd_hm(202112121533) # year-month-date-hour-minute\n\n[1] \"2021-12-12 15:33:00 UTC\"\n\nmdy(\"Aralık 13, 2021\") # month date year\n\n[1] \"2021-12-13\"\n\nmdy(\"12 18, 2021\") # month date year\n\n[1] \"2021-12-18\"\n\ndmy(241221) # day-month-year\n\n[1] \"2021-12-24\"\n\ndmy(24122021) # day-month-year\n\n[1] \"2021-12-24\"\n\ntoday &lt;- Sys.time()\ntoday\n\n[1] \"2023-12-22 12:00:52 +03\"\n\nyear(today) # year\n\n[1] 2023\n\nmonth(today) # month\n\n[1] 12\n\nmonth(today, label = TRUE) # labeled month\n\n[1] Ara\n12 Levels: Oca &lt; Şub &lt; Mar &lt; Nis &lt; May &lt; Haz &lt; Tem &lt; Ağu &lt; Eyl &lt; ... &lt; Ara\n\nmonth(today,label = TRUE, abbr = FALSE) # labeled month\n\n[1] Aralık\n12 Levels: Ocak &lt; Şubat &lt; Mart &lt; Nisan &lt; Mayıs &lt; Haziran &lt; ... &lt; Aralık\n\nweek(today) # week\n\n[1] 51\n\nmday(today) # day\n\n[1] 22\n\nwday(today) # weekday\n\n[1] 6\n\nwday(today, label = TRUE) # labeled weekday\n\n[1] Cum\nLevels: Paz &lt; Pzt &lt; Sal &lt; Çar &lt; Per &lt; Cum &lt; Cmt\n\nwday(today, label = TRUE, abbr = FALSE) # labeled weekday\n\n[1] Cuma\n7 Levels: Pazar &lt; Pazartesi &lt; Salı &lt; Çarşamba &lt; Perşembe &lt; ... &lt; Cumartesi\n\nyday(today) # day of the year\n\n[1] 356\n\nhour(today) # hour\n\n[1] 12\n\nminute(today) # minute\n\n[1] 0\n\nsecond(today) # second\n\n[1] 52.92707\n\n\nYukarıda listelenen çeşitli işlevlere ek olarak, zoo paketindeki as.yearmon() ve as.yearqtr() işlevleri, düzenli aralıklarla aylık ve üç aylık verilerle çalışırken uygundur.\n\nlibrary(zoo)\n\n\nAttaching package: 'zoo'\n\n\nThe following objects are masked from 'package:base':\n\n    as.Date, as.Date.numeric\n\nas.yearmon(today)\n\n[1] \"Ara 2023\"\n\nformat(as.yearmon(today), \"%B %Y\")\n\n[1] \"Aralık 2023\"\n\nformat(as.yearmon(today), \"%Y-%m\")\n\n[1] \"2023-12\"\n\nas.yearqtr(today)\n\n[1] \"2023 Q4\"\n\n# dataframe içerisinde tarih kullanmak\ndf &lt;-\n  data.frame(date = c(\n    \"2010-02-01\",\n    \"20110522\",\n    \"2009/04/30\",\n    \"2012 11 05\",\n    \"11-9-2015\"\n  ))\n\ndf$date2 &lt;- as.Date(parse_date_time(df$date, c(\"ymd\", \"mdy\")))            \ndf\n\n        date      date2\n1 2010-02-01 2010-02-01\n2   20110522 2011-05-22\n3 2009/04/30 2009-04-30\n4 2012 11 05 2012-11-05\n5  11-9-2015 2015-11-09"
  },
  {
    "objectID": "import_export.html",
    "href": "import_export.html",
    "title": "8  Verilerin İçe ve Dışa Aktarılması",
    "section": "",
    "text": "Temel anlamda R içerisinde excel ortamından (virgül ya da noktalı virgül ile ayrılmış) veri aktarımı (import) için read.table, read.csv, read.csv2 fonksiyonları kullanılmaktadır. Excel’den veri aktarımı için readxl veya openxlsxpaketi kullanılabilir. Verilerin dışa aktarılması için ise write.csv, write.table fonksiyonları kullanılabilir.\n\n# delimiter/separator , ise\nmtcars_csv &lt;- read.csv(\"datasets/mtcars_csv.csv\")\nstr(mtcars_csv)\n\n'data.frame':   32 obs. of  12 variables:\n $ car : chr  \"Mazda RX4\" \"Mazda RX4 Wag\" \"Datsun 710\" \"Hornet 4 Drive\" ...\n $ mpg : num  21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ...\n $ cyl : int  6 6 4 6 8 6 8 4 4 6 ...\n $ disp: num  160 160 108 258 360 ...\n $ hp  : int  110 110 93 110 175 105 245 62 95 123 ...\n $ drat: num  3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ...\n $ wt  : num  2.62 2.88 2.32 3.21 3.44 ...\n $ qsec: num  16.5 17 18.6 19.4 17 ...\n $ vs  : int  0 0 1 1 0 1 0 1 1 1 ...\n $ am  : int  1 1 1 0 0 0 0 0 0 0 ...\n $ gear: int  4 4 4 3 3 3 3 4 4 4 ...\n $ carb: int  4 4 1 1 2 1 4 2 2 4 ...\n\n# stringsAsFactors karakter kolonları faktöre çevirir\nmtcars_csv &lt;- read.csv(\"datasets/mtcars_csv.csv\",\n                       stringsAsFactors = TRUE)\nstr(mtcars_csv)\n\n'data.frame':   32 obs. of  12 variables:\n $ car : Factor w/ 32 levels \"AMC Javelin\",..: 18 19 5 13 14 31 7 21 20 22 ...\n $ mpg : num  21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ...\n $ cyl : int  6 6 4 6 8 6 8 4 4 6 ...\n $ disp: num  160 160 108 258 360 ...\n $ hp  : int  110 110 93 110 175 105 245 62 95 123 ...\n $ drat: num  3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ...\n $ wt  : num  2.62 2.88 2.32 3.21 3.44 ...\n $ qsec: num  16.5 17 18.6 19.4 17 ...\n $ vs  : int  0 0 1 1 0 1 0 1 1 1 ...\n $ am  : int  1 1 1 0 0 0 0 0 0 0 ...\n $ gear: int  4 4 4 3 3 3 3 4 4 4 ...\n $ carb: int  4 4 1 1 2 1 4 2 2 4 ...\n\n# delimiter/separator ; ise\n\nmtcars_csv2 &lt;- read.csv2(\"datasets/mtcars_csv2.csv\")\nstr(mtcars_csv2)\n\n'data.frame':   32 obs. of  12 variables:\n $ car : chr  \"Mazda RX4\" \"Mazda RX4 Wag\" \"Datsun 710\" \"Hornet 4 Drive\" ...\n $ mpg : chr  \"21\" \"21\" \"22.8\" \"21.4\" ...\n $ cyl : int  6 6 4 6 8 6 8 4 4 6 ...\n $ disp: chr  \"160\" \"160\" \"108\" \"258\" ...\n $ hp  : int  110 110 93 110 175 105 245 62 95 123 ...\n $ drat: chr  \"3.9\" \"3.9\" \"3.85\" \"3.08\" ...\n $ wt  : chr  \"2.62\" \"2.875\" \"2.32\" \"3.215\" ...\n $ qsec: chr  \"16.46\" \"17.02\" \"18.61\" \"19.44\" ...\n $ vs  : int  0 0 1 1 0 1 0 1 1 1 ...\n $ am  : int  1 1 1 0 0 0 0 0 0 0 ...\n $ gear: int  4 4 4 3 3 3 3 4 4 4 ...\n $ carb: int  4 4 1 1 2 1 4 2 2 4 ...\n\n# read.table\n\nmtcars_csv &lt;- read.table(\"datasets/mtcars_csv.csv\",\n                         sep = \",\",\n                         header = TRUE)\n\nmtcars_csv2 &lt;- read.table(\"datasets/mtcars_csv2.csv\",\n                          sep = \";\",\n                          header = TRUE)\n\n# txt uzantılı dosyalar\n\nmtcars_txt &lt;- read.table(\"datasets/mtcars_txt.txt\",\n                          sep = \";\",\n                          header = TRUE)\n\n# excel dosyaları için\nlibrary(readxl)\nmtcars_excel &lt;- read_excel(\"datasets/mtcars_excel.xlsx\",\n                           sheet = \"mtcars\")\nstr(mtcars_excel)\n\ntibble [32 × 12] (S3: tbl_df/tbl/data.frame)\n $ car : chr [1:32] \"Mazda RX4\" \"Mazda RX4 Wag\" \"Datsun 710\" \"Hornet 4 Drive\" ...\n $ mpg : num [1:32] 21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ...\n $ cyl : num [1:32] 6 6 4 6 8 6 8 4 4 6 ...\n $ disp: num [1:32] 160 160 108 258 360 ...\n $ hp  : num [1:32] 110 110 93 110 175 105 245 62 95 123 ...\n $ drat: num [1:32] 3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ...\n $ wt  : num [1:32] 2.62 2.88 2.32 3.21 3.44 ...\n $ qsec: num [1:32] 16.5 17 18.6 19.4 17 ...\n $ vs  : num [1:32] 0 0 1 1 0 1 0 1 1 1 ...\n $ am  : num [1:32] 1 1 1 0 0 0 0 0 0 0 ...\n $ gear: num [1:32] 4 4 4 3 3 3 3 4 4 4 ...\n $ carb: num [1:32] 4 4 1 1 2 1 4 2 2 4 ...\n\nmtcars_excel2 &lt;- read_excel(\"datasets/mtcars_excel.xlsx\",\n                            sheet = \"mtcars2\")\n\nNew names:\n• `` -&gt; `...2`\n• `` -&gt; `...3`\n• `` -&gt; `...4`\n• `` -&gt; `...5`\n\nstr(mtcars_excel2) # tablo 2. satırdan başlıyor o yüzden tablo başlıkları hatalı\n\ntibble [33 × 5] (S3: tbl_df/tbl/data.frame)\n $ mtcars verisi: chr [1:33] \"car\" \"Mazda RX4\" \"Mazda RX4 Wag\" \"Datsun 710\" ...\n $ ...2         : chr [1:33] \"mpg\" \"21\" \"21\" \"22.8\" ...\n $ ...3         : chr [1:33] \"cyl\" \"6\" \"6\" \"4\" ...\n $ ...4         : chr [1:33] \"disp\" \"160\" \"160\" \"108\" ...\n $ ...5         : chr [1:33] \"hp\" \"110\" \"110\" \"93\" ...\n\n# istenilen satırı atlayarak istenilen sheet adı için,\nmtcars_excel2 &lt;- read_excel(\"datasets/mtcars_excel.xlsx\",\n                            sheet = \"mtcars2\",\n                            skip = 1)\nstr(mtcars_excel2)\n\ntibble [32 × 5] (S3: tbl_df/tbl/data.frame)\n $ car : chr [1:32] \"Mazda RX4\" \"Mazda RX4 Wag\" \"Datsun 710\" \"Hornet 4 Drive\" ...\n $ mpg : num [1:32] 21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ...\n $ cyl : num [1:32] 6 6 4 6 8 6 8 4 4 6 ...\n $ disp: num [1:32] 160 160 108 258 360 ...\n $ hp  : num [1:32] 110 110 93 110 175 105 245 62 95 123 ...\n\n# export\n\nwrite.csv(mtcars_csv,\"write_mtcars.csv\",\n          row.names = FALSE)\n\nwrite.table(mtcars_csv,\"write_mtcars.csv\",\n            row.names = FALSE,\n            sep = \";\")\n\nopenxlsx::write.xlsx(mtcars_csv,\"write_mtcars.xlsx\")"
  },
  {
    "objectID": "strings.html",
    "href": "strings.html",
    "title": "6  Metin İşlemleri",
    "section": "",
    "text": "R’de bir çift tek tırnak veya çift tırnak içine yazılan herhangi bir değer, bir karakter olarak kabul edilir. Karakter yapısına sahip olan verilerin analizi özellikle metin madenciliği konusunda kullanışlıdır. Karakter nesneleri üzerinde çalışmak için kullanılabilecek birçok fonksiyon vardır.\n\n# as.character\nas.character(3.14)\n\n[1] \"3.14\"\n\nclass(as.character(3.14))\n\n[1] \"character\"\n\n# paste and paste0 karakter verilerini birleştirir\n\nfirst &lt;- \"Fatih\"\nlast &lt;- \"Tüzen\"\npaste(first,last) # default olarak arada boşluk bırakır\n\n[1] \"Fatih Tüzen\"\n\npaste0(first,last) # default olarak arada boşluk yoktur\n\n[1] \"FatihTüzen\"\n\npaste(\"R\",\"Python\",\"SPSS\",sep = \"-\")\n\n[1] \"R-Python-SPSS\"\n\n# grep fonksiyonu metin vektörünün içinde belirli bir deseni arar\n\nx &lt;- c(\"R programı\",\"program\",\"istatistik\",\"programlama dili\",\"bilgisayar\",\"matematik\")\ngrep(\"program\",x)\n\n[1] 1 2 4\n\ngrep(\"^ist\",x) # ist ile başlayan ifdelerin olduğu yerler\n\n[1] 3\n\ngrep(\"tik$\",x) # tik ile biten ifdelerin olduğu yerler\n\n[1] 3 6\n\n# grepl TRUE-FALSE olarak sonuç döndürür\ngrepl(\"tik$\",x) # tik ile biten ifdelerin olduğu yerler\n\n[1] FALSE FALSE  TRUE FALSE FALSE  TRUE\n\nx[grep(\"tik$\",x)] # tik ile biten ifdelerin olduğu yerler\n\n[1] \"istatistik\" \"matematik\" \n\nx[grepl(\"tik$\",x)] # tik ile biten ifdelerin olduğu yerler\n\n[1] \"istatistik\" \"matematik\" \n\n# nchar karakter uzunluğunu verir\nnchar(x)\n\n[1] 10  7 10 16 10  9\n\nnchar(\"R Programlama\") # boşluklar da sayılır!\n\n[1] 13\n\n# tolower ve toupper \ntoupper(\"program\") # karakteri büyük harf yapar\n\n[1] \"PROGRAM\"\n\ntolower(c(\"SPSS\",\"R\",\"PYTHON\")) # karakteri küçük harf yapar\n\n[1] \"spss\"   \"r\"      \"python\"\n\n# substr ve substring ile karakter parçalama yapılır\nsubstr(\"123456789\",start = 3, stop = 6)\n\n[1] \"3456\"\n\nsubstring(\"123456789\", first =3, last = 6)\n\n[1] \"3456\"\n\nx &lt;- \"R Programlama\"\nsubstr(x,nchar(x)-3,nchar(x)) # son 4 karakteri getir\n\n[1] \"lama\"\n\n# strsplit karakteri bölme işini yapar\nstrsplit(\"Ankara;İstanbul;İzmir\",split = \";\")\n\n[[1]]\n[1] \"Ankara\"   \"İstanbul\" \"İzmir\""
  },
  {
    "objectID": "apply.html",
    "href": "apply.html",
    "title": "7  Apply Ailesi",
    "section": "",
    "text": "Apply() ailesi, matrislerden, dizilerden, listelerden ve veri çerçevelerinden tekrarlayan bir şekilde veri dilimlerini işlemek için fonksiyonlarla doldurulur. Bu fonksiyonlar sayesinde döngü yapılarının kullanılmasından kaçınır. Bir girdi listesi, matris veya dizi üzerinde hareket ederler ve bir veya birkaç isteğe bağlı argümanla adlandırılmış bir fonksiyon uygularlar.\n\napply(): bir dizinin ya da matrisin satır ya da sütunlarına fonksiyon uygular.\nlapply(): liste üzerindeki her elemana fonksiyon uygular.\nsapply(): lapply fonksiyonu ile aynıdır ancak çıktısı matris ya da veri çerçevesidir.\nmapply(): lapply fonksiyonunun çoklu versiyonudur.\ntapply(): faktör ya da grup düzeyinde fonksiyon uygular.\n\n\n# apply\nx &lt;-matrix(rnorm(30), nrow=5, ncol=6)\nx\n\n            [,1]       [,2]       [,3]       [,4]       [,5]       [,6]\n[1,] -1.27507491 -1.0088585 -0.3796983 -0.4999693  0.1703876  1.3377758\n[2,]  1.14976657 -0.2593233 -1.4064004  0.9156250  0.6074136 -1.6071119\n[3,]  0.30835856 -0.7141952  0.3321518  0.8680719 -0.1064480  0.6197739\n[4,] -1.17991961  0.6278287  0.3253144  0.8384022 -1.6915523 -0.1022721\n[5,]  0.06393875 -1.6922263  0.4901446  0.7231798  0.1336735  0.2751247\n\napply(x, 2 ,sum) # sütunlar üzerinde işlem yapar\n\n[1] -0.9329306 -3.0467746 -0.6384879  2.8453095 -0.8865256  0.5232903\n\napply(x, 1 ,sum) # satırlar üzerinde işlem yapar\n\n[1] -1.655437520 -0.600030577  1.307712926 -1.182198739 -0.006164944\n\napply(x, 2 ,sd)\n\n[1] 1.0326048 0.8654985 0.7900942 0.6017967 0.8847806 1.0940703\n\napply(x, 1 ,mean)\n\n[1] -0.275906253 -0.100005096  0.217952154 -0.197033123 -0.001027491\n\nmat &lt;- matrix(c(1:12),nrow=4)\nmat\n\n     [,1] [,2] [,3]\n[1,]    1    5    9\n[2,]    2    6   10\n[3,]    3    7   11\n[4,]    4    8   12\n\napply(mat,2,function(x) x^2) # gözlemlerin karesi alınır\n\n     [,1] [,2] [,3]\n[1,]    1   25   81\n[2,]    4   36  100\n[3,]    9   49  121\n[4,]   16   64  144\n\napply(mat,2, quantile,probs=c(0.25,0.5,0.75)) # extra argüman eklenebilir\n\n    [,1] [,2]  [,3]\n25% 1.75 5.75  9.75\n50% 2.50 6.50 10.50\n75% 3.25 7.25 11.25\n\n# lapply\n\na &lt;-matrix(1:9, 3,3)\nb &lt;-matrix(4:15, 4,3)\nc &lt;-matrix(8:10, 3,2)\nmylist&lt;-list(a,b,c)\nmylist\n\n[[1]]\n     [,1] [,2] [,3]\n[1,]    1    4    7\n[2,]    2    5    8\n[3,]    3    6    9\n\n[[2]]\n     [,1] [,2] [,3]\n[1,]    4    8   12\n[2,]    5    9   13\n[3,]    6   10   14\n[4,]    7   11   15\n\n[[3]]\n     [,1] [,2]\n[1,]    8    8\n[2,]    9    9\n[3,]   10   10\n\nlapply(mylist,mean)\n\n[[1]]\n[1] 5\n\n[[2]]\n[1] 9.5\n\n[[3]]\n[1] 9\n\nlapply(mylist,sum)\n\n[[1]]\n[1] 45\n\n[[2]]\n[1] 114\n\n[[3]]\n[1] 54\n\nlapply(mylist, function(x) x[,1]) # listedeki her matrisin ilk kolonunu çıkar\n\n[[1]]\n[1] 1 2 3\n\n[[2]]\n[1] 4 5 6 7\n\n[[3]]\n[1]  8  9 10\n\nmylist2 &lt;- list(a = 1:4, b = rnorm(10), c = rnorm(20, 1), d = rnorm(100, 5))\nmylist2\n\n$a\n[1] 1 2 3 4\n\n$b\n [1] -0.1198991  0.4115701 -0.4753358  0.3498631  1.5773320 -0.3011763\n [7]  1.8438858 -0.4942099  0.7657154 -0.9300382\n\n$c\n [1]  1.33192304  0.33750526 -0.08267174  1.62219118  0.21099524  1.85144406\n [7] -0.53527471  0.84136872  0.40087836  0.60953492  0.04032513  2.89878706\n[13]  0.24382891  2.66562519  1.06793378 -0.28790585  0.92825357  1.69277531\n[19]  1.90306146  1.03038022\n\n$d\n  [1] 5.209736 5.043302 4.553650 6.238681 3.341995 3.783668 4.075675 6.648855\n  [9] 3.693345 5.946357 5.652394 5.200276 4.591318 5.595697 4.127274 5.280266\n [17] 3.811869 4.485252 6.170679 6.682186 3.865235 5.337021 6.845522 6.092775\n [25] 4.087629 6.012950 6.483647 4.319448 4.118940 3.677691 4.843739 5.262048\n [33] 4.761186 5.653957 7.221221 4.455941 4.292787 5.953259 3.958723 3.573314\n [41] 6.648553 6.098428 5.034602 4.128819 4.717071 2.914560 3.817678 4.620079\n [49] 3.695174 4.608430 3.913974 4.386855 4.878896 6.112413 4.717725 6.516702\n [57] 5.437165 5.085913 4.387478 6.368374 6.116356 4.664742 4.469434 5.236728\n [65] 4.246799 5.087962 6.980262 4.951805 4.927347 3.687336 4.793196 4.729426\n [73] 5.430327 3.964715 5.869760 3.906500 7.053610 4.838439 5.370617 5.497367\n [81] 4.325014 6.590160 5.196023 6.055657 5.287087 3.271900 5.436020 5.663479\n [89] 2.933123 4.429414 4.507910 3.728259 5.838016 4.896552 4.960043 4.442463\n [97] 4.631038 5.465606 3.830626 5.654621\n\nlapply(mylist2, mean)\n\n$a\n[1] 2.5\n\n$b\n[1] 0.2627707\n\n$c\n[1] 0.938548\n\n$d\n[1] 4.980041\n\n# sapply\n\nhead(cars)\n\n  speed dist\n1     4    2\n2     4   10\n3     7    4\n4     7   22\n5     8   16\n6     9   10\n\nlapply(cars,sum)\n\n$speed\n[1] 770\n\n$dist\n[1] 2149\n\nsapply(cars,sum)\n\nspeed  dist \n  770  2149 \n\nsapply(cars,median)\n\nspeed  dist \n   15    36 \n\nsapply(cars,mean)\n\nspeed  dist \n15.40 42.98 \n\n# mapply\n\nl1 &lt;- list(a=c(1:5),b=c(6:10))\nl2 &lt;- list(c=c(11:15),d=c(16:20))\n\nmapply(sum,l1$a,l1$b,l2$c,l2$d) # gözlemlerin toplamı\n\n[1] 34 38 42 46 50\n\nmapply(prod,l1$a,l1$b,l2$c,l2$d) # gözlemlerin çarpımı\n\n[1]  1056  2856  5616  9576 15000\n\n# tapply\n\ndf &lt;- data.frame(x =round(runif(15,min=1,max=10)),\n                 group=sample(c(1:3),15,replace = TRUE))\ndf\n\n   x group\n1  6     2\n2  3     1\n3  6     3\n4  5     1\n5  1     3\n6  4     3\n7  1     3\n8  2     2\n9  3     1\n10 5     1\n11 6     1\n12 6     1\n13 4     2\n14 1     1\n15 4     1\n\ntapply(df$x,df$group, FUN = mean)\n\n    1     2     3 \n4.125 4.000 3.000 \n\ntapply(df$x,df$group, FUN = sum)\n\n 1  2  3 \n33 12 12 \n\ntapply(df$x,df$group, FUN = length)\n\n1 2 3 \n8 3 4 \n\ntapply(df$x,df$group, FUN = range)\n\n$`1`\n[1] 1 6\n\n$`2`\n[1] 2 6\n\n$`3`\n[1] 1 6"
  }
]